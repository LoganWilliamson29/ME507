
SumoBot_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007464  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08007604  08007604  00017604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007920  08007920  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007920  08007920  00017920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007928  08007928  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007928  08007928  00017928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007930  08007930  00017930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000074  080079a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  080079a8  000204f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015660  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d44  00000000  00000000  00035704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  00038448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  000396e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c57d  00000000  00000000  0003a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016767  00000000  00000000  00056e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a17e0  00000000  00000000  0006d56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ed4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a0c  00000000  00000000  0010ed9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080075ec 	.word	0x080075ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080075ec 	.word	0x080075ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <_ZN5motorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_ts>:
{

}

//Initializing constructor
motor::motor(TIM_HandleTypeDef* _htim,
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	80fb      	strh	r3, [r7, #6]
			 GPIO_TypeDef*		_nSLEEP,
			 uint16_t			_nSLEEP_Pin,
			 int16_t            _level)
{

}
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <_ZN5motor9set_levelEl>:
					  GPIO_PIN_RESET);
}

//Motor duty cycle setting method
void motor::set_level(int32_t level)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	if (level<-4800)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
 8000da0:	da02      	bge.n	8000da8 <_ZN5motor9set_levelEl+0x18>
	{
		level = -4800;
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <_ZN5motor9set_levelEl+0xe8>)
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	e006      	b.n	8000db6 <_ZN5motor9set_levelEl+0x26>
	}
	else if (level>4800)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 8000dae:	dd02      	ble.n	8000db6 <_ZN5motor9set_levelEl+0x26>
	{
		level = 4800;
 8000db0:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8000db4:	603b      	str	r3, [r7, #0]
	}
	if (level>=0)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db2b      	blt.n	8000e14 <_ZN5motor9set_levelEl+0x84>
	{
		__HAL_TIM_SET_COMPARE(htim, TIM_EN, level);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	895b      	ldrh	r3, [r3, #10]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d105      	bne.n	8000dd0 <_ZN5motor9set_levelEl+0x40>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dce:	e018      	b.n	8000e02 <_ZN5motor9set_levelEl+0x72>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	895b      	ldrh	r3, [r3, #10]
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d105      	bne.n	8000de4 <_ZN5motor9set_levelEl+0x54>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	639a      	str	r2, [r3, #56]	; 0x38
 8000de2:	e00e      	b.n	8000e02 <_ZN5motor9set_levelEl+0x72>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	895b      	ldrh	r3, [r3, #10]
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d105      	bne.n	8000df8 <_ZN5motor9set_levelEl+0x68>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000df6:	e004      	b.n	8000e02 <_ZN5motor9set_levelEl+0x72>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIO_PH, GPIO_PH_Pin, GPIO_PIN_SET);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6858      	ldr	r0, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	891b      	ldrh	r3, [r3, #8]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f001 ffa3 	bl	8002d58 <HAL_GPIO_WritePin>
	else if (level<0)
	{
		__HAL_TIM_SET_COMPARE(htim, TIM_EN, level);
		HAL_GPIO_WritePin(GPIO_PH, GPIO_PH_Pin, GPIO_PIN_RESET);
	}
}
 8000e12:	e02d      	b.n	8000e70 <_ZN5motor9set_levelEl+0xe0>
	else if (level<0)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	da2a      	bge.n	8000e70 <_ZN5motor9set_levelEl+0xe0>
		__HAL_TIM_SET_COMPARE(htim, TIM_EN, level);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	895b      	ldrh	r3, [r3, #10]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d105      	bne.n	8000e2e <_ZN5motor9set_levelEl+0x9e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e2c:	e018      	b.n	8000e60 <_ZN5motor9set_levelEl+0xd0>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	895b      	ldrh	r3, [r3, #10]
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d105      	bne.n	8000e42 <_ZN5motor9set_levelEl+0xb2>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e40:	e00e      	b.n	8000e60 <_ZN5motor9set_levelEl+0xd0>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	895b      	ldrh	r3, [r3, #10]
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	d105      	bne.n	8000e56 <_ZN5motor9set_levelEl+0xc6>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e54:	e004      	b.n	8000e60 <_ZN5motor9set_levelEl+0xd0>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIO_PH, GPIO_PH_Pin, GPIO_PIN_RESET);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6858      	ldr	r0, [r3, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	891b      	ldrh	r3, [r3, #8]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f001 ff74 	bl	8002d58 <HAL_GPIO_WritePin>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	ffffed40 	.word	0xffffed40

08000e7c <_ZN6FlySkyC1EP17TIM_HandleTypeDefmmhhtttt>:
{

}

// Initializing Constructor
FlySky::FlySky(TIM_HandleTypeDef*	_htim,
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
				uint16_t 			_STR_Val2,
				uint16_t 			_THR_Val1,
				uint16_t 			_THR_Val2)
{

}
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_Z14bno055_setPageh>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2007      	movs	r0, #7
 8000ea8:	f000 f87a 	bl	8000fa0 <bno055_writeData>
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, (uint8_t*) &mode, 1);  //<-- I added the uint8_t cast here, not sure if that's a problem.
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	203d      	movs	r0, #61	; 0x3d
 8000ec4:	f000 f86c 	bl	8000fa0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d103      	bne.n	8000ed6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000ece:	2013      	movs	r0, #19
 8000ed0:	f000 f85a 	bl	8000f88 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000ed4:	e002      	b.n	8000edc <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000ed6:	2007      	movs	r0, #7
 8000ed8:	f000 f856 	bl	8000f88 <bno055_delay>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff ffe3 	bl	8000eb4 <bno055_setOperationMode>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000ef6:	200c      	movs	r0, #12
 8000ef8:	f7ff ffdc 	bl	8000eb4 <bno055_setOperationMode>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000f04:	2120      	movs	r1, #32
 8000f06:	203f      	movs	r0, #63	; 0x3f
 8000f08:	f000 f84a 	bl	8000fa0 <bno055_writeData>
  bno055_delay(700);
 8000f0c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f10:	f000 f83a 	bl	8000f88 <bno055_delay>
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  bno055_reset();
 8000f1e:	f7ff ffef 	bl	8000f00 <bno055_reset>

  uint8_t id = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 f923 	bl	8001178 <bno055_readData>
  if (id != BNO055_ID) {
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2ba0      	cmp	r3, #160	; 0xa0
 8000f36:	d004      	beq.n	8000f42 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4809      	ldr	r0, [pc, #36]	; (8000f64 <bno055_setup+0x4c>)
 8000f3e:	f005 f983 	bl	8006248 <iprintf>
  }
  bno055_setPage(0);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff ffa8 	bl	8000e98 <_Z14bno055_setPageh>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	203f      	movs	r0, #63	; 0x3f
 8000f4c:	f000 f828 	bl	8000fa0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000f50:	f7ff ffc8 	bl	8000ee4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000f54:	200a      	movs	r0, #10
 8000f56:	f000 f817 	bl	8000f88 <bno055_delay>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	08007604 	.word	0x08007604

08000f68 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <bno055_assignI2C+0x1c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000090 	.word	0x20000090

08000f88 <bno055_delay>:

void bno055_delay(int time) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 f922 	bl	80021dc <HAL_Delay>
#endif
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460a      	mov	r2, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	733b      	strb	r3, [r7, #12]
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000fb8:	4b5a      	ldr	r3, [pc, #360]	; (8001124 <bno055_writeData+0x184>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	230a      	movs	r3, #10
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	2150      	movs	r1, #80	; 0x50
 8000fc8:	f002 f824 	bl	8003014 <HAL_I2C_Master_Transmit>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 80a0 	beq.w	8001118 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d103      	bne.n	8000fe6 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000fde:	4852      	ldr	r0, [pc, #328]	; (8001128 <bno055_writeData+0x188>)
 8000fe0:	f005 f9b8 	bl	8006354 <puts>
 8000fe4:	e012      	b.n	800100c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d103      	bne.n	8000ff4 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000fec:	484f      	ldr	r0, [pc, #316]	; (800112c <bno055_writeData+0x18c>)
 8000fee:	f005 f9b1 	bl	8006354 <puts>
 8000ff2:	e00b      	b.n	800100c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d103      	bne.n	8001002 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000ffa:	484d      	ldr	r0, [pc, #308]	; (8001130 <bno055_writeData+0x190>)
 8000ffc:	f005 f9aa 	bl	8006354 <puts>
 8001000:	e004      	b.n	800100c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	4619      	mov	r1, r3
 8001006:	484b      	ldr	r0, [pc, #300]	; (8001134 <bno055_writeData+0x194>)
 8001008:	f005 f91e 	bl	8006248 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800100c:	4b45      	ldr	r3, [pc, #276]	; (8001124 <bno055_writeData+0x184>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fb31 	bl	8003678 <HAL_I2C_GetError>
 8001016:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d07e      	beq.n	800111c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d103      	bne.n	800102c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001024:	4844      	ldr	r0, [pc, #272]	; (8001138 <bno055_writeData+0x198>)
 8001026:	f005 f995 	bl	8006354 <puts>
 800102a:	e021      	b.n	8001070 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d103      	bne.n	800103a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001032:	4842      	ldr	r0, [pc, #264]	; (800113c <bno055_writeData+0x19c>)
 8001034:	f005 f98e 	bl	8006354 <puts>
 8001038:	e01a      	b.n	8001070 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	2b04      	cmp	r3, #4
 800103e:	d103      	bne.n	8001048 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001040:	483f      	ldr	r0, [pc, #252]	; (8001140 <bno055_writeData+0x1a0>)
 8001042:	f005 f987 	bl	8006354 <puts>
 8001046:	e013      	b.n	8001070 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b08      	cmp	r3, #8
 800104c:	d103      	bne.n	8001056 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800104e:	483d      	ldr	r0, [pc, #244]	; (8001144 <bno055_writeData+0x1a4>)
 8001050:	f005 f980 	bl	8006354 <puts>
 8001054:	e00c      	b.n	8001070 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	2b10      	cmp	r3, #16
 800105a:	d103      	bne.n	8001064 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800105c:	483a      	ldr	r0, [pc, #232]	; (8001148 <bno055_writeData+0x1a8>)
 800105e:	f005 f979 	bl	8006354 <puts>
 8001062:	e005      	b.n	8001070 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	2b20      	cmp	r3, #32
 8001068:	d102      	bne.n	8001070 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800106a:	4838      	ldr	r0, [pc, #224]	; (800114c <bno055_writeData+0x1ac>)
 800106c:	f005 f972 	bl	8006354 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <bno055_writeData+0x184>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f002 faf1 	bl	800365c <HAL_I2C_GetState>
 800107a:	4603      	mov	r3, r0
 800107c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d103      	bne.n	800108c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001084:	4832      	ldr	r0, [pc, #200]	; (8001150 <bno055_writeData+0x1b0>)
 8001086:	f005 f965 	bl	8006354 <puts>
 800108a:	e048      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	2b20      	cmp	r3, #32
 8001090:	d103      	bne.n	800109a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001092:	482f      	ldr	r0, [pc, #188]	; (8001150 <bno055_writeData+0x1b0>)
 8001094:	f005 f95e 	bl	8006354 <puts>
 8001098:	e041      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	2b24      	cmp	r3, #36	; 0x24
 800109e:	d103      	bne.n	80010a8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80010a0:	482c      	ldr	r0, [pc, #176]	; (8001154 <bno055_writeData+0x1b4>)
 80010a2:	f005 f957 	bl	8006354 <puts>
 80010a6:	e03a      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	2b21      	cmp	r3, #33	; 0x21
 80010ac:	d103      	bne.n	80010b6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80010ae:	482a      	ldr	r0, [pc, #168]	; (8001158 <bno055_writeData+0x1b8>)
 80010b0:	f005 f950 	bl	8006354 <puts>
 80010b4:	e033      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b22      	cmp	r3, #34	; 0x22
 80010ba:	d103      	bne.n	80010c4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80010bc:	4827      	ldr	r0, [pc, #156]	; (800115c <bno055_writeData+0x1bc>)
 80010be:	f005 f949 	bl	8006354 <puts>
 80010c2:	e02c      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b28      	cmp	r3, #40	; 0x28
 80010c8:	d103      	bne.n	80010d2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80010ca:	4825      	ldr	r0, [pc, #148]	; (8001160 <bno055_writeData+0x1c0>)
 80010cc:	f005 f942 	bl	8006354 <puts>
 80010d0:	e025      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b29      	cmp	r3, #41	; 0x29
 80010d6:	d103      	bne.n	80010e0 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80010d8:	4822      	ldr	r0, [pc, #136]	; (8001164 <bno055_writeData+0x1c4>)
 80010da:	f005 f93b 	bl	8006354 <puts>
 80010de:	e01e      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	2b2a      	cmp	r3, #42	; 0x2a
 80010e4:	d103      	bne.n	80010ee <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80010e6:	4820      	ldr	r0, [pc, #128]	; (8001168 <bno055_writeData+0x1c8>)
 80010e8:	f005 f934 	bl	8006354 <puts>
 80010ec:	e017      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2b60      	cmp	r3, #96	; 0x60
 80010f2:	d103      	bne.n	80010fc <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80010f4:	481d      	ldr	r0, [pc, #116]	; (800116c <bno055_writeData+0x1cc>)
 80010f6:	f005 f92d 	bl	8006354 <puts>
 80010fa:	e010      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2ba0      	cmp	r3, #160	; 0xa0
 8001100:	d103      	bne.n	800110a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001102:	481b      	ldr	r0, [pc, #108]	; (8001170 <bno055_writeData+0x1d0>)
 8001104:	f005 f926 	bl	8006354 <puts>
 8001108:	e009      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2be0      	cmp	r3, #224	; 0xe0
 800110e:	d106      	bne.n	800111e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <bno055_writeData+0x1d4>)
 8001112:	f005 f91f 	bl	8006354 <puts>
 8001116:	e002      	b.n	800111e <bno055_writeData+0x17e>
    return;
 8001118:	bf00      	nop
 800111a:	e000      	b.n	800111e <bno055_writeData+0x17e>
    return;
 800111c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000090 	.word	0x20000090
 8001128:	08007640 	.word	0x08007640
 800112c:	08007664 	.word	0x08007664
 8001130:	0800768c 	.word	0x0800768c
 8001134:	080076b0 	.word	0x080076b0
 8001138:	080076c8 	.word	0x080076c8
 800113c:	080076dc 	.word	0x080076dc
 8001140:	080076f0 	.word	0x080076f0
 8001144:	08007704 	.word	0x08007704
 8001148:	08007718 	.word	0x08007718
 800114c:	0800772c 	.word	0x0800772c
 8001150:	08007744 	.word	0x08007744
 8001154:	0800775c 	.word	0x0800775c
 8001158:	08007770 	.word	0x08007770
 800115c:	08007788 	.word	0x08007788
 8001160:	080077a0 	.word	0x080077a0
 8001164:	080077b8 	.word	0x080077b8
 8001168:	080077d8 	.word	0x080077d8
 800116c:	080077f8 	.word	0x080077f8
 8001170:	08007810 	.word	0x08007810
 8001174:	08007828 	.word	0x08007828

08001178 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af02      	add	r7, sp, #8
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <bno055_readData+0x40>)
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	1dfa      	adds	r2, r7, #7
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	2150      	movs	r1, #80	; 0x50
 8001196:	f001 ff3d 	bl	8003014 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <bno055_readData+0x40>)
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2264      	movs	r2, #100	; 0x64
 80011a4:	9200      	str	r2, [sp, #0]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	2150      	movs	r1, #80	; 0x50
 80011aa:	f002 f831 	bl	8003210 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000090 	.word	0x20000090
 80011bc:	00000000 	.word	0x00000000

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c4:	f000 ff98 	bl	80020f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 f904 	bl	80013d4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f000 fb3c 	bl	8001848 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80011d0:	f000 f972 	bl	80014b8 <_ZL12MX_ADC1_Initv>
  MX_TIM3_Init();
 80011d4:	f000 fa72 	bl	80016bc <_ZL12MX_TIM3_Initv>
  MX_TIM2_Init();
 80011d8:	f000 f9fe 	bl	80015d8 <_ZL12MX_TIM2_Initv>
  MX_USART6_UART_Init();
 80011dc:	f000 fb06 	bl	80017ec <_ZL19MX_USART6_UART_Initv>
  MX_I2C1_Init();
 80011e0:	f000 f9c6 	bl	8001570 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  // BNO055 DRIVERS BORROWED FROM THE FOLLOWING GITHUB REPO: https://github.com/ivyknob/bno055_stm32
  bno055_assignI2C(&hi2c1);
 80011e4:	4868      	ldr	r0, [pc, #416]	; (8001388 <main+0x1c8>)
 80011e6:	f7ff febf 	bl	8000f68 <bno055_assignI2C>
  bno055_setup();
 80011ea:	f7ff fe95 	bl	8000f18 <bno055_setup>
  bno055_setOperationModeNDOF();
 80011ee:	f7ff fe80 	bl	8000ef2 <bno055_setOperationModeNDOF>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Set motor1 levels based on receiver pulse widths
	  	  	  THR_lvl = 9.5427*receiver.THR_Width - 14495;
 80011f2:	4b66      	ldr	r3, [pc, #408]	; (800138c <main+0x1cc>)
 80011f4:	8b1b      	ldrh	r3, [r3, #24]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f994 	bl	8000524 <__aeabi_i2d>
 80011fc:	a35a      	add	r3, pc, #360	; (adr r3, 8001368 <main+0x1a8>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7ff f9f9 	bl	80005f8 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	a358      	add	r3, pc, #352	; (adr r3, 8001370 <main+0x1b0>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff f838 	bl	8000288 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fbfc 	bl	8000a1c <__aeabi_d2iz>
 8001224:	4603      	mov	r3, r0
 8001226:	4a5a      	ldr	r2, [pc, #360]	; (8001390 <main+0x1d0>)
 8001228:	6013      	str	r3, [r2, #0]
	  	  	  STR_lvl = 9.3842*receiver.STR_Width - 14118;
 800122a:	4b58      	ldr	r3, [pc, #352]	; (800138c <main+0x1cc>)
 800122c:	8adb      	ldrh	r3, [r3, #22]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f978 	bl	8000524 <__aeabi_i2d>
 8001234:	a350      	add	r3, pc, #320	; (adr r3, 8001378 <main+0x1b8>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff f9dd 	bl	80005f8 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	a34e      	add	r3, pc, #312	; (adr r3, 8001380 <main+0x1c0>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f81c 	bl	8000288 <__aeabi_dsub>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff fbe0 	bl	8000a1c <__aeabi_d2iz>
 800125c:	4603      	mov	r3, r0
 800125e:	4a4d      	ldr	r2, [pc, #308]	; (8001394 <main+0x1d4>)
 8001260:	6013      	str	r3, [r2, #0]
	  	  	  level_1 = THR_lvl - STR_lvl;
 8001262:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <main+0x1d0>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <main+0x1d4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	4a4a      	ldr	r2, [pc, #296]	; (8001398 <main+0x1d8>)
 800126e:	6013      	str	r3, [r2, #0]
	  	  	  level_2 = THR_lvl + STR_lvl;
 8001270:	4b47      	ldr	r3, [pc, #284]	; (8001390 <main+0x1d0>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b47      	ldr	r3, [pc, #284]	; (8001394 <main+0x1d4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4413      	add	r3, r2
 800127a:	4a48      	ldr	r2, [pc, #288]	; (800139c <main+0x1dc>)
 800127c:	6013      	str	r3, [r2, #0]
	  	  	  level_3 = level_1;
 800127e:	4b46      	ldr	r3, [pc, #280]	; (8001398 <main+0x1d8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a47      	ldr	r2, [pc, #284]	; (80013a0 <main+0x1e0>)
 8001284:	6013      	str	r3, [r2, #0]
	  	  	  level_4 = level_2;
 8001286:	4b45      	ldr	r3, [pc, #276]	; (800139c <main+0x1dc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a46      	ldr	r2, [pc, #280]	; (80013a4 <main+0x1e4>)
 800128c:	6013      	str	r3, [r2, #0]
	  	  	  if ((level_1>200) | (level_1<-200))
 800128e:	4b42      	ldr	r3, [pc, #264]	; (8001398 <main+0x1d8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2bc8      	cmp	r3, #200	; 0xc8
 8001294:	bfcc      	ite	gt
 8001296:	2301      	movgt	r3, #1
 8001298:	2300      	movle	r3, #0
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b3e      	ldr	r3, [pc, #248]	; (8001398 <main+0x1d8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80012a4:	bfb4      	ite	lt
 80012a6:	2301      	movlt	r3, #1
 80012a8:	2300      	movge	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00b      	beq.n	80012cc <main+0x10c>
	  	  	  {
	  	  	  motor1.set_level(level_1);
 80012b4:	4b38      	ldr	r3, [pc, #224]	; (8001398 <main+0x1d8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	483b      	ldr	r0, [pc, #236]	; (80013a8 <main+0x1e8>)
 80012bc:	f7ff fd68 	bl	8000d90 <_ZN5motor9set_levelEl>
	  	  	  motor3.set_level(level_3);
 80012c0:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <main+0x1e0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4839      	ldr	r0, [pc, #228]	; (80013ac <main+0x1ec>)
 80012c8:	f7ff fd62 	bl	8000d90 <_ZN5motor9set_levelEl>
	  	  	  }
	  	  	  if ((level_2>200) | (level_2<-200))
 80012cc:	4b33      	ldr	r3, [pc, #204]	; (800139c <main+0x1dc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2bc8      	cmp	r3, #200	; 0xc8
 80012d2:	bfcc      	ite	gt
 80012d4:	2301      	movgt	r3, #1
 80012d6:	2300      	movle	r3, #0
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <main+0x1dc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80012e2:	bfb4      	ite	lt
 80012e4:	2301      	movlt	r3, #1
 80012e6:	2300      	movge	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <main+0x14a>
	  	  	  {
	  	  	  motor2.set_level(level_2);
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <main+0x1dc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4619      	mov	r1, r3
 80012f8:	482d      	ldr	r0, [pc, #180]	; (80013b0 <main+0x1f0>)
 80012fa:	f7ff fd49 	bl	8000d90 <_ZN5motor9set_levelEl>
	  	  	  motor4.set_level(level_4);
 80012fe:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <main+0x1e4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	482b      	ldr	r0, [pc, #172]	; (80013b4 <main+0x1f4>)
 8001306:	f7ff fd43 	bl	8000d90 <_ZN5motor9set_levelEl>
	  	  	  }

	  	  //Print receiver channel pulse widths at a frequency of 2Hz
	  	  	  current_time = HAL_GetTick();
 800130a:	f000 ff5b 	bl	80021c4 <HAL_GetTick>
 800130e:	4603      	mov	r3, r0
 8001310:	4a29      	ldr	r2, [pc, #164]	; (80013b8 <main+0x1f8>)
 8001312:	6013      	str	r3, [r2, #0]
	  	  	  if (current_time >= next_time)
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <main+0x1f8>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <main+0x1fc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	f4ff af68 	bcc.w	80011f2 <main+0x32>
	  	  	  {
	  	  		  mess_len = sprintf(mess, "Throttle level is %d\r\nSteering level is %d\r\n\n", receiver.THR_Width, receiver.STR_Width);
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <main+0x1cc>)
 8001324:	8b1b      	ldrh	r3, [r3, #24]
 8001326:	461a      	mov	r2, r3
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <main+0x1cc>)
 800132a:	8adb      	ldrh	r3, [r3, #22]
 800132c:	4924      	ldr	r1, [pc, #144]	; (80013c0 <main+0x200>)
 800132e:	4825      	ldr	r0, [pc, #148]	; (80013c4 <main+0x204>)
 8001330:	f005 f818 	bl	8006364 <siprintf>
 8001334:	4603      	mov	r3, r0
 8001336:	b29a      	uxth	r2, r3
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <main+0x208>)
 800133a:	801a      	strh	r2, [r3, #0]
	  	  		  HAL_UART_Transmit(&huart6,(uint8_t*) &mess, mess_len, 10);
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <main+0x208>)
 800133e:	881a      	ldrh	r2, [r3, #0]
 8001340:	230a      	movs	r3, #10
 8001342:	4920      	ldr	r1, [pc, #128]	; (80013c4 <main+0x204>)
 8001344:	4821      	ldr	r0, [pc, #132]	; (80013cc <main+0x20c>)
 8001346:	f003 ff0a 	bl	800515e <HAL_UART_Transmit>
	  	  		  HAL_UART_Receive_IT(&huart6,(uint8_t*) &mess, 1);
 800134a:	2201      	movs	r2, #1
 800134c:	491d      	ldr	r1, [pc, #116]	; (80013c4 <main+0x204>)
 800134e:	481f      	ldr	r0, [pc, #124]	; (80013cc <main+0x20c>)
 8001350:	f003 ff97 	bl	8005282 <HAL_UART_Receive_IT>
	  	  		  next_time = current_time+period;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <main+0x210>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <main+0x1f8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a16      	ldr	r2, [pc, #88]	; (80013bc <main+0x1fc>)
 8001362:	6013      	str	r3, [r2, #0]
	  	  	  THR_lvl = 9.5427*receiver.THR_Width - 14495;
 8001364:	e745      	b.n	80011f2 <main+0x32>
 8001366:	bf00      	nop
 8001368:	c63f1412 	.word	0xc63f1412
 800136c:	402315dc 	.word	0x402315dc
 8001370:	00000000 	.word	0x00000000
 8001374:	40cc4f80 	.word	0x40cc4f80
 8001378:	dcc63f14 	.word	0xdcc63f14
 800137c:	4022c4b5 	.word	0x4022c4b5
 8001380:	00000000 	.word	0x00000000
 8001384:	40cb9300 	.word	0x40cb9300
 8001388:	200000dc 	.word	0x200000dc
 800138c:	20000480 	.word	0x20000480
 8001390:	20000408 	.word	0x20000408
 8001394:	2000040c 	.word	0x2000040c
 8001398:	20000410 	.word	0x20000410
 800139c:	20000414 	.word	0x20000414
 80013a0:	20000418 	.word	0x20000418
 80013a4:	2000041c 	.word	0x2000041c
 80013a8:	20000420 	.word	0x20000420
 80013ac:	20000450 	.word	0x20000450
 80013b0:	20000438 	.word	0x20000438
 80013b4:	20000468 	.word	0x20000468
 80013b8:	200004a0 	.word	0x200004a0
 80013bc:	200004a4 	.word	0x200004a4
 80013c0:	08007840 	.word	0x08007840
 80013c4:	200004a8 	.word	0x200004a8
 80013c8:	200004da 	.word	0x200004da
 80013cc:	200001c0 	.word	0x200001c0
 80013d0:	20000000 	.word	0x20000000

080013d4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	; 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2230      	movs	r2, #48	; 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f004 ff28 	bl	8006238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <_Z18SystemClock_Configv+0xdc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a2b      	ldr	r2, [pc, #172]	; (80014b0 <_Z18SystemClock_Configv+0xdc>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <_Z18SystemClock_Configv+0xdc>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <_Z18SystemClock_Configv+0xe0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a25      	ldr	r2, [pc, #148]	; (80014b4 <_Z18SystemClock_Configv+0xe0>)
 800141e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <_Z18SystemClock_Configv+0xe0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001430:	2301      	movs	r3, #1
 8001432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143a:	2302      	movs	r3, #2
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001444:	2319      	movs	r3, #25
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001448:	23c0      	movs	r3, #192	; 0xc0
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001450:	2304      	movs	r3, #4
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4618      	mov	r0, r3
 800145a:	f002 fc47 	bl	8003cec <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800146e:	f000 fa97 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001472:	230f      	movs	r3, #15
 8001474:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001476:	2302      	movs	r3, #2
 8001478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001482:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2103      	movs	r1, #3
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fea4 	bl	80041dc <HAL_RCC_ClockConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	bf14      	ite	ne
 800149a:	2301      	movne	r3, #1
 800149c:	2300      	moveq	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80014a4:	f000 fa7c 	bl	80019a0 <Error_Handler>
  }
}
 80014a8:	bf00      	nop
 80014aa:	3750      	adds	r7, #80	; 0x50
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40007000 	.word	0x40007000

080014b8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014cc:	4a26      	ldr	r2, [pc, #152]	; (8001568 <_ZL12MX_ADC1_Initv+0xb0>)
 80014ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014d8:	4b22      	ldr	r3, [pc, #136]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <_ZL12MX_ADC1_Initv+0xb4>)
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 8001506:	2201      	movs	r2, #1
 8001508:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 8001514:	2201      	movs	r2, #1
 8001516:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001518:	4812      	ldr	r0, [pc, #72]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 800151a:	f000 fe83 	bl	8002224 <HAL_ADC_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf14      	ite	ne
 8001524:	2301      	movne	r3, #1
 8001526:	2300      	moveq	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 800152e:	f000 fa37 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001536:	2301      	movs	r3, #1
 8001538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	4619      	mov	r1, r3
 8001542:	4808      	ldr	r0, [pc, #32]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 8001544:	f000 feb2 	bl	80022ac <HAL_ADC_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	bf14      	ite	ne
 800154e:	2301      	movne	r3, #1
 8001550:	2300      	moveq	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8001558:	f000 fa22 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000094 	.word	0x20000094
 8001568:	40012000 	.word	0x40012000
 800156c:	0f000001 	.word	0x0f000001

08001570 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 8001576:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <_ZL12MX_I2C1_Initv+0x60>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 800157c:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <_ZL12MX_I2C1_Initv+0x64>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 800158e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001592:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 80015ae:	f001 fbed 	bl	8002d8c <HAL_I2C_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf14      	ite	ne
 80015b8:	2301      	movne	r3, #1
 80015ba:	2300      	moveq	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80015c2:	f000 f9ed 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200000dc 	.word	0x200000dc
 80015d0:	40005400 	.word	0x40005400
 80015d4:	000186a0 	.word	0x000186a0

080015d8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f4:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 80015f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015fc:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001608:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 800160a:	f04f 32ff 	mov.w	r2, #4294967295
 800160e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001610:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001616:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800161c:	4826      	ldr	r0, [pc, #152]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 800161e:	f003 f80c 	bl	800463a <HAL_TIM_IC_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf14      	ite	ne
 8001628:	2301      	movne	r3, #1
 800162a:	2300      	moveq	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001632:	f000 f9b5 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	481c      	ldr	r0, [pc, #112]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 8001646:	f003 fccf 	bl	8004fe8 <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf14      	ite	ne
 8001650:	2301      	movne	r3, #1
 8001652:	2300      	moveq	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 800165a:	f000 f9a1 	bl	80019a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001662:	2301      	movs	r3, #1
 8001664:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	4810      	ldr	r0, [pc, #64]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 8001676:	f003 f82f 	bl	80046d8 <HAL_TIM_IC_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <_ZL12MX_TIM2_Initv+0xb6>
  {
    Error_Handler();
 800168a:	f000 f989 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800168e:	463b      	mov	r3, r7
 8001690:	2204      	movs	r2, #4
 8001692:	4619      	mov	r1, r3
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 8001696:	f003 f81f 	bl	80046d8 <HAL_TIM_IC_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 80016aa:	f000 f979 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000130 	.word	0x20000130

080016bc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c2:	f107 0320 	add.w	r3, r7, #32
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80016e0:	4a41      	ldr	r2, [pc, #260]	; (80017e8 <_ZL12MX_TIM3_Initv+0x12c>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016f0:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80016f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fe:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001704:	4837      	ldr	r0, [pc, #220]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 8001706:	f002 ff49 	bl	800459c <HAL_TIM_PWM_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 800171a:	f000 f941 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001726:	f107 0320 	add.w	r3, r7, #32
 800172a:	4619      	mov	r1, r3
 800172c:	482d      	ldr	r0, [pc, #180]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 800172e:	f003 fc5b 	bl	8004fe8 <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf14      	ite	ne
 8001738:	2301      	movne	r3, #1
 800173a:	2300      	moveq	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8001742:	f000 f92d 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001746:	2360      	movs	r3, #96	; 0x60
 8001748:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	4619      	mov	r1, r3
 800175c:	4821      	ldr	r0, [pc, #132]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 800175e:	f003 f857 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8001772:	f000 f915 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2204      	movs	r2, #4
 800177a:	4619      	mov	r1, r3
 800177c:	4819      	ldr	r0, [pc, #100]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 800177e:	f003 f847 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf14      	ite	ne
 8001788:	2301      	movne	r3, #1
 800178a:	2300      	moveq	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8001792:	f000 f905 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2208      	movs	r2, #8
 800179a:	4619      	mov	r1, r3
 800179c:	4811      	ldr	r0, [pc, #68]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 800179e:	f003 f837 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 80017b2:	f000 f8f5 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	220c      	movs	r2, #12
 80017ba:	4619      	mov	r1, r3
 80017bc:	4809      	ldr	r0, [pc, #36]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80017be:	f003 f827 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf14      	ite	ne
 80017c8:	2301      	movne	r3, #1
 80017ca:	2300      	moveq	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 80017d2:	f000 f8e5 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017d6:	4803      	ldr	r0, [pc, #12]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80017d8:	f000 fac2 	bl	8001d60 <HAL_TIM_MspPostInit>

}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	; 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000178 	.word	0x20000178
 80017e8:	40000400 	.word	0x40000400

080017ec <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <_ZL19MX_USART6_UART_Initv+0x58>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001824:	f003 fc4e 	bl	80050c4 <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001838:	f000 f8b2 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200001c0 	.word	0x200001c0
 8001844:	40011400 	.word	0x40011400

08001848 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b4b      	ldr	r3, [pc, #300]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a4a      	ldr	r2, [pc, #296]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b48      	ldr	r3, [pc, #288]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b44      	ldr	r3, [pc, #272]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a43      	ldr	r2, [pc, #268]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 8001884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b41      	ldr	r3, [pc, #260]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a3c      	ldr	r2, [pc, #240]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a35      	ldr	r2, [pc, #212]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b33      	ldr	r3, [pc, #204]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOT1_PH_GPIO_Port, MOT1_PH_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2120      	movs	r1, #32
 80018d2:	4830      	ldr	r0, [pc, #192]	; (8001994 <_ZL12MX_GPIO_Initv+0x14c>)
 80018d4:	f001 fa40 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT2_PH_Pin|MOT3_PH_Pin|MOT4_PH_Pin|MOTORnSLEEP_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f243 4104 	movw	r1, #13316	; 0x3404
 80018de:	482e      	ldr	r0, [pc, #184]	; (8001998 <_ZL12MX_GPIO_Initv+0x150>)
 80018e0:	f001 fa3a 	bl	8002d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FAULT_n_Pin */
  GPIO_InitStruct.Pin = FAULT_n_Pin;
 80018e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_n_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4828      	ldr	r0, [pc, #160]	; (800199c <_ZL12MX_GPIO_Initv+0x154>)
 80018fa:	f001 f8a9 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOT1_PH_Pin */
  GPIO_InitStruct.Pin = MOT1_PH_Pin;
 80018fe:	2320      	movs	r3, #32
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOT1_PH_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	481f      	ldr	r0, [pc, #124]	; (8001994 <_ZL12MX_GPIO_Initv+0x14c>)
 8001916:	f001 f89b 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT2_PH_Pin MOT3_PH_Pin MOT4_PH_Pin MOTORnSLEEP_Pin */
  GPIO_InitStruct.Pin = MOT2_PH_Pin|MOT3_PH_Pin|MOT4_PH_Pin|MOTORnSLEEP_Pin;
 800191a:	f243 4304 	movw	r3, #13316	; 0x3404
 800191e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	2301      	movs	r3, #1
 8001922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	4819      	ldr	r0, [pc, #100]	; (8001998 <_ZL12MX_GPIO_Initv+0x150>)
 8001934:	f001 f88c 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS4_Pin LS3_Pin */
  GPIO_InitStruct.Pin = LS4_Pin|LS3_Pin;
 8001938:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800193c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4812      	ldr	r0, [pc, #72]	; (8001998 <_ZL12MX_GPIO_Initv+0x150>)
 800194e:	f001 f87f 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS1_Pin */
  GPIO_InitStruct.Pin = LS1_Pin;
 8001952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS1_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	480b      	ldr	r0, [pc, #44]	; (8001994 <_ZL12MX_GPIO_Initv+0x14c>)
 8001968:	f001 f872 	bl	8002a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS2_Pin */
  GPIO_InitStruct.Pin = LS2_Pin;
 800196c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001972:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS2_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4804      	ldr	r0, [pc, #16]	; (8001994 <_ZL12MX_GPIO_Initv+0x14c>)
 8001984:	f001 f864 	bl	8002a50 <HAL_GPIO_Init>

}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	; 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020400 	.word	0x40020400
 800199c:	40020800 	.word	0x40020800

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af06      	add	r7, sp, #24
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d16a      	bne.n	8001a92 <_Z41__static_initialization_and_destruction_0ii+0xe6>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d165      	bne.n	8001a92 <_Z41__static_initialization_and_destruction_0ii+0xe6>
extern stream_t ser_port = stream(&huart6); 	// Set up ser_port for printing
 80019c6:	4935      	ldr	r1, [pc, #212]	; (8001a9c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80019c8:	4835      	ldr	r0, [pc, #212]	; (8001aa0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80019ca:	f000 faa7 	bl	8001f1c <_ZN6streamC1EP20__UART_HandleTypeDef>
motor		motor1 = motor(&htim3,
 80019ce:	2300      	movs	r3, #0
 80019d0:	9303      	str	r3, [sp, #12]
 80019d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	2320      	movs	r3, #32
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	4931      	ldr	r1, [pc, #196]	; (8001aac <_Z41__static_initialization_and_destruction_0ii+0x100>)
 80019e6:	4832      	ldr	r0, [pc, #200]	; (8001ab0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 80019e8:	f7ff f9c2 	bl	8000d70 <_ZN5motorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_ts>
motor   	motor2 = motor(&htim3,
 80019ec:	2300      	movs	r3, #0
 80019ee:	9303      	str	r3, [sp, #12]
 80019f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f4:	9302      	str	r3, [sp, #8]
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80019f8:	9301      	str	r3, [sp, #4]
 80019fa:	2304      	movs	r3, #4
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8001a00:	2204      	movs	r2, #4
 8001a02:	492a      	ldr	r1, [pc, #168]	; (8001aac <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8001a04:	482b      	ldr	r0, [pc, #172]	; (8001ab4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8001a06:	f7ff f9b3 	bl	8000d70 <_ZN5motorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_ts>
motor 		motor3 = motor(&htim3,
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9303      	str	r3, [sp, #12]
 8001a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8001a20:	2208      	movs	r2, #8
 8001a22:	4922      	ldr	r1, [pc, #136]	; (8001aac <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8001a24:	4824      	ldr	r0, [pc, #144]	; (8001ab8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8001a26:	f7ff f9a3 	bl	8000d70 <_ZN5motorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_ts>
motor 		motor4 = motor(&htim3,
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	9303      	str	r3, [sp, #12]
 8001a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8001a40:	220c      	movs	r2, #12
 8001a42:	491a      	ldr	r1, [pc, #104]	; (8001aac <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8001a44:	481d      	ldr	r0, [pc, #116]	; (8001abc <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001a46:	f7ff f993 	bl	8000d70 <_ZN5motorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_ts>
FlySky 		receiver = FlySky(&htim2,TIM_CHANNEL_1,TIM_CHANNEL_2,0,0,0,0,0,0);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9305      	str	r3, [sp, #20]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	9304      	str	r3, [sp, #16]
 8001a52:	2300      	movs	r3, #0
 8001a54:	9303      	str	r3, [sp, #12]
 8001a56:	2300      	movs	r3, #0
 8001a58:	9302      	str	r3, [sp, #8]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	2304      	movs	r3, #4
 8001a64:	2200      	movs	r2, #0
 8001a66:	4916      	ldr	r1, [pc, #88]	; (8001ac0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8001a68:	4816      	ldr	r0, [pc, #88]	; (8001ac4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8001a6a:	f7ff fa07 	bl	8000e7c <_ZN6FlySkyC1EP17TIM_HandleTypeDefmmhhtttt>
uint32_t start_time = HAL_GetTick();
 8001a6e:	f000 fba9 	bl	80021c4 <HAL_GetTick>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8001a76:	6013      	str	r3, [r2, #0]
uint32_t current_time = HAL_GetTick();
 8001a78:	f000 fba4 	bl	80021c4 <HAL_GetTick>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4a13      	ldr	r2, [pc, #76]	; (8001acc <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8001a80:	6013      	str	r3, [r2, #0]
uint32_t next_time = current_time + period;
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8001a90:	6013      	str	r3, [r2, #0]
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200001c0 	.word	0x200001c0
 8001aa0:	20000204 	.word	0x20000204
 8001aa4:	40020400 	.word	0x40020400
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	20000178 	.word	0x20000178
 8001ab0:	20000420 	.word	0x20000420
 8001ab4:	20000438 	.word	0x20000438
 8001ab8:	20000450 	.word	0x20000450
 8001abc:	20000468 	.word	0x20000468
 8001ac0:	20000130 	.word	0x20000130
 8001ac4:	20000480 	.word	0x20000480
 8001ac8:	2000049c 	.word	0x2000049c
 8001acc:	200004a0 	.word	0x200004a0
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	200004a4 	.word	0x200004a4

08001ad8 <_GLOBAL__sub_I__bno055_i2c_port>:
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f7ff ff63 	bl	80019ac <_Z41__static_initialization_and_destruction_0ii>
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <HAL_MspInit+0x4c>)
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <HAL_MspInit+0x4c>)
 8001af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001afc:	6453      	str	r3, [r2, #68]	; 0x44
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_MspInit+0x4c>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a17      	ldr	r2, [pc, #92]	; (8001bb4 <HAL_ADC_MspInit+0x7c>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d127      	bne.n	8001baa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_ADC_MspInit+0x80>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <HAL_ADC_MspInit+0x80>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_ADC_MspInit+0x80>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_ADC_MspInit+0x80>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_ADC_MspInit+0x80>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_ADC_MspInit+0x80>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC1_I1_Pin|ADC1_I2_Pin|ADC1_I3_Pin|ADC1_I4_Pin
 8001b92:	231f      	movs	r3, #31
 8001b94:	617b      	str	r3, [r7, #20]
                          |ADC1_QBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b96:	2303      	movs	r3, #3
 8001b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4805      	ldr	r0, [pc, #20]	; (8001bbc <HAL_ADC_MspInit+0x84>)
 8001ba6:	f000 ff53 	bl	8002a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	; 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40012000 	.word	0x40012000
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020000 	.word	0x40020000

08001bc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <HAL_I2C_MspInit+0x84>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d12b      	bne.n	8001c3a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_I2C_MspInit+0x88>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_I2C_MspInit+0x88>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_I2C_MspInit+0x88>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	613b      	str	r3, [r7, #16]
 8001bfc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bfe:	23c0      	movs	r3, #192	; 0xc0
 8001c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c02:	2312      	movs	r3, #18
 8001c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c0e:	2304      	movs	r3, #4
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <HAL_I2C_MspInit+0x8c>)
 8001c1a:	f000 ff19 	bl	8002a50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_I2C_MspInit+0x88>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_I2C_MspInit+0x88>)
 8001c28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_I2C_MspInit+0x88>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c3a:	bf00      	nop
 8001c3c:	3728      	adds	r7, #40	; 0x28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40005400 	.word	0x40005400
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020400 	.word	0x40020400

08001c50 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c70:	d14a      	bne.n	8001d08 <HAL_TIM_IC_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <HAL_TIM_IC_MspInit+0xc0>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a25      	ldr	r2, [pc, #148]	; (8001d10 <HAL_TIM_IC_MspInit+0xc0>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_TIM_IC_MspInit+0xc0>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <HAL_TIM_IC_MspInit+0xc0>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a1e      	ldr	r2, [pc, #120]	; (8001d10 <HAL_TIM_IC_MspInit+0xc0>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <HAL_TIM_IC_MspInit+0xc0>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <HAL_TIM_IC_MspInit+0xc0>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a17      	ldr	r2, [pc, #92]	; (8001d10 <HAL_TIM_IC_MspInit+0xc0>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <HAL_TIM_IC_MspInit+0xc0>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = STR_Pin;
 8001cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STR_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480c      	ldr	r0, [pc, #48]	; (8001d14 <HAL_TIM_IC_MspInit+0xc4>)
 8001ce4:	f000 feb4 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THR_Pin;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(THR_GPIO_Port, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	4805      	ldr	r0, [pc, #20]	; (8001d18 <HAL_TIM_IC_MspInit+0xc8>)
 8001d04:	f000 fea4 	bl	8002a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d08:	bf00      	nop
 8001d0a:	3728      	adds	r7, #40	; 0x28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020400 	.word	0x40020400

08001d1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d10d      	bne.n	8001d4a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_TIM_PWM_MspInit+0x40>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_TIM_PWM_MspInit+0x40>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <HAL_TIM_PWM_MspInit+0x40>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	40023800 	.word	0x40023800

08001d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <HAL_TIM_MspPostInit+0xa4>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d13b      	bne.n	8001dfa <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b20      	ldr	r3, [pc, #128]	; (8001e08 <HAL_TIM_MspPostInit+0xa8>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <HAL_TIM_MspPostInit+0xa8>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_TIM_MspPostInit+0xa8>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <HAL_TIM_MspPostInit+0xa8>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <HAL_TIM_MspPostInit+0xa8>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_TIM_MspPostInit+0xa8>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = MOT1_EN_Pin|MOT2_EN_Pin;
 8001dba:	23c0      	movs	r3, #192	; 0xc0
 8001dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480d      	ldr	r0, [pc, #52]	; (8001e0c <HAL_TIM_MspPostInit+0xac>)
 8001dd6:	f000 fe3b 	bl	8002a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOT3_EN_Pin|MOT4_EN_Pin;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dea:	2302      	movs	r3, #2
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	4619      	mov	r1, r3
 8001df4:	4806      	ldr	r0, [pc, #24]	; (8001e10 <HAL_TIM_MspPostInit+0xb0>)
 8001df6:	f000 fe2b 	bl	8002a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3728      	adds	r7, #40	; 0x28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020400 	.word	0x40020400

08001e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1d      	ldr	r2, [pc, #116]	; (8001ea8 <HAL_UART_MspInit+0x94>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d134      	bne.n	8001ea0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <HAL_UART_MspInit+0x98>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a1b      	ldr	r2, [pc, #108]	; (8001eac <HAL_UART_MspInit+0x98>)
 8001e40:	f043 0320 	orr.w	r3, r3, #32
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_UART_MspInit+0x98>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f003 0320 	and.w	r3, r3, #32
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_UART_MspInit+0x98>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a14      	ldr	r2, [pc, #80]	; (8001eac <HAL_UART_MspInit+0x98>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_UART_MspInit+0x98>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e80:	2308      	movs	r3, #8
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4809      	ldr	r0, [pc, #36]	; (8001eb0 <HAL_UART_MspInit+0x9c>)
 8001e8c:	f000 fde0 	bl	8002a50 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	2100      	movs	r1, #0
 8001e94:	2047      	movs	r0, #71	; 0x47
 8001e96:	f000 fd12 	bl	80028be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e9a:	2047      	movs	r0, #71	; 0x47
 8001e9c:	f000 fd2b 	bl	80028f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40011400 	.word	0x40011400
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020000 	.word	0x40020000

08001eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <NMI_Handler+0x4>

08001eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ebe:	e7fe      	b.n	8001ebe <HardFault_Handler+0x4>

08001ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <MemManage_Handler+0x4>

08001ec6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eca:	e7fe      	b.n	8001eca <BusFault_Handler+0x4>

08001ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <UsageFault_Handler+0x4>

08001ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f00:	f000 f94c 	bl	800219c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <USART6_IRQHandler+0x10>)
 8001f0e:	f003 f9e9 	bl	80052e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200001c0 	.word	0x200001c0

08001f1c <_ZN6streamC1EP20__UART_HandleTypeDef>:
 *      Author: crefvem
 */

#include "stream.h"

stream::stream(UART_HandleTypeDef*  uart)
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
       :uart(uart)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	601a      	str	r2, [r3, #0]
{

}
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e00a      	b.n	8001f62 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f4c:	f3af 8000 	nop.w
 8001f50:	4601      	mov	r1, r0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	60ba      	str	r2, [r7, #8]
 8001f58:	b2ca      	uxtb	r2, r1
 8001f5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	dbf0      	blt.n	8001f4c <_read+0x12>
	}

return len;
 8001f6a:	687b      	ldr	r3, [r7, #4]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	e009      	b.n	8001f9a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	60ba      	str	r2, [r7, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	3301      	adds	r3, #1
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	dbf1      	blt.n	8001f86 <_write+0x12>
	}
	return len;
 8001fa2:	687b      	ldr	r3, [r7, #4]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_close>:

int _close(int file)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	return -1;
 8001fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd4:	605a      	str	r2, [r3, #4]
	return 0;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_isatty>:

int _isatty(int file)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	return 1;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b085      	sub	sp, #20
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
	return 0;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800201c:	4a14      	ldr	r2, [pc, #80]	; (8002070 <_sbrk+0x5c>)
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <_sbrk+0x60>)
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <_sbrk+0x64>)
 8002032:	4a12      	ldr	r2, [pc, #72]	; (800207c <_sbrk+0x68>)
 8002034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d207      	bcs.n	8002054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002044:	f004 f8c0 	bl	80061c8 <__errno>
 8002048:	4603      	mov	r3, r0
 800204a:	220c      	movs	r2, #12
 800204c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204e:	f04f 33ff 	mov.w	r3, #4294967295
 8002052:	e009      	b.n	8002068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <_sbrk+0x64>)
 8002064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20020000 	.word	0x20020000
 8002074:	00000400 	.word	0x00000400
 8002078:	200004dc 	.word	0x200004dc
 800207c:	200004f8 	.word	0x200004f8

08002080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <SystemInit+0x20>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <SystemInit+0x20>)
 800208c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020aa:	490e      	ldr	r1, [pc, #56]	; (80020e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b0:	e002      	b.n	80020b8 <LoopCopyDataInit>

080020b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b6:	3304      	adds	r3, #4

080020b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020bc:	d3f9      	bcc.n	80020b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020be:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020c0:	4c0b      	ldr	r4, [pc, #44]	; (80020f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c4:	e001      	b.n	80020ca <LoopFillZerobss>

080020c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c8:	3204      	adds	r2, #4

080020ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020cc:	d3fb      	bcc.n	80020c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020ce:	f7ff ffd7 	bl	8002080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020d2:	f004 f87f 	bl	80061d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020d6:	f7ff f873 	bl	80011c0 <main>
  bx  lr    
 80020da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80020e8:	08007934 	.word	0x08007934
  ldr r2, =_sbss
 80020ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80020f0:	200004f4 	.word	0x200004f4

080020f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f4:	e7fe      	b.n	80020f4 <ADC_IRQHandler>
	...

080020f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <HAL_Init+0x40>)
 8002102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_Init+0x40>)
 800210e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a07      	ldr	r2, [pc, #28]	; (8002138 <HAL_Init+0x40>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002120:	2003      	movs	r0, #3
 8002122:	f000 fbc1 	bl	80028a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002126:	200f      	movs	r0, #15
 8002128:	f000 f808 	bl	800213c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800212c:	f7ff fcdc 	bl	8001ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40023c00 	.word	0x40023c00

0800213c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_InitTick+0x54>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_InitTick+0x58>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4619      	mov	r1, r3
 800214e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002152:	fbb3 f3f1 	udiv	r3, r3, r1
 8002156:	fbb2 f3f3 	udiv	r3, r2, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f000 fbd9 	bl	8002912 <HAL_SYSTICK_Config>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e00e      	b.n	8002188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2b0f      	cmp	r3, #15
 800216e:	d80a      	bhi.n	8002186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002170:	2200      	movs	r2, #0
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	f000 fba1 	bl	80028be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800217c:	4a06      	ldr	r2, [pc, #24]	; (8002198 <HAL_InitTick+0x5c>)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e000      	b.n	8002188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
}
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	20000004 	.word	0x20000004
 8002194:	2000000c 	.word	0x2000000c
 8002198:	20000008 	.word	0x20000008

0800219c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_IncTick+0x20>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_IncTick+0x24>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <HAL_IncTick+0x24>)
 80021ae:	6013      	str	r3, [r2, #0]
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	2000000c 	.word	0x2000000c
 80021c0:	200004e0 	.word	0x200004e0

080021c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return uwTick;
 80021c8:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <HAL_GetTick+0x14>)
 80021ca:	681b      	ldr	r3, [r3, #0]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	200004e0 	.word	0x200004e0

080021dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e4:	f7ff ffee 	bl	80021c4 <HAL_GetTick>
 80021e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f4:	d005      	beq.n	8002202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_Delay+0x44>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4413      	add	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002202:	bf00      	nop
 8002204:	f7ff ffde 	bl	80021c4 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	429a      	cmp	r2, r3
 8002212:	d8f7      	bhi.n	8002204 <HAL_Delay+0x28>
  {
  }
}
 8002214:	bf00      	nop
 8002216:	bf00      	nop
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	2000000c 	.word	0x2000000c

08002224 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e033      	b.n	80022a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fc78 	bl	8001b38 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d118      	bne.n	8002294 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800226a:	f023 0302 	bic.w	r3, r3, #2
 800226e:	f043 0202 	orr.w	r2, r3, #2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f94a 	bl	8002510 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f023 0303 	bic.w	r3, r3, #3
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	641a      	str	r2, [r3, #64]	; 0x40
 8002292:	e001      	b.n	8002298 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x1c>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e113      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x244>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b09      	cmp	r3, #9
 80022d6:	d925      	bls.n	8002324 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68d9      	ldr	r1, [r3, #12]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	3b1e      	subs	r3, #30
 80022ee:	2207      	movs	r2, #7
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43da      	mvns	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	400a      	ands	r2, r1
 80022fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68d9      	ldr	r1, [r3, #12]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	4618      	mov	r0, r3
 8002310:	4603      	mov	r3, r0
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4403      	add	r3, r0
 8002316:	3b1e      	subs	r3, #30
 8002318:	409a      	lsls	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	e022      	b.n	800236a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6919      	ldr	r1, [r3, #16]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	4613      	mov	r3, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4413      	add	r3, r2
 8002338:	2207      	movs	r2, #7
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	400a      	ands	r2, r1
 8002346:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6919      	ldr	r1, [r3, #16]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	4603      	mov	r3, r0
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4403      	add	r3, r0
 8002360:	409a      	lsls	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b06      	cmp	r3, #6
 8002370:	d824      	bhi.n	80023bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	3b05      	subs	r3, #5
 8002384:	221f      	movs	r2, #31
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	43da      	mvns	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	400a      	ands	r2, r1
 8002392:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4618      	mov	r0, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	3b05      	subs	r3, #5
 80023ae:	fa00 f203 	lsl.w	r2, r0, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ba:	e04c      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b0c      	cmp	r3, #12
 80023c2:	d824      	bhi.n	800240e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	3b23      	subs	r3, #35	; 0x23
 80023d6:	221f      	movs	r2, #31
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43da      	mvns	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	400a      	ands	r2, r1
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	3b23      	subs	r3, #35	; 0x23
 8002400:	fa00 f203 	lsl.w	r2, r0, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	631a      	str	r2, [r3, #48]	; 0x30
 800240c:	e023      	b.n	8002456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	3b41      	subs	r3, #65	; 0x41
 8002420:	221f      	movs	r2, #31
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	400a      	ands	r2, r1
 800242e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	4618      	mov	r0, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	3b41      	subs	r3, #65	; 0x41
 800244a:	fa00 f203 	lsl.w	r2, r0, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002456:	4b29      	ldr	r3, [pc, #164]	; (80024fc <HAL_ADC_ConfigChannel+0x250>)
 8002458:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a28      	ldr	r2, [pc, #160]	; (8002500 <HAL_ADC_ConfigChannel+0x254>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d10f      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1d8>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2b12      	cmp	r3, #18
 800246a:	d10b      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1d      	ldr	r2, [pc, #116]	; (8002500 <HAL_ADC_ConfigChannel+0x254>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d12b      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x23a>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <HAL_ADC_ConfigChannel+0x258>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d003      	beq.n	80024a0 <HAL_ADC_ConfigChannel+0x1f4>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b11      	cmp	r3, #17
 800249e:	d122      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a11      	ldr	r2, [pc, #68]	; (8002504 <HAL_ADC_ConfigChannel+0x258>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d111      	bne.n	80024e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_ADC_ConfigChannel+0x25c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a11      	ldr	r2, [pc, #68]	; (800250c <HAL_ADC_ConfigChannel+0x260>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	0c9a      	lsrs	r2, r3, #18
 80024ce:	4613      	mov	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024d8:	e002      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	3b01      	subs	r3, #1
 80024de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f9      	bne.n	80024da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40012300 	.word	0x40012300
 8002500:	40012000 	.word	0x40012000
 8002504:	10000012 	.word	0x10000012
 8002508:	20000004 	.word	0x20000004
 800250c:	431bde83 	.word	0x431bde83

08002510 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002518:	4b79      	ldr	r3, [pc, #484]	; (8002700 <ADC_Init+0x1f0>)
 800251a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	431a      	orrs	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	021a      	lsls	r2, r3, #8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800258a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6899      	ldr	r1, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a2:	4a58      	ldr	r2, [pc, #352]	; (8002704 <ADC_Init+0x1f4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d022      	beq.n	80025ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6899      	ldr	r1, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6899      	ldr	r1, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	e00f      	b.n	800260e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800260c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0202 	bic.w	r2, r2, #2
 800261c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6899      	ldr	r1, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7e1b      	ldrb	r3, [r3, #24]
 8002628:	005a      	lsls	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01b      	beq.n	8002674 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800264a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800265a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	3b01      	subs	r3, #1
 8002668:	035a      	lsls	r2, r3, #13
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	e007      	b.n	8002684 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002682:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69db      	ldr	r3, [r3, #28]
 800269e:	3b01      	subs	r3, #1
 80026a0:	051a      	lsls	r2, r3, #20
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6899      	ldr	r1, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026c6:	025a      	lsls	r2, r3, #9
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	430a      	orrs	r2, r1
 80026ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6899      	ldr	r1, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	029a      	lsls	r2, r3, #10
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	609a      	str	r2, [r3, #8]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40012300 	.word	0x40012300
 8002704:	0f000001 	.word	0x0f000001

08002708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002724:	4013      	ands	r3, r2
 8002726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002730:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273a:	4a04      	ldr	r2, [pc, #16]	; (800274c <__NVIC_SetPriorityGrouping+0x44>)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	60d3      	str	r3, [r2, #12]
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <__NVIC_GetPriorityGrouping+0x18>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	f003 0307 	and.w	r3, r3, #7
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db0b      	blt.n	8002796 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	f003 021f 	and.w	r2, r3, #31
 8002784:	4907      	ldr	r1, [pc, #28]	; (80027a4 <__NVIC_EnableIRQ+0x38>)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2001      	movs	r0, #1
 800278e:	fa00 f202 	lsl.w	r2, r0, r2
 8002792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000e100 	.word	0xe000e100

080027a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	6039      	str	r1, [r7, #0]
 80027b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	db0a      	blt.n	80027d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	490c      	ldr	r1, [pc, #48]	; (80027f4 <__NVIC_SetPriority+0x4c>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	0112      	lsls	r2, r2, #4
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	440b      	add	r3, r1
 80027cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d0:	e00a      	b.n	80027e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	4908      	ldr	r1, [pc, #32]	; (80027f8 <__NVIC_SetPriority+0x50>)
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	f003 030f 	and.w	r3, r3, #15
 80027de:	3b04      	subs	r3, #4
 80027e0:	0112      	lsls	r2, r2, #4
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	440b      	add	r3, r1
 80027e6:	761a      	strb	r2, [r3, #24]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	e000e100 	.word	0xe000e100
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	; 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f1c3 0307 	rsb	r3, r3, #7
 8002816:	2b04      	cmp	r3, #4
 8002818:	bf28      	it	cs
 800281a:	2304      	movcs	r3, #4
 800281c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3304      	adds	r3, #4
 8002822:	2b06      	cmp	r3, #6
 8002824:	d902      	bls.n	800282c <NVIC_EncodePriority+0x30>
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3b03      	subs	r3, #3
 800282a:	e000      	b.n	800282e <NVIC_EncodePriority+0x32>
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	f04f 32ff 	mov.w	r2, #4294967295
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	401a      	ands	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002844:	f04f 31ff 	mov.w	r1, #4294967295
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	fa01 f303 	lsl.w	r3, r1, r3
 800284e:	43d9      	mvns	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002854:	4313      	orrs	r3, r2
         );
}
 8002856:	4618      	mov	r0, r3
 8002858:	3724      	adds	r7, #36	; 0x24
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
	...

08002864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002874:	d301      	bcc.n	800287a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002876:	2301      	movs	r3, #1
 8002878:	e00f      	b.n	800289a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800287a:	4a0a      	ldr	r2, [pc, #40]	; (80028a4 <SysTick_Config+0x40>)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002882:	210f      	movs	r1, #15
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
 8002888:	f7ff ff8e 	bl	80027a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <SysTick_Config+0x40>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <SysTick_Config+0x40>)
 8002894:	2207      	movs	r2, #7
 8002896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f7ff ff29 	bl	8002708 <__NVIC_SetPriorityGrouping>
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d0:	f7ff ff3e 	bl	8002750 <__NVIC_GetPriorityGrouping>
 80028d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	6978      	ldr	r0, [r7, #20]
 80028dc:	f7ff ff8e 	bl	80027fc <NVIC_EncodePriority>
 80028e0:	4602      	mov	r2, r0
 80028e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7ff ff5d 	bl	80027a8 <__NVIC_SetPriority>
}
 80028ee:	bf00      	nop
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b082      	sub	sp, #8
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff31 	bl	800276c <__NVIC_EnableIRQ>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ffa2 	bl	8002864 <SysTick_Config>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002938:	f7ff fc44 	bl	80021c4 <HAL_GetTick>
 800293c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d008      	beq.n	800295c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2280      	movs	r2, #128	; 0x80
 800294e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e052      	b.n	8002a02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0216 	bic.w	r2, r2, #22
 800296a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800297a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d103      	bne.n	800298c <HAL_DMA_Abort+0x62>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0208 	bic.w	r2, r2, #8
 800299a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0201 	bic.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ac:	e013      	b.n	80029d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ae:	f7ff fc09 	bl	80021c4 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b05      	cmp	r3, #5
 80029ba:	d90c      	bls.n	80029d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2203      	movs	r2, #3
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e015      	b.n	8002a02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e4      	bne.n	80029ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	223f      	movs	r2, #63	; 0x3f
 80029ea:	409a      	lsls	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d004      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e00c      	b.n	8002a42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2205      	movs	r2, #5
 8002a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	; 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
 8002a6a:	e159      	b.n	8002d20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	f040 8148 	bne.w	8002d1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d005      	beq.n	8002aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d130      	bne.n	8002b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	2203      	movs	r2, #3
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	091b      	lsrs	r3, r3, #4
 8002aee:	f003 0201 	and.w	r2, r3, #1
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d017      	beq.n	8002b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	2203      	movs	r2, #3
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d123      	bne.n	8002b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	08da      	lsrs	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3208      	adds	r2, #8
 8002b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	220f      	movs	r2, #15
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	08da      	lsrs	r2, r3, #3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3208      	adds	r2, #8
 8002b8e:	69b9      	ldr	r1, [r7, #24]
 8002b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	43db      	mvns	r3, r3
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0203 	and.w	r2, r3, #3
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 80a2 	beq.w	8002d1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	4b57      	ldr	r3, [pc, #348]	; (8002d38 <HAL_GPIO_Init+0x2e8>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	4a56      	ldr	r2, [pc, #344]	; (8002d38 <HAL_GPIO_Init+0x2e8>)
 8002be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be4:	6453      	str	r3, [r2, #68]	; 0x44
 8002be6:	4b54      	ldr	r3, [pc, #336]	; (8002d38 <HAL_GPIO_Init+0x2e8>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bf2:	4a52      	ldr	r2, [pc, #328]	; (8002d3c <HAL_GPIO_Init+0x2ec>)
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	220f      	movs	r2, #15
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4013      	ands	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a49      	ldr	r2, [pc, #292]	; (8002d40 <HAL_GPIO_Init+0x2f0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d019      	beq.n	8002c52 <HAL_GPIO_Init+0x202>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a48      	ldr	r2, [pc, #288]	; (8002d44 <HAL_GPIO_Init+0x2f4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d013      	beq.n	8002c4e <HAL_GPIO_Init+0x1fe>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a47      	ldr	r2, [pc, #284]	; (8002d48 <HAL_GPIO_Init+0x2f8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00d      	beq.n	8002c4a <HAL_GPIO_Init+0x1fa>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a46      	ldr	r2, [pc, #280]	; (8002d4c <HAL_GPIO_Init+0x2fc>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d007      	beq.n	8002c46 <HAL_GPIO_Init+0x1f6>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a45      	ldr	r2, [pc, #276]	; (8002d50 <HAL_GPIO_Init+0x300>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_GPIO_Init+0x1f2>
 8002c3e:	2304      	movs	r3, #4
 8002c40:	e008      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c42:	2307      	movs	r3, #7
 8002c44:	e006      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c46:	2303      	movs	r3, #3
 8002c48:	e004      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e002      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_GPIO_Init+0x204>
 8002c52:	2300      	movs	r3, #0
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	f002 0203 	and.w	r2, r2, #3
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	4093      	lsls	r3, r2
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c64:	4935      	ldr	r1, [pc, #212]	; (8002d3c <HAL_GPIO_Init+0x2ec>)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c72:	4b38      	ldr	r3, [pc, #224]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c96:	4a2f      	ldr	r2, [pc, #188]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc0:	4a24      	ldr	r2, [pc, #144]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cc6:	4b23      	ldr	r3, [pc, #140]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cea:	4a1a      	ldr	r2, [pc, #104]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d14:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <HAL_GPIO_Init+0x304>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2b0f      	cmp	r3, #15
 8002d24:	f67f aea2 	bls.w	8002a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	3724      	adds	r7, #36	; 0x24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40013800 	.word	0x40013800
 8002d40:	40020000 	.word	0x40020000
 8002d44:	40020400 	.word	0x40020400
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	40020c00 	.word	0x40020c00
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40013c00 	.word	0x40013c00

08002d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	807b      	strh	r3, [r7, #2]
 8002d64:	4613      	mov	r3, r2
 8002d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d68:	787b      	ldrb	r3, [r7, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d74:	e003      	b.n	8002d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e12b      	b.n	8002ff6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d106      	bne.n	8002db8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe ff04 	bl	8001bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2224      	movs	r2, #36	; 0x24
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0201 	bic.w	r2, r2, #1
 8002dce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df0:	f001 fbac 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 8002df4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	4a81      	ldr	r2, [pc, #516]	; (8003000 <HAL_I2C_Init+0x274>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d807      	bhi.n	8002e10 <HAL_I2C_Init+0x84>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a80      	ldr	r2, [pc, #512]	; (8003004 <HAL_I2C_Init+0x278>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	bf94      	ite	ls
 8002e08:	2301      	movls	r3, #1
 8002e0a:	2300      	movhi	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	e006      	b.n	8002e1e <HAL_I2C_Init+0x92>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4a7d      	ldr	r2, [pc, #500]	; (8003008 <HAL_I2C_Init+0x27c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	bf94      	ite	ls
 8002e18:	2301      	movls	r3, #1
 8002e1a:	2300      	movhi	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e0e7      	b.n	8002ff6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	4a78      	ldr	r2, [pc, #480]	; (800300c <HAL_I2C_Init+0x280>)
 8002e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2e:	0c9b      	lsrs	r3, r3, #18
 8002e30:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a6a      	ldr	r2, [pc, #424]	; (8003000 <HAL_I2C_Init+0x274>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d802      	bhi.n	8002e60 <HAL_I2C_Init+0xd4>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	e009      	b.n	8002e74 <HAL_I2C_Init+0xe8>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	4a69      	ldr	r2, [pc, #420]	; (8003010 <HAL_I2C_Init+0x284>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	3301      	adds	r3, #1
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e86:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	495c      	ldr	r1, [pc, #368]	; (8003000 <HAL_I2C_Init+0x274>)
 8002e90:	428b      	cmp	r3, r1
 8002e92:	d819      	bhi.n	8002ec8 <HAL_I2C_Init+0x13c>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1e59      	subs	r1, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea2:	1c59      	adds	r1, r3, #1
 8002ea4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_I2C_Init+0x138>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1e59      	subs	r1, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec2:	e051      	b.n	8002f68 <HAL_I2C_Init+0x1dc>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	e04f      	b.n	8002f68 <HAL_I2C_Init+0x1dc>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d111      	bne.n	8002ef4 <HAL_I2C_Init+0x168>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1e58      	subs	r0, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	440b      	add	r3, r1
 8002ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e012      	b.n	8002f1a <HAL_I2C_Init+0x18e>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1e58      	subs	r0, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6859      	ldr	r1, [r3, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	0099      	lsls	r1, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Init+0x196>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e022      	b.n	8002f68 <HAL_I2C_Init+0x1dc>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10e      	bne.n	8002f48 <HAL_I2C_Init+0x1bc>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	1e58      	subs	r0, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6859      	ldr	r1, [r3, #4]
 8002f32:	460b      	mov	r3, r1
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	440b      	add	r3, r1
 8002f38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f46:	e00f      	b.n	8002f68 <HAL_I2C_Init+0x1dc>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e58      	subs	r0, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6859      	ldr	r1, [r3, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	0099      	lsls	r1, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	6809      	ldr	r1, [r1, #0]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69da      	ldr	r2, [r3, #28]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	6911      	ldr	r1, [r2, #16]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68d2      	ldr	r2, [r2, #12]
 8002fa2:	4311      	orrs	r1, r2
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	430b      	orrs	r3, r1
 8002faa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	000186a0 	.word	0x000186a0
 8003004:	001e847f 	.word	0x001e847f
 8003008:	003d08ff 	.word	0x003d08ff
 800300c:	431bde83 	.word	0x431bde83
 8003010:	10624dd3 	.word	0x10624dd3

08003014 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	461a      	mov	r2, r3
 8003020:	460b      	mov	r3, r1
 8003022:	817b      	strh	r3, [r7, #10]
 8003024:	4613      	mov	r3, r2
 8003026:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003028:	f7ff f8cc 	bl	80021c4 <HAL_GetTick>
 800302c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	f040 80e0 	bne.w	80031fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2319      	movs	r3, #25
 8003042:	2201      	movs	r2, #1
 8003044:	4970      	ldr	r1, [pc, #448]	; (8003208 <HAL_I2C_Master_Transmit+0x1f4>)
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fc72 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	e0d3      	b.n	80031fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_I2C_Master_Transmit+0x50>
 8003060:	2302      	movs	r3, #2
 8003062:	e0cc      	b.n	80031fe <HAL_I2C_Master_Transmit+0x1ea>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d007      	beq.n	800308a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003098:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2221      	movs	r2, #33	; 0x21
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2210      	movs	r2, #16
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	893a      	ldrh	r2, [r7, #8]
 80030ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a50      	ldr	r2, [pc, #320]	; (800320c <HAL_I2C_Master_Transmit+0x1f8>)
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030cc:	8979      	ldrh	r1, [r7, #10]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	6a3a      	ldr	r2, [r7, #32]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fadc 	bl	8003690 <I2C_MasterRequestWrite>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e08d      	b.n	80031fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030f8:	e066      	b.n	80031c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	6a39      	ldr	r1, [r7, #32]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fcec 	bl	8003adc <I2C_WaitOnTXEFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00d      	beq.n	8003126 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	2b04      	cmp	r3, #4
 8003110:	d107      	bne.n	8003122 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003120:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e06b      	b.n	80031fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	781a      	ldrb	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b04      	cmp	r3, #4
 8003162:	d11b      	bne.n	800319c <HAL_I2C_Master_Transmit+0x188>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	d017      	beq.n	800319c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	781a      	ldrb	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003194:	3b01      	subs	r3, #1
 8003196:	b29a      	uxth	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	6a39      	ldr	r1, [r7, #32]
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f000 fcdc 	bl	8003b5e <I2C_WaitOnBTFFlagUntilTimeout>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00d      	beq.n	80031c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d107      	bne.n	80031c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e01a      	b.n	80031fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d194      	bne.n	80030fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	00100002 	.word	0x00100002
 800320c:	ffff0000 	.word	0xffff0000

08003210 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08c      	sub	sp, #48	; 0x30
 8003214:	af02      	add	r7, sp, #8
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	461a      	mov	r2, r3
 800321c:	460b      	mov	r3, r1
 800321e:	817b      	strh	r3, [r7, #10]
 8003220:	4613      	mov	r3, r2
 8003222:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003224:	f7fe ffce 	bl	80021c4 <HAL_GetTick>
 8003228:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b20      	cmp	r3, #32
 8003234:	f040 820b 	bne.w	800364e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	9300      	str	r3, [sp, #0]
 800323c:	2319      	movs	r3, #25
 800323e:	2201      	movs	r2, #1
 8003240:	497c      	ldr	r1, [pc, #496]	; (8003434 <HAL_I2C_Master_Receive+0x224>)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 fb74 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
 8003250:	e1fe      	b.n	8003650 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_I2C_Master_Receive+0x50>
 800325c:	2302      	movs	r3, #2
 800325e:	e1f7      	b.n	8003650 <HAL_I2C_Master_Receive+0x440>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d007      	beq.n	8003286 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003294:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2222      	movs	r2, #34	; 0x22
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2210      	movs	r2, #16
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	893a      	ldrh	r2, [r7, #8]
 80032b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a5c      	ldr	r2, [pc, #368]	; (8003438 <HAL_I2C_Master_Receive+0x228>)
 80032c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032c8:	8979      	ldrh	r1, [r7, #10]
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fa60 	bl	8003794 <I2C_MasterRequestRead>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e1b8      	b.n	8003650 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d113      	bne.n	800330e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e6:	2300      	movs	r3, #0
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	623b      	str	r3, [r7, #32]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	623b      	str	r3, [r7, #32]
 80032fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	e18c      	b.n	8003628 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003312:	2b01      	cmp	r3, #1
 8003314:	d11b      	bne.n	800334e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003324:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	e16c      	b.n	8003628 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003352:	2b02      	cmp	r3, #2
 8003354:	d11b      	bne.n	800338e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003364:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003374:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003376:	2300      	movs	r3, #0
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	e14c      	b.n	8003628 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800339c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033b4:	e138      	b.n	8003628 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	f200 80f1 	bhi.w	80035a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d123      	bne.n	8003410 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fc07 	bl	8003be0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e139      	b.n	8003650 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800340e:	e10b      	b.n	8003628 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003414:	2b02      	cmp	r3, #2
 8003416:	d14e      	bne.n	80034b6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	2200      	movs	r2, #0
 8003420:	4906      	ldr	r1, [pc, #24]	; (800343c <HAL_I2C_Master_Receive+0x22c>)
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fa84 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e10e      	b.n	8003650 <HAL_I2C_Master_Receive+0x440>
 8003432:	bf00      	nop
 8003434:	00100002 	.word	0x00100002
 8003438:	ffff0000 	.word	0xffff0000
 800343c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800344e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	3b01      	subs	r3, #1
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	691a      	ldr	r2, [r3, #16]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	b2d2      	uxtb	r2, r2
 800348e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034b4:	e0b8      	b.n	8003628 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034bc:	2200      	movs	r2, #0
 80034be:	4966      	ldr	r1, [pc, #408]	; (8003658 <HAL_I2C_Master_Receive+0x448>)
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 fa35 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e0bf      	b.n	8003650 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003508:	b29b      	uxth	r3, r3
 800350a:	3b01      	subs	r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	2200      	movs	r2, #0
 800351a:	494f      	ldr	r1, [pc, #316]	; (8003658 <HAL_I2C_Master_Receive+0x448>)
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fa07 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e091      	b.n	8003650 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035a0:	e042      	b.n	8003628 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fb1a 	bl	8003be0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e04c      	b.n	8003650 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d2:	3b01      	subs	r3, #1
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d118      	bne.n	8003628 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	2b00      	cmp	r3, #0
 800362e:	f47f aec2 	bne.w	80033b6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e000      	b.n	8003650 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800364e:	2302      	movs	r3, #2
  }
}
 8003650:	4618      	mov	r0, r3
 8003652:	3728      	adds	r7, #40	; 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	00010004 	.word	0x00010004

0800365c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800366a:	b2db      	uxtb	r3, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	460b      	mov	r3, r1
 800369e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d006      	beq.n	80036ba <I2C_MasterRequestWrite+0x2a>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d003      	beq.n	80036ba <I2C_MasterRequestWrite+0x2a>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036b8:	d108      	bne.n	80036cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e00b      	b.n	80036e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	2b12      	cmp	r3, #18
 80036d2:	d107      	bne.n	80036e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f91d 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370a:	d103      	bne.n	8003714 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e035      	b.n	8003784 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003720:	d108      	bne.n	8003734 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003722:	897b      	ldrh	r3, [r7, #10]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003730:	611a      	str	r2, [r3, #16]
 8003732:	e01b      	b.n	800376c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003734:	897b      	ldrh	r3, [r7, #10]
 8003736:	11db      	asrs	r3, r3, #7
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f003 0306 	and.w	r3, r3, #6
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f063 030f 	orn	r3, r3, #15
 8003744:	b2da      	uxtb	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	490e      	ldr	r1, [pc, #56]	; (800378c <I2C_MasterRequestWrite+0xfc>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f943 	bl	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e010      	b.n	8003784 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4907      	ldr	r1, [pc, #28]	; (8003790 <I2C_MasterRequestWrite+0x100>)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f933 	bl	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	00010008 	.word	0x00010008
 8003790:	00010002 	.word	0x00010002

08003794 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	460b      	mov	r3, r1
 80037a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d006      	beq.n	80037ce <I2C_MasterRequestRead+0x3a>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d003      	beq.n	80037ce <I2C_MasterRequestRead+0x3a>
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037cc:	d108      	bne.n	80037e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e00b      	b.n	80037f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	2b11      	cmp	r3, #17
 80037e6:	d107      	bne.n	80037f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f893 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00d      	beq.n	800382c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800381e:	d103      	bne.n	8003828 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003826:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e079      	b.n	8003920 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003834:	d108      	bne.n	8003848 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003836:	897b      	ldrh	r3, [r7, #10]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	b2da      	uxtb	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	611a      	str	r2, [r3, #16]
 8003846:	e05f      	b.n	8003908 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003848:	897b      	ldrh	r3, [r7, #10]
 800384a:	11db      	asrs	r3, r3, #7
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f003 0306 	and.w	r3, r3, #6
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f063 030f 	orn	r3, r3, #15
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4930      	ldr	r1, [pc, #192]	; (8003928 <I2C_MasterRequestRead+0x194>)
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f8b9 	bl	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e054      	b.n	8003920 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003876:	897b      	ldrh	r3, [r7, #10]
 8003878:	b2da      	uxtb	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4929      	ldr	r1, [pc, #164]	; (800392c <I2C_MasterRequestRead+0x198>)
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 f8a9 	bl	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e044      	b.n	8003920 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f831 	bl	8003930 <I2C_WaitOnFlagUntilTimeout>
 80038ce:	4603      	mov	r3, r0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e2:	d103      	bne.n	80038ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e017      	b.n	8003920 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038f0:	897b      	ldrh	r3, [r7, #10]
 80038f2:	11db      	asrs	r3, r3, #7
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	f003 0306 	and.w	r3, r3, #6
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f063 030e 	orn	r3, r3, #14
 8003900:	b2da      	uxtb	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	4907      	ldr	r1, [pc, #28]	; (800392c <I2C_MasterRequestRead+0x198>)
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f865 	bl	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	00010008 	.word	0x00010008
 800392c:	00010002 	.word	0x00010002

08003930 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	4613      	mov	r3, r2
 800393e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003940:	e025      	b.n	800398e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d021      	beq.n	800398e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394a:	f7fe fc3b 	bl	80021c4 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d302      	bcc.n	8003960 <I2C_WaitOnFlagUntilTimeout+0x30>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d116      	bne.n	800398e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f043 0220 	orr.w	r2, r3, #32
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e023      	b.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10d      	bne.n	80039b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	43da      	mvns	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4013      	ands	r3, r2
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bf0c      	ite	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	2300      	movne	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	e00c      	b.n	80039ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	43da      	mvns	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4013      	ands	r3, r2
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bf0c      	ite	eq
 80039c6:	2301      	moveq	r3, #1
 80039c8:	2300      	movne	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d0b6      	beq.n	8003942 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039ec:	e051      	b.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039fc:	d123      	bne.n	8003a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a16:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f043 0204 	orr.w	r2, r3, #4
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e046      	b.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4c:	d021      	beq.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4e:	f7fe fbb9 	bl	80021c4 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d302      	bcc.n	8003a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d116      	bne.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f043 0220 	orr.w	r2, r3, #32
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e020      	b.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d10c      	bne.n	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf14      	ite	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	2300      	moveq	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	e00b      	b.n	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	43da      	mvns	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d18d      	bne.n	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ae8:	e02d      	b.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 f8ce 	bl	8003c8c <I2C_IsAcknowledgeFailed>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e02d      	b.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d021      	beq.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fe fb5f 	bl	80021c4 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d116      	bne.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f043 0220 	orr.w	r2, r3, #32
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e007      	b.n	8003b56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b50:	2b80      	cmp	r3, #128	; 0x80
 8003b52:	d1ca      	bne.n	8003aea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b6a:	e02d      	b.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 f88d 	bl	8003c8c <I2C_IsAcknowledgeFailed>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e02d      	b.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d021      	beq.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b84:	f7fe fb1e 	bl	80021c4 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d116      	bne.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	f043 0220 	orr.w	r2, r3, #32
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e007      	b.n	8003bd8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d1ca      	bne.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bec:	e042      	b.n	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d119      	bne.n	8003c30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0210 	mvn.w	r2, #16
 8003c04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e029      	b.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c30:	f7fe fac8 	bl	80021c4 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d302      	bcc.n	8003c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d116      	bne.n	8003c74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	f043 0220 	orr.w	r2, r3, #32
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e007      	b.n	8003c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b40      	cmp	r3, #64	; 0x40
 8003c80:	d1b5      	bne.n	8003bee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca2:	d11b      	bne.n	8003cdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	f043 0204 	orr.w	r2, r3, #4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e267      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d075      	beq.n	8003df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d0a:	4b88      	ldr	r3, [pc, #544]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f003 030c 	and.w	r3, r3, #12
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d00c      	beq.n	8003d30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d16:	4b85      	ldr	r3, [pc, #532]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d112      	bne.n	8003d48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d22:	4b82      	ldr	r3, [pc, #520]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d2e:	d10b      	bne.n	8003d48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d30:	4b7e      	ldr	r3, [pc, #504]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d05b      	beq.n	8003df4 <HAL_RCC_OscConfig+0x108>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d157      	bne.n	8003df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e242      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d50:	d106      	bne.n	8003d60 <HAL_RCC_OscConfig+0x74>
 8003d52:	4b76      	ldr	r3, [pc, #472]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a75      	ldr	r2, [pc, #468]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	e01d      	b.n	8003d9c <HAL_RCC_OscConfig+0xb0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x98>
 8003d6a:	4b70      	ldr	r3, [pc, #448]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6f      	ldr	r2, [pc, #444]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	4b6d      	ldr	r3, [pc, #436]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a6c      	ldr	r2, [pc, #432]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e00b      	b.n	8003d9c <HAL_RCC_OscConfig+0xb0>
 8003d84:	4b69      	ldr	r3, [pc, #420]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a68      	ldr	r2, [pc, #416]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	4b66      	ldr	r3, [pc, #408]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a65      	ldr	r2, [pc, #404]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d013      	beq.n	8003dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fe fa0e 	bl	80021c4 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fe fa0a 	bl	80021c4 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e207      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b5b      	ldr	r3, [pc, #364]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0xc0>
 8003dca:	e014      	b.n	8003df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7fe f9fa 	bl	80021c4 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd4:	f7fe f9f6 	bl	80021c4 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b64      	cmp	r3, #100	; 0x64
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e1f3      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de6:	4b51      	ldr	r3, [pc, #324]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0xe8>
 8003df2:	e000      	b.n	8003df6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d063      	beq.n	8003eca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e02:	4b4a      	ldr	r3, [pc, #296]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0e:	4b47      	ldr	r3, [pc, #284]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d11c      	bne.n	8003e54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e1a:	4b44      	ldr	r3, [pc, #272]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d116      	bne.n	8003e54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e26:	4b41      	ldr	r3, [pc, #260]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <HAL_RCC_OscConfig+0x152>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d001      	beq.n	8003e3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e1c7      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3e:	4b3b      	ldr	r3, [pc, #236]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4937      	ldr	r1, [pc, #220]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e52:	e03a      	b.n	8003eca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d020      	beq.n	8003e9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e5c:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <HAL_RCC_OscConfig+0x244>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e62:	f7fe f9af 	bl	80021c4 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e6a:	f7fe f9ab 	bl	80021c4 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e1a8      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7c:	4b2b      	ldr	r3, [pc, #172]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0f0      	beq.n	8003e6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e88:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4925      	ldr	r1, [pc, #148]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	600b      	str	r3, [r1, #0]
 8003e9c:	e015      	b.n	8003eca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <HAL_RCC_OscConfig+0x244>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fe f98e 	bl	80021c4 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eac:	f7fe f98a 	bl	80021c4 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e187      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ebe:	4b1b      	ldr	r3, [pc, #108]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d036      	beq.n	8003f44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d016      	beq.n	8003f0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ede:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <HAL_RCC_OscConfig+0x248>)
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fe f96e 	bl	80021c4 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eec:	f7fe f96a 	bl	80021c4 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e167      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <HAL_RCC_OscConfig+0x240>)
 8003f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCC_OscConfig+0x200>
 8003f0a:	e01b      	b.n	8003f44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_RCC_OscConfig+0x248>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f12:	f7fe f957 	bl	80021c4 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f18:	e00e      	b.n	8003f38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f1a:	f7fe f953 	bl	80021c4 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d907      	bls.n	8003f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e150      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	42470000 	.word	0x42470000
 8003f34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f38:	4b88      	ldr	r3, [pc, #544]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1ea      	bne.n	8003f1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 8097 	beq.w	8004080 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f52:	2300      	movs	r3, #0
 8003f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f56:	4b81      	ldr	r3, [pc, #516]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10f      	bne.n	8003f82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	4b7d      	ldr	r3, [pc, #500]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a7c      	ldr	r2, [pc, #496]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b7a      	ldr	r3, [pc, #488]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	60bb      	str	r3, [r7, #8]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f82:	4b77      	ldr	r3, [pc, #476]	; (8004160 <HAL_RCC_OscConfig+0x474>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d118      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f8e:	4b74      	ldr	r3, [pc, #464]	; (8004160 <HAL_RCC_OscConfig+0x474>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a73      	ldr	r2, [pc, #460]	; (8004160 <HAL_RCC_OscConfig+0x474>)
 8003f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9a:	f7fe f913 	bl	80021c4 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa2:	f7fe f90f 	bl	80021c4 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e10c      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb4:	4b6a      	ldr	r3, [pc, #424]	; (8004160 <HAL_RCC_OscConfig+0x474>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d106      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x2ea>
 8003fc8:	4b64      	ldr	r3, [pc, #400]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fcc:	4a63      	ldr	r2, [pc, #396]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd4:	e01c      	b.n	8004010 <HAL_RCC_OscConfig+0x324>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	2b05      	cmp	r3, #5
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x30c>
 8003fde:	4b5f      	ldr	r3, [pc, #380]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	4a5e      	ldr	r2, [pc, #376]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003fe4:	f043 0304 	orr.w	r3, r3, #4
 8003fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fea:	4b5c      	ldr	r3, [pc, #368]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	4a5b      	ldr	r2, [pc, #364]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff6:	e00b      	b.n	8004010 <HAL_RCC_OscConfig+0x324>
 8003ff8:	4b58      	ldr	r3, [pc, #352]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	4a57      	ldr	r2, [pc, #348]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	6713      	str	r3, [r2, #112]	; 0x70
 8004004:	4b55      	ldr	r3, [pc, #340]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a54      	ldr	r2, [pc, #336]	; (800415c <HAL_RCC_OscConfig+0x470>)
 800400a:	f023 0304 	bic.w	r3, r3, #4
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d015      	beq.n	8004044 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004018:	f7fe f8d4 	bl	80021c4 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401e:	e00a      	b.n	8004036 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7fe f8d0 	bl	80021c4 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	; 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e0cb      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004036:	4b49      	ldr	r3, [pc, #292]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0ee      	beq.n	8004020 <HAL_RCC_OscConfig+0x334>
 8004042:	e014      	b.n	800406e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004044:	f7fe f8be 	bl	80021c4 <HAL_GetTick>
 8004048:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404a:	e00a      	b.n	8004062 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404c:	f7fe f8ba 	bl	80021c4 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e0b5      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004062:	4b3e      	ldr	r3, [pc, #248]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1ee      	bne.n	800404c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800406e:	7dfb      	ldrb	r3, [r7, #23]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d105      	bne.n	8004080 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004074:	4b39      	ldr	r3, [pc, #228]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	4a38      	ldr	r2, [pc, #224]	; (800415c <HAL_RCC_OscConfig+0x470>)
 800407a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 80a1 	beq.w	80041cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800408a:	4b34      	ldr	r3, [pc, #208]	; (800415c <HAL_RCC_OscConfig+0x470>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b08      	cmp	r3, #8
 8004094:	d05c      	beq.n	8004150 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d141      	bne.n	8004122 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409e:	4b31      	ldr	r3, [pc, #196]	; (8004164 <HAL_RCC_OscConfig+0x478>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fe f88e 	bl	80021c4 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ac:	f7fe f88a 	bl	80021c4 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e087      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040be:	4b27      	ldr	r3, [pc, #156]	; (800415c <HAL_RCC_OscConfig+0x470>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69da      	ldr	r2, [r3, #28]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	019b      	lsls	r3, r3, #6
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	085b      	lsrs	r3, r3, #1
 80040e2:	3b01      	subs	r3, #1
 80040e4:	041b      	lsls	r3, r3, #16
 80040e6:	431a      	orrs	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	061b      	lsls	r3, r3, #24
 80040ee:	491b      	ldr	r1, [pc, #108]	; (800415c <HAL_RCC_OscConfig+0x470>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f4:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <HAL_RCC_OscConfig+0x478>)
 80040f6:	2201      	movs	r2, #1
 80040f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fa:	f7fe f863 	bl	80021c4 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004102:	f7fe f85f 	bl	80021c4 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e05c      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004114:	4b11      	ldr	r3, [pc, #68]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <HAL_RCC_OscConfig+0x416>
 8004120:	e054      	b.n	80041cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004122:	4b10      	ldr	r3, [pc, #64]	; (8004164 <HAL_RCC_OscConfig+0x478>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004128:	f7fe f84c 	bl	80021c4 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004130:	f7fe f848 	bl	80021c4 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e045      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_RCC_OscConfig+0x470>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1f0      	bne.n	8004130 <HAL_RCC_OscConfig+0x444>
 800414e:	e03d      	b.n	80041cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d107      	bne.n	8004168 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e038      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
 800415c:	40023800 	.word	0x40023800
 8004160:	40007000 	.word	0x40007000
 8004164:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004168:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_RCC_OscConfig+0x4ec>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d028      	beq.n	80041c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d121      	bne.n	80041c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800418e:	429a      	cmp	r2, r3
 8004190:	d11a      	bne.n	80041c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004198:	4013      	ands	r3, r2
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800419e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d111      	bne.n	80041c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	085b      	lsrs	r3, r3, #1
 80041b0:	3b01      	subs	r3, #1
 80041b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d107      	bne.n	80041c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800

080041dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0cc      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041f0:	4b68      	ldr	r3, [pc, #416]	; (8004394 <HAL_RCC_ClockConfig+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d90c      	bls.n	8004218 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b65      	ldr	r3, [pc, #404]	; (8004394 <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004206:	4b63      	ldr	r3, [pc, #396]	; (8004394 <HAL_RCC_ClockConfig+0x1b8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d001      	beq.n	8004218 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e0b8      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d020      	beq.n	8004266 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004230:	4b59      	ldr	r3, [pc, #356]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a58      	ldr	r2, [pc, #352]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800423a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b00      	cmp	r3, #0
 8004246:	d005      	beq.n	8004254 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004248:	4b53      	ldr	r3, [pc, #332]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4a52      	ldr	r2, [pc, #328]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004252:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004254:	4b50      	ldr	r3, [pc, #320]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	494d      	ldr	r1, [pc, #308]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d044      	beq.n	80042fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d107      	bne.n	800428a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427a:	4b47      	ldr	r3, [pc, #284]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d119      	bne.n	80042ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e07f      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b02      	cmp	r3, #2
 8004290:	d003      	beq.n	800429a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004296:	2b03      	cmp	r3, #3
 8004298:	d107      	bne.n	80042aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800429a:	4b3f      	ldr	r3, [pc, #252]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d109      	bne.n	80042ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e06f      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042aa:	4b3b      	ldr	r3, [pc, #236]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e067      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ba:	4b37      	ldr	r3, [pc, #220]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f023 0203 	bic.w	r2, r3, #3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	4934      	ldr	r1, [pc, #208]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042cc:	f7fd ff7a 	bl	80021c4 <HAL_GetTick>
 80042d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d4:	f7fd ff76 	bl	80021c4 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e04f      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ea:	4b2b      	ldr	r3, [pc, #172]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 020c 	and.w	r2, r3, #12
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d1eb      	bne.n	80042d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042fc:	4b25      	ldr	r3, [pc, #148]	; (8004394 <HAL_RCC_ClockConfig+0x1b8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d20c      	bcs.n	8004324 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b22      	ldr	r3, [pc, #136]	; (8004394 <HAL_RCC_ClockConfig+0x1b8>)
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_RCC_ClockConfig+0x1b8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d001      	beq.n	8004324 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e032      	b.n	800438a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d008      	beq.n	8004342 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004330:	4b19      	ldr	r3, [pc, #100]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	4916      	ldr	r1, [pc, #88]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	4313      	orrs	r3, r2
 8004340:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800434e:	4b12      	ldr	r3, [pc, #72]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	490e      	ldr	r1, [pc, #56]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004362:	f000 f821 	bl	80043a8 <HAL_RCC_GetSysClockFreq>
 8004366:	4602      	mov	r2, r0
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	490a      	ldr	r1, [pc, #40]	; (800439c <HAL_RCC_ClockConfig+0x1c0>)
 8004374:	5ccb      	ldrb	r3, [r1, r3]
 8004376:	fa22 f303 	lsr.w	r3, r2, r3
 800437a:	4a09      	ldr	r2, [pc, #36]	; (80043a0 <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800437e:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7fd feda 	bl	800213c <HAL_InitTick>

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40023c00 	.word	0x40023c00
 8004398:	40023800 	.word	0x40023800
 800439c:	08007870 	.word	0x08007870
 80043a0:	20000004 	.word	0x20000004
 80043a4:	20000008 	.word	0x20000008

080043a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ac:	b090      	sub	sp, #64	; 0x40
 80043ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	637b      	str	r3, [r7, #52]	; 0x34
 80043b4:	2300      	movs	r3, #0
 80043b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b8:	2300      	movs	r3, #0
 80043ba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c0:	4b59      	ldr	r3, [pc, #356]	; (8004528 <HAL_RCC_GetSysClockFreq+0x180>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 030c 	and.w	r3, r3, #12
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d00d      	beq.n	80043e8 <HAL_RCC_GetSysClockFreq+0x40>
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	f200 80a1 	bhi.w	8004514 <HAL_RCC_GetSysClockFreq+0x16c>
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_RCC_GetSysClockFreq+0x34>
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d003      	beq.n	80043e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043da:	e09b      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043dc:	4b53      	ldr	r3, [pc, #332]	; (800452c <HAL_RCC_GetSysClockFreq+0x184>)
 80043de:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80043e0:	e09b      	b.n	800451a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043e2:	4b53      	ldr	r3, [pc, #332]	; (8004530 <HAL_RCC_GetSysClockFreq+0x188>)
 80043e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043e6:	e098      	b.n	800451a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043e8:	4b4f      	ldr	r3, [pc, #316]	; (8004528 <HAL_RCC_GetSysClockFreq+0x180>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043f2:	4b4d      	ldr	r3, [pc, #308]	; (8004528 <HAL_RCC_GetSysClockFreq+0x180>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d028      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043fe:	4b4a      	ldr	r3, [pc, #296]	; (8004528 <HAL_RCC_GetSysClockFreq+0x180>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	099b      	lsrs	r3, r3, #6
 8004404:	2200      	movs	r2, #0
 8004406:	623b      	str	r3, [r7, #32]
 8004408:	627a      	str	r2, [r7, #36]	; 0x24
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004410:	2100      	movs	r1, #0
 8004412:	4b47      	ldr	r3, [pc, #284]	; (8004530 <HAL_RCC_GetSysClockFreq+0x188>)
 8004414:	fb03 f201 	mul.w	r2, r3, r1
 8004418:	2300      	movs	r3, #0
 800441a:	fb00 f303 	mul.w	r3, r0, r3
 800441e:	4413      	add	r3, r2
 8004420:	4a43      	ldr	r2, [pc, #268]	; (8004530 <HAL_RCC_GetSysClockFreq+0x188>)
 8004422:	fba0 1202 	umull	r1, r2, r0, r2
 8004426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004428:	460a      	mov	r2, r1
 800442a:	62ba      	str	r2, [r7, #40]	; 0x28
 800442c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442e:	4413      	add	r3, r2
 8004430:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004434:	2200      	movs	r2, #0
 8004436:	61bb      	str	r3, [r7, #24]
 8004438:	61fa      	str	r2, [r7, #28]
 800443a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800443e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004442:	f7fc fb13 	bl	8000a6c <__aeabi_uldivmod>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4613      	mov	r3, r2
 800444c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800444e:	e053      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004450:	4b35      	ldr	r3, [pc, #212]	; (8004528 <HAL_RCC_GetSysClockFreq+0x180>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	099b      	lsrs	r3, r3, #6
 8004456:	2200      	movs	r2, #0
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	617a      	str	r2, [r7, #20]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004462:	f04f 0b00 	mov.w	fp, #0
 8004466:	4652      	mov	r2, sl
 8004468:	465b      	mov	r3, fp
 800446a:	f04f 0000 	mov.w	r0, #0
 800446e:	f04f 0100 	mov.w	r1, #0
 8004472:	0159      	lsls	r1, r3, #5
 8004474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004478:	0150      	lsls	r0, r2, #5
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	ebb2 080a 	subs.w	r8, r2, sl
 8004482:	eb63 090b 	sbc.w	r9, r3, fp
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004492:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004496:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800449a:	ebb2 0408 	subs.w	r4, r2, r8
 800449e:	eb63 0509 	sbc.w	r5, r3, r9
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	00eb      	lsls	r3, r5, #3
 80044ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044b0:	00e2      	lsls	r2, r4, #3
 80044b2:	4614      	mov	r4, r2
 80044b4:	461d      	mov	r5, r3
 80044b6:	eb14 030a 	adds.w	r3, r4, sl
 80044ba:	603b      	str	r3, [r7, #0]
 80044bc:	eb45 030b 	adc.w	r3, r5, fp
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044ce:	4629      	mov	r1, r5
 80044d0:	028b      	lsls	r3, r1, #10
 80044d2:	4621      	mov	r1, r4
 80044d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044d8:	4621      	mov	r1, r4
 80044da:	028a      	lsls	r2, r1, #10
 80044dc:	4610      	mov	r0, r2
 80044de:	4619      	mov	r1, r3
 80044e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e2:	2200      	movs	r2, #0
 80044e4:	60bb      	str	r3, [r7, #8]
 80044e6:	60fa      	str	r2, [r7, #12]
 80044e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044ec:	f7fc fabe 	bl	8000a6c <__aeabi_uldivmod>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4613      	mov	r3, r2
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044f8:	4b0b      	ldr	r3, [pc, #44]	; (8004528 <HAL_RCC_GetSysClockFreq+0x180>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	3301      	adds	r3, #1
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004512:	e002      	b.n	800451a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004514:	4b05      	ldr	r3, [pc, #20]	; (800452c <HAL_RCC_GetSysClockFreq+0x184>)
 8004516:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800451a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800451c:	4618      	mov	r0, r3
 800451e:	3740      	adds	r7, #64	; 0x40
 8004520:	46bd      	mov	sp, r7
 8004522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800
 800452c:	00f42400 	.word	0x00f42400
 8004530:	017d7840 	.word	0x017d7840

08004534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004538:	4b03      	ldr	r3, [pc, #12]	; (8004548 <HAL_RCC_GetHCLKFreq+0x14>)
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20000004 	.word	0x20000004

0800454c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004550:	f7ff fff0 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b05      	ldr	r3, [pc, #20]	; (800456c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	0a9b      	lsrs	r3, r3, #10
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	4903      	ldr	r1, [pc, #12]	; (8004570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40023800 	.word	0x40023800
 8004570:	08007880 	.word	0x08007880

08004574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004578:	f7ff ffdc 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 800457c:	4602      	mov	r2, r0
 800457e:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	0b5b      	lsrs	r3, r3, #13
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	4903      	ldr	r1, [pc, #12]	; (8004598 <HAL_RCC_GetPCLK2Freq+0x24>)
 800458a:	5ccb      	ldrb	r3, [r1, r3]
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40023800 	.word	0x40023800
 8004598:	08007880 	.word	0x08007880

0800459c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e041      	b.n	8004632 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd fbaa 	bl	8001d1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f000 f9da 	bl	8004994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e041      	b.n	80046d0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	d106      	bne.n	8004666 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7fd faf5 	bl	8001c50 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2202      	movs	r2, #2
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	3304      	adds	r3, #4
 8004676:	4619      	mov	r1, r3
 8004678:	4610      	mov	r0, r2
 800467a:	f000 f98b 	bl	8004994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e088      	b.n	8004808 <HAL_TIM_IC_ConfigChannel+0x130>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d11b      	bne.n	800473c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	6819      	ldr	r1, [r3, #0]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f000 fb4a 	bl	8004dac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 020c 	bic.w	r2, r2, #12
 8004726:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	6999      	ldr	r1, [r3, #24]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	619a      	str	r2, [r3, #24]
 800473a:	e060      	b.n	80047fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b04      	cmp	r3, #4
 8004740:	d11c      	bne.n	800477c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	6819      	ldr	r1, [r3, #0]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f000 fb93 	bl	8004e7c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699a      	ldr	r2, [r3, #24]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004764:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6999      	ldr	r1, [r3, #24]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	021a      	lsls	r2, r3, #8
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	619a      	str	r2, [r3, #24]
 800477a:	e040      	b.n	80047fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b08      	cmp	r3, #8
 8004780:	d11b      	bne.n	80047ba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f000 fbb0 	bl	8004ef6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69da      	ldr	r2, [r3, #28]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 020c 	bic.w	r2, r2, #12
 80047a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69d9      	ldr	r1, [r3, #28]
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	61da      	str	r2, [r3, #28]
 80047b8:	e021      	b.n	80047fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b0c      	cmp	r3, #12
 80047be:	d11c      	bne.n	80047fa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	6819      	ldr	r1, [r3, #0]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f000 fbcd 	bl	8004f6e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69da      	ldr	r2, [r3, #28]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69d9      	ldr	r1, [r3, #28]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	021a      	lsls	r2, r3, #8
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	61da      	str	r2, [r3, #28]
 80047f8:	e001      	b.n	80047fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004806:	7dfb      	ldrb	r3, [r7, #23]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3718      	adds	r7, #24
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800482a:	2302      	movs	r3, #2
 800482c:	e0ae      	b.n	800498c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b0c      	cmp	r3, #12
 800483a:	f200 809f 	bhi.w	800497c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004879 	.word	0x08004879
 8004848:	0800497d 	.word	0x0800497d
 800484c:	0800497d 	.word	0x0800497d
 8004850:	0800497d 	.word	0x0800497d
 8004854:	080048b9 	.word	0x080048b9
 8004858:	0800497d 	.word	0x0800497d
 800485c:	0800497d 	.word	0x0800497d
 8004860:	0800497d 	.word	0x0800497d
 8004864:	080048fb 	.word	0x080048fb
 8004868:	0800497d 	.word	0x0800497d
 800486c:	0800497d 	.word	0x0800497d
 8004870:	0800497d 	.word	0x0800497d
 8004874:	0800493b 	.word	0x0800493b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 f908 	bl	8004a94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0208 	orr.w	r2, r2, #8
 8004892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0204 	bic.w	r2, r2, #4
 80048a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6999      	ldr	r1, [r3, #24]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	619a      	str	r2, [r3, #24]
      break;
 80048b6:	e064      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f94e 	bl	8004b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6999      	ldr	r1, [r3, #24]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	021a      	lsls	r2, r3, #8
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	619a      	str	r2, [r3, #24]
      break;
 80048f8:	e043      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 f999 	bl	8004c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0208 	orr.w	r2, r2, #8
 8004914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0204 	bic.w	r2, r2, #4
 8004924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69d9      	ldr	r1, [r3, #28]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	61da      	str	r2, [r3, #28]
      break;
 8004938:	e023      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 f9e3 	bl	8004d0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69d9      	ldr	r1, [r3, #28]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	021a      	lsls	r2, r3, #8
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	61da      	str	r2, [r3, #28]
      break;
 800497a:	e002      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	75fb      	strb	r3, [r7, #23]
      break;
 8004980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a34      	ldr	r2, [pc, #208]	; (8004a78 <TIM_Base_SetConfig+0xe4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d00f      	beq.n	80049cc <TIM_Base_SetConfig+0x38>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b2:	d00b      	beq.n	80049cc <TIM_Base_SetConfig+0x38>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a31      	ldr	r2, [pc, #196]	; (8004a7c <TIM_Base_SetConfig+0xe8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <TIM_Base_SetConfig+0x38>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a30      	ldr	r2, [pc, #192]	; (8004a80 <TIM_Base_SetConfig+0xec>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d003      	beq.n	80049cc <TIM_Base_SetConfig+0x38>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <TIM_Base_SetConfig+0xf0>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d108      	bne.n	80049de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a25      	ldr	r2, [pc, #148]	; (8004a78 <TIM_Base_SetConfig+0xe4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d01b      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ec:	d017      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a22      	ldr	r2, [pc, #136]	; (8004a7c <TIM_Base_SetConfig+0xe8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d013      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a21      	ldr	r2, [pc, #132]	; (8004a80 <TIM_Base_SetConfig+0xec>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d00f      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a20      	ldr	r2, [pc, #128]	; (8004a84 <TIM_Base_SetConfig+0xf0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00b      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a1f      	ldr	r2, [pc, #124]	; (8004a88 <TIM_Base_SetConfig+0xf4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d007      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a1e      	ldr	r2, [pc, #120]	; (8004a8c <TIM_Base_SetConfig+0xf8>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_Base_SetConfig+0x8a>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a1d      	ldr	r2, [pc, #116]	; (8004a90 <TIM_Base_SetConfig+0xfc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d108      	bne.n	8004a30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a08      	ldr	r2, [pc, #32]	; (8004a78 <TIM_Base_SetConfig+0xe4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d103      	bne.n	8004a64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	615a      	str	r2, [r3, #20]
}
 8004a6a:	bf00      	nop
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40010000 	.word	0x40010000
 8004a7c:	40000400 	.word	0x40000400
 8004a80:	40000800 	.word	0x40000800
 8004a84:	40000c00 	.word	0x40000c00
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800

08004a94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f023 0201 	bic.w	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0303 	bic.w	r3, r3, #3
 8004aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f023 0302 	bic.w	r3, r3, #2
 8004adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <TIM_OC1_SetConfig+0xc8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d10c      	bne.n	8004b0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f023 0308 	bic.w	r3, r3, #8
 8004af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f023 0304 	bic.w	r3, r3, #4
 8004b08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a13      	ldr	r2, [pc, #76]	; (8004b5c <TIM_OC1_SetConfig+0xc8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d111      	bne.n	8004b36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	621a      	str	r2, [r3, #32]
}
 8004b50:	bf00      	nop
 8004b52:	371c      	adds	r7, #28
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr
 8004b5c:	40010000 	.word	0x40010000

08004b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	f023 0210 	bic.w	r2, r3, #16
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f023 0320 	bic.w	r3, r3, #32
 8004baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <TIM_OC2_SetConfig+0xd4>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d10d      	bne.n	8004bdc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bda:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a15      	ldr	r2, [pc, #84]	; (8004c34 <TIM_OC2_SetConfig+0xd4>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d113      	bne.n	8004c0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40010000 	.word	0x40010000

08004c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0303 	bic.w	r3, r3, #3
 8004c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a1d      	ldr	r2, [pc, #116]	; (8004d08 <TIM_OC3_SetConfig+0xd0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10d      	bne.n	8004cb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	021b      	lsls	r3, r3, #8
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a14      	ldr	r2, [pc, #80]	; (8004d08 <TIM_OC3_SetConfig+0xd0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d113      	bne.n	8004ce2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	621a      	str	r2, [r3, #32]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40010000 	.word	0x40010000

08004d0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	031b      	lsls	r3, r3, #12
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a10      	ldr	r2, [pc, #64]	; (8004da8 <TIM_OC4_SetConfig+0x9c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d109      	bne.n	8004d80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	019b      	lsls	r3, r3, #6
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40010000 	.word	0x40010000

08004dac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0201 	bic.w	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4a24      	ldr	r2, [pc, #144]	; (8004e68 <TIM_TI1_SetConfig+0xbc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d013      	beq.n	8004e02 <TIM_TI1_SetConfig+0x56>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de0:	d00f      	beq.n	8004e02 <TIM_TI1_SetConfig+0x56>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4a21      	ldr	r2, [pc, #132]	; (8004e6c <TIM_TI1_SetConfig+0xc0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00b      	beq.n	8004e02 <TIM_TI1_SetConfig+0x56>
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4a20      	ldr	r2, [pc, #128]	; (8004e70 <TIM_TI1_SetConfig+0xc4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d007      	beq.n	8004e02 <TIM_TI1_SetConfig+0x56>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	4a1f      	ldr	r2, [pc, #124]	; (8004e74 <TIM_TI1_SetConfig+0xc8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d003      	beq.n	8004e02 <TIM_TI1_SetConfig+0x56>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4a1e      	ldr	r2, [pc, #120]	; (8004e78 <TIM_TI1_SetConfig+0xcc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d101      	bne.n	8004e06 <TIM_TI1_SetConfig+0x5a>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e000      	b.n	8004e08 <TIM_TI1_SetConfig+0x5c>
 8004e06:	2300      	movs	r3, #0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f023 0303 	bic.w	r3, r3, #3
 8004e12:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	e003      	b.n	8004e26 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f023 030a 	bic.w	r3, r3, #10
 8004e40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f003 030a 	and.w	r3, r3, #10
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40014000 	.word	0x40014000

08004e7c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f023 0210 	bic.w	r2, r3, #16
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	031b      	lsls	r3, r3, #12
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ece:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b087      	sub	sp, #28
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	60f8      	str	r0, [r7, #12]
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	607a      	str	r2, [r7, #4]
 8004f02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f32:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004f46:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	621a      	str	r2, [r3, #32]
}
 8004f62:	bf00      	nop
 8004f64:	371c      	adds	r7, #28
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b087      	sub	sp, #28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	031b      	lsls	r3, r3, #12
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	031b      	lsls	r3, r3, #12
 8004fc6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	621a      	str	r2, [r3, #32]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e050      	b.n	80050a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005026:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1c      	ldr	r2, [pc, #112]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d018      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800504c:	d013      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a18      	ldr	r2, [pc, #96]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00e      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a16      	ldr	r2, [pc, #88]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d009      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a15      	ldr	r2, [pc, #84]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a13      	ldr	r2, [pc, #76]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d10c      	bne.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800507c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	4313      	orrs	r3, r2
 8005086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40010000 	.word	0x40010000
 80050b4:	40000400 	.word	0x40000400
 80050b8:	40000800 	.word	0x40000800
 80050bc:	40000c00 	.word	0x40000c00
 80050c0:	40014000 	.word	0x40014000

080050c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e03f      	b.n	8005156 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fc fe92 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2224      	movs	r2, #36	; 0x24
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005106:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 fde9 	bl	8005ce0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691a      	ldr	r2, [r3, #16]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800511c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	695a      	ldr	r2, [r3, #20]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800512c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800513c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b08a      	sub	sp, #40	; 0x28
 8005162:	af02      	add	r7, sp, #8
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	603b      	str	r3, [r7, #0]
 800516a:	4613      	mov	r3, r2
 800516c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b20      	cmp	r3, #32
 800517c:	d17c      	bne.n	8005278 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <HAL_UART_Transmit+0x2c>
 8005184:	88fb      	ldrh	r3, [r7, #6]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e075      	b.n	800527a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005194:	2b01      	cmp	r3, #1
 8005196:	d101      	bne.n	800519c <HAL_UART_Transmit+0x3e>
 8005198:	2302      	movs	r3, #2
 800519a:	e06e      	b.n	800527a <HAL_UART_Transmit+0x11c>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2221      	movs	r2, #33	; 0x21
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051b2:	f7fd f807 	bl	80021c4 <HAL_GetTick>
 80051b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	88fa      	ldrh	r2, [r7, #6]
 80051bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	88fa      	ldrh	r2, [r7, #6]
 80051c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051cc:	d108      	bne.n	80051e0 <HAL_UART_Transmit+0x82>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d104      	bne.n	80051e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	61bb      	str	r3, [r7, #24]
 80051de:	e003      	b.n	80051e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051f0:	e02a      	b.n	8005248 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2200      	movs	r2, #0
 80051fa:	2180      	movs	r1, #128	; 0x80
 80051fc:	68f8      	ldr	r0, [r7, #12]
 80051fe:	f000 fb29 	bl	8005854 <UART_WaitOnFlagUntilTimeout>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e036      	b.n	800527a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10b      	bne.n	800522a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005220:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	3302      	adds	r3, #2
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	e007      	b.n	800523a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	781a      	ldrb	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	3301      	adds	r3, #1
 8005238:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800524c:	b29b      	uxth	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1cf      	bne.n	80051f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2200      	movs	r2, #0
 800525a:	2140      	movs	r1, #64	; 0x40
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f000 faf9 	bl	8005854 <UART_WaitOnFlagUntilTimeout>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e006      	b.n	800527a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	e000      	b.n	800527a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005278:	2302      	movs	r3, #2
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	4613      	mov	r3, r2
 800528e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b20      	cmp	r3, #32
 800529a:	d11d      	bne.n	80052d8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d002      	beq.n	80052a8 <HAL_UART_Receive_IT+0x26>
 80052a2:	88fb      	ldrh	r3, [r7, #6]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e016      	b.n	80052da <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Receive_IT+0x38>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e00f      	b.n	80052da <HAL_UART_Receive_IT+0x58>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	461a      	mov	r2, r3
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	68f8      	ldr	r0, [r7, #12]
 80052d0:	f000 fb2e 	bl	8005930 <UART_Start_Receive_IT>
 80052d4:	4603      	mov	r3, r0
 80052d6:	e000      	b.n	80052da <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80052d8:	2302      	movs	r3, #2
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b0ba      	sub	sp, #232	; 0xe8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800530a:	2300      	movs	r3, #0
 800530c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005310:	2300      	movs	r3, #0
 8005312:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800531a:	f003 030f 	and.w	r3, r3, #15
 800531e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005322:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10f      	bne.n	800534a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800532a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <HAL_UART_IRQHandler+0x66>
 8005336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800533a:	f003 0320 	and.w	r3, r3, #32
 800533e:	2b00      	cmp	r3, #0
 8005340:	d003      	beq.n	800534a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fc11 	bl	8005b6a <UART_Receive_IT>
      return;
 8005348:	e256      	b.n	80057f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800534a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 80de 	beq.w	8005510 <HAL_UART_IRQHandler+0x22c>
 8005354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005364:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80d1 	beq.w	8005510 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800536e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00b      	beq.n	8005392 <HAL_UART_IRQHandler+0xae>
 800537a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f043 0201 	orr.w	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00b      	beq.n	80053b6 <HAL_UART_IRQHandler+0xd2>
 800539e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d005      	beq.n	80053b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	f043 0202 	orr.w	r2, r3, #2
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00b      	beq.n	80053da <HAL_UART_IRQHandler+0xf6>
 80053c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d005      	beq.n	80053da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	f043 0204 	orr.w	r2, r3, #4
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d011      	beq.n	800540a <HAL_UART_IRQHandler+0x126>
 80053e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d105      	bne.n	80053fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f043 0208 	orr.w	r2, r3, #8
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 81ed 	beq.w	80057ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <HAL_UART_IRQHandler+0x14e>
 8005420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fb9c 	bl	8005b6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543c:	2b40      	cmp	r3, #64	; 0x40
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2300      	movne	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d103      	bne.n	800545e <HAL_UART_IRQHandler+0x17a>
 8005456:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800545a:	2b00      	cmp	r3, #0
 800545c:	d04f      	beq.n	80054fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 faa4 	bl	80059ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b40      	cmp	r3, #64	; 0x40
 8005470:	d141      	bne.n	80054f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3314      	adds	r3, #20
 8005478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005488:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800548c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005490:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3314      	adds	r3, #20
 800549a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800549e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1d9      	bne.n	8005472 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d013      	beq.n	80054ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ca:	4a7d      	ldr	r2, [pc, #500]	; (80056c0 <HAL_UART_IRQHandler+0x3dc>)
 80054cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fd fa99 	bl	8002a0a <HAL_DMA_Abort_IT>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d016      	beq.n	800550c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054e8:	4610      	mov	r0, r2
 80054ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ec:	e00e      	b.n	800550c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f99a 	bl	8005828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f4:	e00a      	b.n	800550c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f996 	bl	8005828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	e006      	b.n	800550c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f992 	bl	8005828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800550a:	e170      	b.n	80057ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550c:	bf00      	nop
    return;
 800550e:	e16e      	b.n	80057ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005514:	2b01      	cmp	r3, #1
 8005516:	f040 814a 	bne.w	80057ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800551a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800551e:	f003 0310 	and.w	r3, r3, #16
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 8143 	beq.w	80057ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	f000 813c 	beq.w	80057ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005536:	2300      	movs	r3, #0
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	60bb      	str	r3, [r7, #8]
 800554a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005556:	2b40      	cmp	r3, #64	; 0x40
 8005558:	f040 80b4 	bne.w	80056c4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005568:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 8140 	beq.w	80057f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005576:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800557a:	429a      	cmp	r2, r3
 800557c:	f080 8139 	bcs.w	80057f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005586:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005592:	f000 8088 	beq.w	80056a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	330c      	adds	r3, #12
 800559c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	330c      	adds	r3, #12
 80055be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80055c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1d9      	bne.n	8005596 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3314      	adds	r3, #20
 80055e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	3314      	adds	r3, #20
 8005602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005606:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800560a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800560e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005618:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e1      	bne.n	80055e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3314      	adds	r3, #20
 8005624:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800562e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005630:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005634:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3314      	adds	r3, #20
 800563e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005642:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005644:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005646:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005648:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800564a:	e841 2300 	strex	r3, r2, [r1]
 800564e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1e3      	bne.n	800561e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2220      	movs	r2, #32
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	330c      	adds	r3, #12
 800566a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005676:	f023 0310 	bic.w	r3, r3, #16
 800567a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	330c      	adds	r3, #12
 8005684:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005688:	65ba      	str	r2, [r7, #88]	; 0x58
 800568a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800568e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005690:	e841 2300 	strex	r3, r2, [r1]
 8005694:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1e3      	bne.n	8005664 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7fd f942 	bl	800292a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f8c0 	bl	800583c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056bc:	e099      	b.n	80057f2 <HAL_UART_IRQHandler+0x50e>
 80056be:	bf00      	nop
 80056c0:	08005a73 	.word	0x08005a73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 808b 	beq.w	80057f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80056e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8086 	beq.w	80057f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	330c      	adds	r3, #12
 80056f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005700:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800570e:	647a      	str	r2, [r7, #68]	; 0x44
 8005710:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005714:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800571c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e3      	bne.n	80056ea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3314      	adds	r3, #20
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	623b      	str	r3, [r7, #32]
   return(result);
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	f023 0301 	bic.w	r3, r3, #1
 8005738:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	3314      	adds	r3, #20
 8005742:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005746:	633a      	str	r2, [r7, #48]	; 0x30
 8005748:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800574c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800574e:	e841 2300 	strex	r3, r2, [r1]
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1e3      	bne.n	8005722 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	330c      	adds	r3, #12
 800576e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	e853 3f00 	ldrex	r3, [r3]
 8005776:	60fb      	str	r3, [r7, #12]
   return(result);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0310 	bic.w	r3, r3, #16
 800577e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	330c      	adds	r3, #12
 8005788:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800578c:	61fa      	str	r2, [r7, #28]
 800578e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005790:	69b9      	ldr	r1, [r7, #24]
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	e841 2300 	strex	r3, r2, [r1]
 8005798:	617b      	str	r3, [r7, #20]
   return(result);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1e3      	bne.n	8005768 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f848 	bl	800583c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057ac:	e023      	b.n	80057f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <HAL_UART_IRQHandler+0x4ea>
 80057ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f967 	bl	8005a9a <UART_Transmit_IT>
    return;
 80057cc:	e014      	b.n	80057f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00e      	beq.n	80057f8 <HAL_UART_IRQHandler+0x514>
 80057da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d008      	beq.n	80057f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 f9a7 	bl	8005b3a <UART_EndTransmit_IT>
    return;
 80057ec:	e004      	b.n	80057f8 <HAL_UART_IRQHandler+0x514>
    return;
 80057ee:	bf00      	nop
 80057f0:	e002      	b.n	80057f8 <HAL_UART_IRQHandler+0x514>
      return;
 80057f2:	bf00      	nop
 80057f4:	e000      	b.n	80057f8 <HAL_UART_IRQHandler+0x514>
      return;
 80057f6:	bf00      	nop
  }
}
 80057f8:	37e8      	adds	r7, #232	; 0xe8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop

08005800 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	460b      	mov	r3, r1
 8005846:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b090      	sub	sp, #64	; 0x40
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	603b      	str	r3, [r7, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005864:	e050      	b.n	8005908 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586c:	d04c      	beq.n	8005908 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800586e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <UART_WaitOnFlagUntilTimeout+0x30>
 8005874:	f7fc fca6 	bl	80021c4 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005880:	429a      	cmp	r2, r3
 8005882:	d241      	bcs.n	8005908 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058a4:	637a      	str	r2, [r7, #52]	; 0x34
 80058a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058ac:	e841 2300 	strex	r3, r2, [r1]
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1e5      	bne.n	8005884 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3314      	adds	r3, #20
 80058be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	e853 3f00 	ldrex	r3, [r3]
 80058c6:	613b      	str	r3, [r7, #16]
   return(result);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	3314      	adds	r3, #20
 80058d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058d8:	623a      	str	r2, [r7, #32]
 80058da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	69f9      	ldr	r1, [r7, #28]
 80058de:	6a3a      	ldr	r2, [r7, #32]
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e5      	bne.n	80058b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e00f      	b.n	8005928 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	4013      	ands	r3, r2
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	429a      	cmp	r2, r3
 8005916:	bf0c      	ite	eq
 8005918:	2301      	moveq	r3, #1
 800591a:	2300      	movne	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	429a      	cmp	r2, r3
 8005924:	d09f      	beq.n	8005866 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3740      	adds	r7, #64	; 0x40
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	88fa      	ldrh	r2, [r7, #6]
 8005948:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	88fa      	ldrh	r2, [r7, #6]
 800594e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2222      	movs	r2, #34	; 0x22
 800595a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800597c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	695a      	ldr	r2, [r3, #20]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f042 0201 	orr.w	r2, r2, #1
 800598c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0220 	orr.w	r2, r2, #32
 800599c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b095      	sub	sp, #84	; 0x54
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	330c      	adds	r3, #12
 80059ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	330c      	adds	r3, #12
 80059d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059d4:	643a      	str	r2, [r7, #64]	; 0x40
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059dc:	e841 2300 	strex	r3, r2, [r1]
 80059e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1e5      	bne.n	80059b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3314      	adds	r3, #20
 80059ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6a3b      	ldr	r3, [r7, #32]
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f023 0301 	bic.w	r3, r3, #1
 80059fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3314      	adds	r3, #20
 8005a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e5      	bne.n	80059e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d119      	bne.n	8005a58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	330c      	adds	r3, #12
 8005a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f023 0310 	bic.w	r3, r3, #16
 8005a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a44:	61ba      	str	r2, [r7, #24]
 8005a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6979      	ldr	r1, [r7, #20]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	613b      	str	r3, [r7, #16]
   return(result);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e5      	bne.n	8005a24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a66:	bf00      	nop
 8005a68:	3754      	adds	r7, #84	; 0x54
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f7ff fecb 	bl	8005828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b085      	sub	sp, #20
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b21      	cmp	r3, #33	; 0x21
 8005aac:	d13e      	bne.n	8005b2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab6:	d114      	bne.n	8005ae2 <UART_Transmit_IT+0x48>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d110      	bne.n	8005ae2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a1b      	ldr	r3, [r3, #32]
 8005ac4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a1b      	ldr	r3, [r3, #32]
 8005ada:	1c9a      	adds	r2, r3, #2
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	621a      	str	r2, [r3, #32]
 8005ae0:	e008      	b.n	8005af4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	1c59      	adds	r1, r3, #1
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6211      	str	r1, [r2, #32]
 8005aec:	781a      	ldrb	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	4619      	mov	r1, r3
 8005b02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10f      	bne.n	8005b28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68da      	ldr	r2, [r3, #12]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e000      	b.n	8005b2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b2c:	2302      	movs	r3, #2
  }
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff fe50 	bl	8005800 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b08c      	sub	sp, #48	; 0x30
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b22      	cmp	r3, #34	; 0x22
 8005b7c:	f040 80ab 	bne.w	8005cd6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b88:	d117      	bne.n	8005bba <UART_Receive_IT+0x50>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d113      	bne.n	8005bba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb2:	1c9a      	adds	r2, r3, #2
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8005bb8:	e026      	b.n	8005c08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bcc:	d007      	beq.n	8005bde <UART_Receive_IT+0x74>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10a      	bne.n	8005bec <UART_Receive_IT+0x82>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	e008      	b.n	8005bfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	1c5a      	adds	r2, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4619      	mov	r1, r3
 8005c16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d15a      	bne.n	8005cd2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0220 	bic.w	r2, r2, #32
 8005c2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	695a      	ldr	r2, [r3, #20]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d135      	bne.n	8005cc8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	613b      	str	r3, [r7, #16]
   return(result);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f023 0310 	bic.w	r3, r3, #16
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c82:	623a      	str	r2, [r7, #32]
 8005c84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	69f9      	ldr	r1, [r7, #28]
 8005c88:	6a3a      	ldr	r2, [r7, #32]
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e5      	bne.n	8005c62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0310 	and.w	r3, r3, #16
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d10a      	bne.n	8005cba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f7ff fdbb 	bl	800583c <HAL_UARTEx_RxEventCallback>
 8005cc6:	e002      	b.n	8005cce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff fda3 	bl	8005814 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e002      	b.n	8005cd8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e000      	b.n	8005cd8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005cd6:	2302      	movs	r3, #2
  }
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3730      	adds	r7, #48	; 0x30
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ce4:	b0c0      	sub	sp, #256	; 0x100
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfc:	68d9      	ldr	r1, [r3, #12]
 8005cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	ea40 0301 	orr.w	r3, r0, r1
 8005d08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d38:	f021 010c 	bic.w	r1, r1, #12
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d46:	430b      	orrs	r3, r1
 8005d48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5a:	6999      	ldr	r1, [r3, #24]
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	ea40 0301 	orr.w	r3, r0, r1
 8005d66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	4b8f      	ldr	r3, [pc, #572]	; (8005fac <UART_SetConfig+0x2cc>)
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d005      	beq.n	8005d80 <UART_SetConfig+0xa0>
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	4b8d      	ldr	r3, [pc, #564]	; (8005fb0 <UART_SetConfig+0x2d0>)
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d104      	bne.n	8005d8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d80:	f7fe fbf8 	bl	8004574 <HAL_RCC_GetPCLK2Freq>
 8005d84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d88:	e003      	b.n	8005d92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d8a:	f7fe fbdf 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 8005d8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d9c:	f040 810c 	bne.w	8005fb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005da4:	2200      	movs	r2, #0
 8005da6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005daa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005dae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005db2:	4622      	mov	r2, r4
 8005db4:	462b      	mov	r3, r5
 8005db6:	1891      	adds	r1, r2, r2
 8005db8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dba:	415b      	adcs	r3, r3
 8005dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	eb12 0801 	adds.w	r8, r2, r1
 8005dc8:	4629      	mov	r1, r5
 8005dca:	eb43 0901 	adc.w	r9, r3, r1
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005de2:	4690      	mov	r8, r2
 8005de4:	4699      	mov	r9, r3
 8005de6:	4623      	mov	r3, r4
 8005de8:	eb18 0303 	adds.w	r3, r8, r3
 8005dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005df0:	462b      	mov	r3, r5
 8005df2:	eb49 0303 	adc.w	r3, r9, r3
 8005df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e0e:	460b      	mov	r3, r1
 8005e10:	18db      	adds	r3, r3, r3
 8005e12:	653b      	str	r3, [r7, #80]	; 0x50
 8005e14:	4613      	mov	r3, r2
 8005e16:	eb42 0303 	adc.w	r3, r2, r3
 8005e1a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e24:	f7fa fe22 	bl	8000a6c <__aeabi_uldivmod>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4b61      	ldr	r3, [pc, #388]	; (8005fb4 <UART_SetConfig+0x2d4>)
 8005e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	011c      	lsls	r4, r3, #4
 8005e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e48:	4642      	mov	r2, r8
 8005e4a:	464b      	mov	r3, r9
 8005e4c:	1891      	adds	r1, r2, r2
 8005e4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e50:	415b      	adcs	r3, r3
 8005e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e58:	4641      	mov	r1, r8
 8005e5a:	eb12 0a01 	adds.w	sl, r2, r1
 8005e5e:	4649      	mov	r1, r9
 8005e60:	eb43 0b01 	adc.w	fp, r3, r1
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e78:	4692      	mov	sl, r2
 8005e7a:	469b      	mov	fp, r3
 8005e7c:	4643      	mov	r3, r8
 8005e7e:	eb1a 0303 	adds.w	r3, sl, r3
 8005e82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e86:	464b      	mov	r3, r9
 8005e88:	eb4b 0303 	adc.w	r3, fp, r3
 8005e8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ea0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	18db      	adds	r3, r3, r3
 8005ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eaa:	4613      	mov	r3, r2
 8005eac:	eb42 0303 	adc.w	r3, r2, r3
 8005eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005eb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005eba:	f7fa fdd7 	bl	8000a6c <__aeabi_uldivmod>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	4b3b      	ldr	r3, [pc, #236]	; (8005fb4 <UART_SetConfig+0x2d4>)
 8005ec6:	fba3 2301 	umull	r2, r3, r3, r1
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	2264      	movs	r2, #100	; 0x64
 8005ece:	fb02 f303 	mul.w	r3, r2, r3
 8005ed2:	1acb      	subs	r3, r1, r3
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005eda:	4b36      	ldr	r3, [pc, #216]	; (8005fb4 <UART_SetConfig+0x2d4>)
 8005edc:	fba3 2302 	umull	r2, r3, r3, r2
 8005ee0:	095b      	lsrs	r3, r3, #5
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ee8:	441c      	add	r4, r3
 8005eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ef4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ef8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005efc:	4642      	mov	r2, r8
 8005efe:	464b      	mov	r3, r9
 8005f00:	1891      	adds	r1, r2, r2
 8005f02:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f04:	415b      	adcs	r3, r3
 8005f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f0c:	4641      	mov	r1, r8
 8005f0e:	1851      	adds	r1, r2, r1
 8005f10:	6339      	str	r1, [r7, #48]	; 0x30
 8005f12:	4649      	mov	r1, r9
 8005f14:	414b      	adcs	r3, r1
 8005f16:	637b      	str	r3, [r7, #52]	; 0x34
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f24:	4659      	mov	r1, fp
 8005f26:	00cb      	lsls	r3, r1, #3
 8005f28:	4651      	mov	r1, sl
 8005f2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f2e:	4651      	mov	r1, sl
 8005f30:	00ca      	lsls	r2, r1, #3
 8005f32:	4610      	mov	r0, r2
 8005f34:	4619      	mov	r1, r3
 8005f36:	4603      	mov	r3, r0
 8005f38:	4642      	mov	r2, r8
 8005f3a:	189b      	adds	r3, r3, r2
 8005f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f40:	464b      	mov	r3, r9
 8005f42:	460a      	mov	r2, r1
 8005f44:	eb42 0303 	adc.w	r3, r2, r3
 8005f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f60:	460b      	mov	r3, r1
 8005f62:	18db      	adds	r3, r3, r3
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f66:	4613      	mov	r3, r2
 8005f68:	eb42 0303 	adc.w	r3, r2, r3
 8005f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f76:	f7fa fd79 	bl	8000a6c <__aeabi_uldivmod>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <UART_SetConfig+0x2d4>)
 8005f80:	fba3 1302 	umull	r1, r3, r3, r2
 8005f84:	095b      	lsrs	r3, r3, #5
 8005f86:	2164      	movs	r1, #100	; 0x64
 8005f88:	fb01 f303 	mul.w	r3, r1, r3
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	3332      	adds	r3, #50	; 0x32
 8005f92:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <UART_SetConfig+0x2d4>)
 8005f94:	fba2 2303 	umull	r2, r3, r2, r3
 8005f98:	095b      	lsrs	r3, r3, #5
 8005f9a:	f003 0207 	and.w	r2, r3, #7
 8005f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4422      	add	r2, r4
 8005fa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fa8:	e105      	b.n	80061b6 <UART_SetConfig+0x4d6>
 8005faa:	bf00      	nop
 8005fac:	40011000 	.word	0x40011000
 8005fb0:	40011400 	.word	0x40011400
 8005fb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005fc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005fca:	4642      	mov	r2, r8
 8005fcc:	464b      	mov	r3, r9
 8005fce:	1891      	adds	r1, r2, r2
 8005fd0:	6239      	str	r1, [r7, #32]
 8005fd2:	415b      	adcs	r3, r3
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fda:	4641      	mov	r1, r8
 8005fdc:	1854      	adds	r4, r2, r1
 8005fde:	4649      	mov	r1, r9
 8005fe0:	eb43 0501 	adc.w	r5, r3, r1
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	00eb      	lsls	r3, r5, #3
 8005fee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ff2:	00e2      	lsls	r2, r4, #3
 8005ff4:	4614      	mov	r4, r2
 8005ff6:	461d      	mov	r5, r3
 8005ff8:	4643      	mov	r3, r8
 8005ffa:	18e3      	adds	r3, r4, r3
 8005ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006000:	464b      	mov	r3, r9
 8006002:	eb45 0303 	adc.w	r3, r5, r3
 8006006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800600a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006016:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006026:	4629      	mov	r1, r5
 8006028:	008b      	lsls	r3, r1, #2
 800602a:	4621      	mov	r1, r4
 800602c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006030:	4621      	mov	r1, r4
 8006032:	008a      	lsls	r2, r1, #2
 8006034:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006038:	f7fa fd18 	bl	8000a6c <__aeabi_uldivmod>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4b60      	ldr	r3, [pc, #384]	; (80061c4 <UART_SetConfig+0x4e4>)
 8006042:	fba3 2302 	umull	r2, r3, r3, r2
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	011c      	lsls	r4, r3, #4
 800604a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800604e:	2200      	movs	r2, #0
 8006050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006054:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006058:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800605c:	4642      	mov	r2, r8
 800605e:	464b      	mov	r3, r9
 8006060:	1891      	adds	r1, r2, r2
 8006062:	61b9      	str	r1, [r7, #24]
 8006064:	415b      	adcs	r3, r3
 8006066:	61fb      	str	r3, [r7, #28]
 8006068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800606c:	4641      	mov	r1, r8
 800606e:	1851      	adds	r1, r2, r1
 8006070:	6139      	str	r1, [r7, #16]
 8006072:	4649      	mov	r1, r9
 8006074:	414b      	adcs	r3, r1
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	f04f 0200 	mov.w	r2, #0
 800607c:	f04f 0300 	mov.w	r3, #0
 8006080:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006084:	4659      	mov	r1, fp
 8006086:	00cb      	lsls	r3, r1, #3
 8006088:	4651      	mov	r1, sl
 800608a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800608e:	4651      	mov	r1, sl
 8006090:	00ca      	lsls	r2, r1, #3
 8006092:	4610      	mov	r0, r2
 8006094:	4619      	mov	r1, r3
 8006096:	4603      	mov	r3, r0
 8006098:	4642      	mov	r2, r8
 800609a:	189b      	adds	r3, r3, r2
 800609c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060a0:	464b      	mov	r3, r9
 80060a2:	460a      	mov	r2, r1
 80060a4:	eb42 0303 	adc.w	r3, r2, r3
 80060a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80060b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060c4:	4649      	mov	r1, r9
 80060c6:	008b      	lsls	r3, r1, #2
 80060c8:	4641      	mov	r1, r8
 80060ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ce:	4641      	mov	r1, r8
 80060d0:	008a      	lsls	r2, r1, #2
 80060d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060d6:	f7fa fcc9 	bl	8000a6c <__aeabi_uldivmod>
 80060da:	4602      	mov	r2, r0
 80060dc:	460b      	mov	r3, r1
 80060de:	4b39      	ldr	r3, [pc, #228]	; (80061c4 <UART_SetConfig+0x4e4>)
 80060e0:	fba3 1302 	umull	r1, r3, r3, r2
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	2164      	movs	r1, #100	; 0x64
 80060e8:	fb01 f303 	mul.w	r3, r1, r3
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	3332      	adds	r3, #50	; 0x32
 80060f2:	4a34      	ldr	r2, [pc, #208]	; (80061c4 <UART_SetConfig+0x4e4>)
 80060f4:	fba2 2303 	umull	r2, r3, r2, r3
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060fe:	441c      	add	r4, r3
 8006100:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006104:	2200      	movs	r2, #0
 8006106:	673b      	str	r3, [r7, #112]	; 0x70
 8006108:	677a      	str	r2, [r7, #116]	; 0x74
 800610a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800610e:	4642      	mov	r2, r8
 8006110:	464b      	mov	r3, r9
 8006112:	1891      	adds	r1, r2, r2
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	415b      	adcs	r3, r3
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800611e:	4641      	mov	r1, r8
 8006120:	1851      	adds	r1, r2, r1
 8006122:	6039      	str	r1, [r7, #0]
 8006124:	4649      	mov	r1, r9
 8006126:	414b      	adcs	r3, r1
 8006128:	607b      	str	r3, [r7, #4]
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	f04f 0300 	mov.w	r3, #0
 8006132:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006136:	4659      	mov	r1, fp
 8006138:	00cb      	lsls	r3, r1, #3
 800613a:	4651      	mov	r1, sl
 800613c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006140:	4651      	mov	r1, sl
 8006142:	00ca      	lsls	r2, r1, #3
 8006144:	4610      	mov	r0, r2
 8006146:	4619      	mov	r1, r3
 8006148:	4603      	mov	r3, r0
 800614a:	4642      	mov	r2, r8
 800614c:	189b      	adds	r3, r3, r2
 800614e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006150:	464b      	mov	r3, r9
 8006152:	460a      	mov	r2, r1
 8006154:	eb42 0303 	adc.w	r3, r2, r3
 8006158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800615a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	663b      	str	r3, [r7, #96]	; 0x60
 8006164:	667a      	str	r2, [r7, #100]	; 0x64
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006172:	4649      	mov	r1, r9
 8006174:	008b      	lsls	r3, r1, #2
 8006176:	4641      	mov	r1, r8
 8006178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800617c:	4641      	mov	r1, r8
 800617e:	008a      	lsls	r2, r1, #2
 8006180:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006184:	f7fa fc72 	bl	8000a6c <__aeabi_uldivmod>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4b0d      	ldr	r3, [pc, #52]	; (80061c4 <UART_SetConfig+0x4e4>)
 800618e:	fba3 1302 	umull	r1, r3, r3, r2
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2164      	movs	r1, #100	; 0x64
 8006196:	fb01 f303 	mul.w	r3, r1, r3
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	3332      	adds	r3, #50	; 0x32
 80061a0:	4a08      	ldr	r2, [pc, #32]	; (80061c4 <UART_SetConfig+0x4e4>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	095b      	lsrs	r3, r3, #5
 80061a8:	f003 020f 	and.w	r2, r3, #15
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4422      	add	r2, r4
 80061b4:	609a      	str	r2, [r3, #8]
}
 80061b6:	bf00      	nop
 80061b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061bc:	46bd      	mov	sp, r7
 80061be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061c2:	bf00      	nop
 80061c4:	51eb851f 	.word	0x51eb851f

080061c8 <__errno>:
 80061c8:	4b01      	ldr	r3, [pc, #4]	; (80061d0 <__errno+0x8>)
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	20000010 	.word	0x20000010

080061d4 <__libc_init_array>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	4d0d      	ldr	r5, [pc, #52]	; (800620c <__libc_init_array+0x38>)
 80061d8:	4c0d      	ldr	r4, [pc, #52]	; (8006210 <__libc_init_array+0x3c>)
 80061da:	1b64      	subs	r4, r4, r5
 80061dc:	10a4      	asrs	r4, r4, #2
 80061de:	2600      	movs	r6, #0
 80061e0:	42a6      	cmp	r6, r4
 80061e2:	d109      	bne.n	80061f8 <__libc_init_array+0x24>
 80061e4:	4d0b      	ldr	r5, [pc, #44]	; (8006214 <__libc_init_array+0x40>)
 80061e6:	4c0c      	ldr	r4, [pc, #48]	; (8006218 <__libc_init_array+0x44>)
 80061e8:	f001 fa00 	bl	80075ec <_init>
 80061ec:	1b64      	subs	r4, r4, r5
 80061ee:	10a4      	asrs	r4, r4, #2
 80061f0:	2600      	movs	r6, #0
 80061f2:	42a6      	cmp	r6, r4
 80061f4:	d105      	bne.n	8006202 <__libc_init_array+0x2e>
 80061f6:	bd70      	pop	{r4, r5, r6, pc}
 80061f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fc:	4798      	blx	r3
 80061fe:	3601      	adds	r6, #1
 8006200:	e7ee      	b.n	80061e0 <__libc_init_array+0xc>
 8006202:	f855 3b04 	ldr.w	r3, [r5], #4
 8006206:	4798      	blx	r3
 8006208:	3601      	adds	r6, #1
 800620a:	e7f2      	b.n	80061f2 <__libc_init_array+0x1e>
 800620c:	08007928 	.word	0x08007928
 8006210:	08007928 	.word	0x08007928
 8006214:	08007928 	.word	0x08007928
 8006218:	08007930 	.word	0x08007930

0800621c <memcpy>:
 800621c:	440a      	add	r2, r1
 800621e:	4291      	cmp	r1, r2
 8006220:	f100 33ff 	add.w	r3, r0, #4294967295
 8006224:	d100      	bne.n	8006228 <memcpy+0xc>
 8006226:	4770      	bx	lr
 8006228:	b510      	push	{r4, lr}
 800622a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800622e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006232:	4291      	cmp	r1, r2
 8006234:	d1f9      	bne.n	800622a <memcpy+0xe>
 8006236:	bd10      	pop	{r4, pc}

08006238 <memset>:
 8006238:	4402      	add	r2, r0
 800623a:	4603      	mov	r3, r0
 800623c:	4293      	cmp	r3, r2
 800623e:	d100      	bne.n	8006242 <memset+0xa>
 8006240:	4770      	bx	lr
 8006242:	f803 1b01 	strb.w	r1, [r3], #1
 8006246:	e7f9      	b.n	800623c <memset+0x4>

08006248 <iprintf>:
 8006248:	b40f      	push	{r0, r1, r2, r3}
 800624a:	4b0a      	ldr	r3, [pc, #40]	; (8006274 <iprintf+0x2c>)
 800624c:	b513      	push	{r0, r1, r4, lr}
 800624e:	681c      	ldr	r4, [r3, #0]
 8006250:	b124      	cbz	r4, 800625c <iprintf+0x14>
 8006252:	69a3      	ldr	r3, [r4, #24]
 8006254:	b913      	cbnz	r3, 800625c <iprintf+0x14>
 8006256:	4620      	mov	r0, r4
 8006258:	f000 fa7e 	bl	8006758 <__sinit>
 800625c:	ab05      	add	r3, sp, #20
 800625e:	9a04      	ldr	r2, [sp, #16]
 8006260:	68a1      	ldr	r1, [r4, #8]
 8006262:	9301      	str	r3, [sp, #4]
 8006264:	4620      	mov	r0, r4
 8006266:	f000 fde3 	bl	8006e30 <_vfiprintf_r>
 800626a:	b002      	add	sp, #8
 800626c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006270:	b004      	add	sp, #16
 8006272:	4770      	bx	lr
 8006274:	20000010 	.word	0x20000010

08006278 <_puts_r>:
 8006278:	b570      	push	{r4, r5, r6, lr}
 800627a:	460e      	mov	r6, r1
 800627c:	4605      	mov	r5, r0
 800627e:	b118      	cbz	r0, 8006288 <_puts_r+0x10>
 8006280:	6983      	ldr	r3, [r0, #24]
 8006282:	b90b      	cbnz	r3, 8006288 <_puts_r+0x10>
 8006284:	f000 fa68 	bl	8006758 <__sinit>
 8006288:	69ab      	ldr	r3, [r5, #24]
 800628a:	68ac      	ldr	r4, [r5, #8]
 800628c:	b913      	cbnz	r3, 8006294 <_puts_r+0x1c>
 800628e:	4628      	mov	r0, r5
 8006290:	f000 fa62 	bl	8006758 <__sinit>
 8006294:	4b2c      	ldr	r3, [pc, #176]	; (8006348 <_puts_r+0xd0>)
 8006296:	429c      	cmp	r4, r3
 8006298:	d120      	bne.n	80062dc <_puts_r+0x64>
 800629a:	686c      	ldr	r4, [r5, #4]
 800629c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800629e:	07db      	lsls	r3, r3, #31
 80062a0:	d405      	bmi.n	80062ae <_puts_r+0x36>
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	0598      	lsls	r0, r3, #22
 80062a6:	d402      	bmi.n	80062ae <_puts_r+0x36>
 80062a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062aa:	f000 faf3 	bl	8006894 <__retarget_lock_acquire_recursive>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	0719      	lsls	r1, r3, #28
 80062b2:	d51d      	bpl.n	80062f0 <_puts_r+0x78>
 80062b4:	6923      	ldr	r3, [r4, #16]
 80062b6:	b1db      	cbz	r3, 80062f0 <_puts_r+0x78>
 80062b8:	3e01      	subs	r6, #1
 80062ba:	68a3      	ldr	r3, [r4, #8]
 80062bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062c0:	3b01      	subs	r3, #1
 80062c2:	60a3      	str	r3, [r4, #8]
 80062c4:	bb39      	cbnz	r1, 8006316 <_puts_r+0x9e>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	da38      	bge.n	800633c <_puts_r+0xc4>
 80062ca:	4622      	mov	r2, r4
 80062cc:	210a      	movs	r1, #10
 80062ce:	4628      	mov	r0, r5
 80062d0:	f000 f868 	bl	80063a4 <__swbuf_r>
 80062d4:	3001      	adds	r0, #1
 80062d6:	d011      	beq.n	80062fc <_puts_r+0x84>
 80062d8:	250a      	movs	r5, #10
 80062da:	e011      	b.n	8006300 <_puts_r+0x88>
 80062dc:	4b1b      	ldr	r3, [pc, #108]	; (800634c <_puts_r+0xd4>)
 80062de:	429c      	cmp	r4, r3
 80062e0:	d101      	bne.n	80062e6 <_puts_r+0x6e>
 80062e2:	68ac      	ldr	r4, [r5, #8]
 80062e4:	e7da      	b.n	800629c <_puts_r+0x24>
 80062e6:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <_puts_r+0xd8>)
 80062e8:	429c      	cmp	r4, r3
 80062ea:	bf08      	it	eq
 80062ec:	68ec      	ldreq	r4, [r5, #12]
 80062ee:	e7d5      	b.n	800629c <_puts_r+0x24>
 80062f0:	4621      	mov	r1, r4
 80062f2:	4628      	mov	r0, r5
 80062f4:	f000 f8a8 	bl	8006448 <__swsetup_r>
 80062f8:	2800      	cmp	r0, #0
 80062fa:	d0dd      	beq.n	80062b8 <_puts_r+0x40>
 80062fc:	f04f 35ff 	mov.w	r5, #4294967295
 8006300:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006302:	07da      	lsls	r2, r3, #31
 8006304:	d405      	bmi.n	8006312 <_puts_r+0x9a>
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	059b      	lsls	r3, r3, #22
 800630a:	d402      	bmi.n	8006312 <_puts_r+0x9a>
 800630c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800630e:	f000 fac2 	bl	8006896 <__retarget_lock_release_recursive>
 8006312:	4628      	mov	r0, r5
 8006314:	bd70      	pop	{r4, r5, r6, pc}
 8006316:	2b00      	cmp	r3, #0
 8006318:	da04      	bge.n	8006324 <_puts_r+0xac>
 800631a:	69a2      	ldr	r2, [r4, #24]
 800631c:	429a      	cmp	r2, r3
 800631e:	dc06      	bgt.n	800632e <_puts_r+0xb6>
 8006320:	290a      	cmp	r1, #10
 8006322:	d004      	beq.n	800632e <_puts_r+0xb6>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	6022      	str	r2, [r4, #0]
 800632a:	7019      	strb	r1, [r3, #0]
 800632c:	e7c5      	b.n	80062ba <_puts_r+0x42>
 800632e:	4622      	mov	r2, r4
 8006330:	4628      	mov	r0, r5
 8006332:	f000 f837 	bl	80063a4 <__swbuf_r>
 8006336:	3001      	adds	r0, #1
 8006338:	d1bf      	bne.n	80062ba <_puts_r+0x42>
 800633a:	e7df      	b.n	80062fc <_puts_r+0x84>
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	250a      	movs	r5, #10
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	6022      	str	r2, [r4, #0]
 8006344:	701d      	strb	r5, [r3, #0]
 8006346:	e7db      	b.n	8006300 <_puts_r+0x88>
 8006348:	080078ac 	.word	0x080078ac
 800634c:	080078cc 	.word	0x080078cc
 8006350:	0800788c 	.word	0x0800788c

08006354 <puts>:
 8006354:	4b02      	ldr	r3, [pc, #8]	; (8006360 <puts+0xc>)
 8006356:	4601      	mov	r1, r0
 8006358:	6818      	ldr	r0, [r3, #0]
 800635a:	f7ff bf8d 	b.w	8006278 <_puts_r>
 800635e:	bf00      	nop
 8006360:	20000010 	.word	0x20000010

08006364 <siprintf>:
 8006364:	b40e      	push	{r1, r2, r3}
 8006366:	b500      	push	{lr}
 8006368:	b09c      	sub	sp, #112	; 0x70
 800636a:	ab1d      	add	r3, sp, #116	; 0x74
 800636c:	9002      	str	r0, [sp, #8]
 800636e:	9006      	str	r0, [sp, #24]
 8006370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006374:	4809      	ldr	r0, [pc, #36]	; (800639c <siprintf+0x38>)
 8006376:	9107      	str	r1, [sp, #28]
 8006378:	9104      	str	r1, [sp, #16]
 800637a:	4909      	ldr	r1, [pc, #36]	; (80063a0 <siprintf+0x3c>)
 800637c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006380:	9105      	str	r1, [sp, #20]
 8006382:	6800      	ldr	r0, [r0, #0]
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	a902      	add	r1, sp, #8
 8006388:	f000 fc28 	bl	8006bdc <_svfiprintf_r>
 800638c:	9b02      	ldr	r3, [sp, #8]
 800638e:	2200      	movs	r2, #0
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	b01c      	add	sp, #112	; 0x70
 8006394:	f85d eb04 	ldr.w	lr, [sp], #4
 8006398:	b003      	add	sp, #12
 800639a:	4770      	bx	lr
 800639c:	20000010 	.word	0x20000010
 80063a0:	ffff0208 	.word	0xffff0208

080063a4 <__swbuf_r>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	460e      	mov	r6, r1
 80063a8:	4614      	mov	r4, r2
 80063aa:	4605      	mov	r5, r0
 80063ac:	b118      	cbz	r0, 80063b6 <__swbuf_r+0x12>
 80063ae:	6983      	ldr	r3, [r0, #24]
 80063b0:	b90b      	cbnz	r3, 80063b6 <__swbuf_r+0x12>
 80063b2:	f000 f9d1 	bl	8006758 <__sinit>
 80063b6:	4b21      	ldr	r3, [pc, #132]	; (800643c <__swbuf_r+0x98>)
 80063b8:	429c      	cmp	r4, r3
 80063ba:	d12b      	bne.n	8006414 <__swbuf_r+0x70>
 80063bc:	686c      	ldr	r4, [r5, #4]
 80063be:	69a3      	ldr	r3, [r4, #24]
 80063c0:	60a3      	str	r3, [r4, #8]
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	071a      	lsls	r2, r3, #28
 80063c6:	d52f      	bpl.n	8006428 <__swbuf_r+0x84>
 80063c8:	6923      	ldr	r3, [r4, #16]
 80063ca:	b36b      	cbz	r3, 8006428 <__swbuf_r+0x84>
 80063cc:	6923      	ldr	r3, [r4, #16]
 80063ce:	6820      	ldr	r0, [r4, #0]
 80063d0:	1ac0      	subs	r0, r0, r3
 80063d2:	6963      	ldr	r3, [r4, #20]
 80063d4:	b2f6      	uxtb	r6, r6
 80063d6:	4283      	cmp	r3, r0
 80063d8:	4637      	mov	r7, r6
 80063da:	dc04      	bgt.n	80063e6 <__swbuf_r+0x42>
 80063dc:	4621      	mov	r1, r4
 80063de:	4628      	mov	r0, r5
 80063e0:	f000 f926 	bl	8006630 <_fflush_r>
 80063e4:	bb30      	cbnz	r0, 8006434 <__swbuf_r+0x90>
 80063e6:	68a3      	ldr	r3, [r4, #8]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	60a3      	str	r3, [r4, #8]
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	6022      	str	r2, [r4, #0]
 80063f2:	701e      	strb	r6, [r3, #0]
 80063f4:	6963      	ldr	r3, [r4, #20]
 80063f6:	3001      	adds	r0, #1
 80063f8:	4283      	cmp	r3, r0
 80063fa:	d004      	beq.n	8006406 <__swbuf_r+0x62>
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	07db      	lsls	r3, r3, #31
 8006400:	d506      	bpl.n	8006410 <__swbuf_r+0x6c>
 8006402:	2e0a      	cmp	r6, #10
 8006404:	d104      	bne.n	8006410 <__swbuf_r+0x6c>
 8006406:	4621      	mov	r1, r4
 8006408:	4628      	mov	r0, r5
 800640a:	f000 f911 	bl	8006630 <_fflush_r>
 800640e:	b988      	cbnz	r0, 8006434 <__swbuf_r+0x90>
 8006410:	4638      	mov	r0, r7
 8006412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006414:	4b0a      	ldr	r3, [pc, #40]	; (8006440 <__swbuf_r+0x9c>)
 8006416:	429c      	cmp	r4, r3
 8006418:	d101      	bne.n	800641e <__swbuf_r+0x7a>
 800641a:	68ac      	ldr	r4, [r5, #8]
 800641c:	e7cf      	b.n	80063be <__swbuf_r+0x1a>
 800641e:	4b09      	ldr	r3, [pc, #36]	; (8006444 <__swbuf_r+0xa0>)
 8006420:	429c      	cmp	r4, r3
 8006422:	bf08      	it	eq
 8006424:	68ec      	ldreq	r4, [r5, #12]
 8006426:	e7ca      	b.n	80063be <__swbuf_r+0x1a>
 8006428:	4621      	mov	r1, r4
 800642a:	4628      	mov	r0, r5
 800642c:	f000 f80c 	bl	8006448 <__swsetup_r>
 8006430:	2800      	cmp	r0, #0
 8006432:	d0cb      	beq.n	80063cc <__swbuf_r+0x28>
 8006434:	f04f 37ff 	mov.w	r7, #4294967295
 8006438:	e7ea      	b.n	8006410 <__swbuf_r+0x6c>
 800643a:	bf00      	nop
 800643c:	080078ac 	.word	0x080078ac
 8006440:	080078cc 	.word	0x080078cc
 8006444:	0800788c 	.word	0x0800788c

08006448 <__swsetup_r>:
 8006448:	4b32      	ldr	r3, [pc, #200]	; (8006514 <__swsetup_r+0xcc>)
 800644a:	b570      	push	{r4, r5, r6, lr}
 800644c:	681d      	ldr	r5, [r3, #0]
 800644e:	4606      	mov	r6, r0
 8006450:	460c      	mov	r4, r1
 8006452:	b125      	cbz	r5, 800645e <__swsetup_r+0x16>
 8006454:	69ab      	ldr	r3, [r5, #24]
 8006456:	b913      	cbnz	r3, 800645e <__swsetup_r+0x16>
 8006458:	4628      	mov	r0, r5
 800645a:	f000 f97d 	bl	8006758 <__sinit>
 800645e:	4b2e      	ldr	r3, [pc, #184]	; (8006518 <__swsetup_r+0xd0>)
 8006460:	429c      	cmp	r4, r3
 8006462:	d10f      	bne.n	8006484 <__swsetup_r+0x3c>
 8006464:	686c      	ldr	r4, [r5, #4]
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800646c:	0719      	lsls	r1, r3, #28
 800646e:	d42c      	bmi.n	80064ca <__swsetup_r+0x82>
 8006470:	06dd      	lsls	r5, r3, #27
 8006472:	d411      	bmi.n	8006498 <__swsetup_r+0x50>
 8006474:	2309      	movs	r3, #9
 8006476:	6033      	str	r3, [r6, #0]
 8006478:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800647c:	81a3      	strh	r3, [r4, #12]
 800647e:	f04f 30ff 	mov.w	r0, #4294967295
 8006482:	e03e      	b.n	8006502 <__swsetup_r+0xba>
 8006484:	4b25      	ldr	r3, [pc, #148]	; (800651c <__swsetup_r+0xd4>)
 8006486:	429c      	cmp	r4, r3
 8006488:	d101      	bne.n	800648e <__swsetup_r+0x46>
 800648a:	68ac      	ldr	r4, [r5, #8]
 800648c:	e7eb      	b.n	8006466 <__swsetup_r+0x1e>
 800648e:	4b24      	ldr	r3, [pc, #144]	; (8006520 <__swsetup_r+0xd8>)
 8006490:	429c      	cmp	r4, r3
 8006492:	bf08      	it	eq
 8006494:	68ec      	ldreq	r4, [r5, #12]
 8006496:	e7e6      	b.n	8006466 <__swsetup_r+0x1e>
 8006498:	0758      	lsls	r0, r3, #29
 800649a:	d512      	bpl.n	80064c2 <__swsetup_r+0x7a>
 800649c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800649e:	b141      	cbz	r1, 80064b2 <__swsetup_r+0x6a>
 80064a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064a4:	4299      	cmp	r1, r3
 80064a6:	d002      	beq.n	80064ae <__swsetup_r+0x66>
 80064a8:	4630      	mov	r0, r6
 80064aa:	f000 fa5b 	bl	8006964 <_free_r>
 80064ae:	2300      	movs	r3, #0
 80064b0:	6363      	str	r3, [r4, #52]	; 0x34
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064b8:	81a3      	strh	r3, [r4, #12]
 80064ba:	2300      	movs	r3, #0
 80064bc:	6063      	str	r3, [r4, #4]
 80064be:	6923      	ldr	r3, [r4, #16]
 80064c0:	6023      	str	r3, [r4, #0]
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	f043 0308 	orr.w	r3, r3, #8
 80064c8:	81a3      	strh	r3, [r4, #12]
 80064ca:	6923      	ldr	r3, [r4, #16]
 80064cc:	b94b      	cbnz	r3, 80064e2 <__swsetup_r+0x9a>
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064d8:	d003      	beq.n	80064e2 <__swsetup_r+0x9a>
 80064da:	4621      	mov	r1, r4
 80064dc:	4630      	mov	r0, r6
 80064de:	f000 fa01 	bl	80068e4 <__smakebuf_r>
 80064e2:	89a0      	ldrh	r0, [r4, #12]
 80064e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064e8:	f010 0301 	ands.w	r3, r0, #1
 80064ec:	d00a      	beq.n	8006504 <__swsetup_r+0xbc>
 80064ee:	2300      	movs	r3, #0
 80064f0:	60a3      	str	r3, [r4, #8]
 80064f2:	6963      	ldr	r3, [r4, #20]
 80064f4:	425b      	negs	r3, r3
 80064f6:	61a3      	str	r3, [r4, #24]
 80064f8:	6923      	ldr	r3, [r4, #16]
 80064fa:	b943      	cbnz	r3, 800650e <__swsetup_r+0xc6>
 80064fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006500:	d1ba      	bne.n	8006478 <__swsetup_r+0x30>
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	0781      	lsls	r1, r0, #30
 8006506:	bf58      	it	pl
 8006508:	6963      	ldrpl	r3, [r4, #20]
 800650a:	60a3      	str	r3, [r4, #8]
 800650c:	e7f4      	b.n	80064f8 <__swsetup_r+0xb0>
 800650e:	2000      	movs	r0, #0
 8006510:	e7f7      	b.n	8006502 <__swsetup_r+0xba>
 8006512:	bf00      	nop
 8006514:	20000010 	.word	0x20000010
 8006518:	080078ac 	.word	0x080078ac
 800651c:	080078cc 	.word	0x080078cc
 8006520:	0800788c 	.word	0x0800788c

08006524 <__sflush_r>:
 8006524:	898a      	ldrh	r2, [r1, #12]
 8006526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800652a:	4605      	mov	r5, r0
 800652c:	0710      	lsls	r0, r2, #28
 800652e:	460c      	mov	r4, r1
 8006530:	d458      	bmi.n	80065e4 <__sflush_r+0xc0>
 8006532:	684b      	ldr	r3, [r1, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	dc05      	bgt.n	8006544 <__sflush_r+0x20>
 8006538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	dc02      	bgt.n	8006544 <__sflush_r+0x20>
 800653e:	2000      	movs	r0, #0
 8006540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006546:	2e00      	cmp	r6, #0
 8006548:	d0f9      	beq.n	800653e <__sflush_r+0x1a>
 800654a:	2300      	movs	r3, #0
 800654c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006550:	682f      	ldr	r7, [r5, #0]
 8006552:	602b      	str	r3, [r5, #0]
 8006554:	d032      	beq.n	80065bc <__sflush_r+0x98>
 8006556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	075a      	lsls	r2, r3, #29
 800655c:	d505      	bpl.n	800656a <__sflush_r+0x46>
 800655e:	6863      	ldr	r3, [r4, #4]
 8006560:	1ac0      	subs	r0, r0, r3
 8006562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006564:	b10b      	cbz	r3, 800656a <__sflush_r+0x46>
 8006566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006568:	1ac0      	subs	r0, r0, r3
 800656a:	2300      	movs	r3, #0
 800656c:	4602      	mov	r2, r0
 800656e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006570:	6a21      	ldr	r1, [r4, #32]
 8006572:	4628      	mov	r0, r5
 8006574:	47b0      	blx	r6
 8006576:	1c43      	adds	r3, r0, #1
 8006578:	89a3      	ldrh	r3, [r4, #12]
 800657a:	d106      	bne.n	800658a <__sflush_r+0x66>
 800657c:	6829      	ldr	r1, [r5, #0]
 800657e:	291d      	cmp	r1, #29
 8006580:	d82c      	bhi.n	80065dc <__sflush_r+0xb8>
 8006582:	4a2a      	ldr	r2, [pc, #168]	; (800662c <__sflush_r+0x108>)
 8006584:	40ca      	lsrs	r2, r1
 8006586:	07d6      	lsls	r6, r2, #31
 8006588:	d528      	bpl.n	80065dc <__sflush_r+0xb8>
 800658a:	2200      	movs	r2, #0
 800658c:	6062      	str	r2, [r4, #4]
 800658e:	04d9      	lsls	r1, r3, #19
 8006590:	6922      	ldr	r2, [r4, #16]
 8006592:	6022      	str	r2, [r4, #0]
 8006594:	d504      	bpl.n	80065a0 <__sflush_r+0x7c>
 8006596:	1c42      	adds	r2, r0, #1
 8006598:	d101      	bne.n	800659e <__sflush_r+0x7a>
 800659a:	682b      	ldr	r3, [r5, #0]
 800659c:	b903      	cbnz	r3, 80065a0 <__sflush_r+0x7c>
 800659e:	6560      	str	r0, [r4, #84]	; 0x54
 80065a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065a2:	602f      	str	r7, [r5, #0]
 80065a4:	2900      	cmp	r1, #0
 80065a6:	d0ca      	beq.n	800653e <__sflush_r+0x1a>
 80065a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065ac:	4299      	cmp	r1, r3
 80065ae:	d002      	beq.n	80065b6 <__sflush_r+0x92>
 80065b0:	4628      	mov	r0, r5
 80065b2:	f000 f9d7 	bl	8006964 <_free_r>
 80065b6:	2000      	movs	r0, #0
 80065b8:	6360      	str	r0, [r4, #52]	; 0x34
 80065ba:	e7c1      	b.n	8006540 <__sflush_r+0x1c>
 80065bc:	6a21      	ldr	r1, [r4, #32]
 80065be:	2301      	movs	r3, #1
 80065c0:	4628      	mov	r0, r5
 80065c2:	47b0      	blx	r6
 80065c4:	1c41      	adds	r1, r0, #1
 80065c6:	d1c7      	bne.n	8006558 <__sflush_r+0x34>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0c4      	beq.n	8006558 <__sflush_r+0x34>
 80065ce:	2b1d      	cmp	r3, #29
 80065d0:	d001      	beq.n	80065d6 <__sflush_r+0xb2>
 80065d2:	2b16      	cmp	r3, #22
 80065d4:	d101      	bne.n	80065da <__sflush_r+0xb6>
 80065d6:	602f      	str	r7, [r5, #0]
 80065d8:	e7b1      	b.n	800653e <__sflush_r+0x1a>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065e0:	81a3      	strh	r3, [r4, #12]
 80065e2:	e7ad      	b.n	8006540 <__sflush_r+0x1c>
 80065e4:	690f      	ldr	r7, [r1, #16]
 80065e6:	2f00      	cmp	r7, #0
 80065e8:	d0a9      	beq.n	800653e <__sflush_r+0x1a>
 80065ea:	0793      	lsls	r3, r2, #30
 80065ec:	680e      	ldr	r6, [r1, #0]
 80065ee:	bf08      	it	eq
 80065f0:	694b      	ldreq	r3, [r1, #20]
 80065f2:	600f      	str	r7, [r1, #0]
 80065f4:	bf18      	it	ne
 80065f6:	2300      	movne	r3, #0
 80065f8:	eba6 0807 	sub.w	r8, r6, r7
 80065fc:	608b      	str	r3, [r1, #8]
 80065fe:	f1b8 0f00 	cmp.w	r8, #0
 8006602:	dd9c      	ble.n	800653e <__sflush_r+0x1a>
 8006604:	6a21      	ldr	r1, [r4, #32]
 8006606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006608:	4643      	mov	r3, r8
 800660a:	463a      	mov	r2, r7
 800660c:	4628      	mov	r0, r5
 800660e:	47b0      	blx	r6
 8006610:	2800      	cmp	r0, #0
 8006612:	dc06      	bgt.n	8006622 <__sflush_r+0xfe>
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800661a:	81a3      	strh	r3, [r4, #12]
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	e78e      	b.n	8006540 <__sflush_r+0x1c>
 8006622:	4407      	add	r7, r0
 8006624:	eba8 0800 	sub.w	r8, r8, r0
 8006628:	e7e9      	b.n	80065fe <__sflush_r+0xda>
 800662a:	bf00      	nop
 800662c:	20400001 	.word	0x20400001

08006630 <_fflush_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	690b      	ldr	r3, [r1, #16]
 8006634:	4605      	mov	r5, r0
 8006636:	460c      	mov	r4, r1
 8006638:	b913      	cbnz	r3, 8006640 <_fflush_r+0x10>
 800663a:	2500      	movs	r5, #0
 800663c:	4628      	mov	r0, r5
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	b118      	cbz	r0, 800664a <_fflush_r+0x1a>
 8006642:	6983      	ldr	r3, [r0, #24]
 8006644:	b90b      	cbnz	r3, 800664a <_fflush_r+0x1a>
 8006646:	f000 f887 	bl	8006758 <__sinit>
 800664a:	4b14      	ldr	r3, [pc, #80]	; (800669c <_fflush_r+0x6c>)
 800664c:	429c      	cmp	r4, r3
 800664e:	d11b      	bne.n	8006688 <_fflush_r+0x58>
 8006650:	686c      	ldr	r4, [r5, #4]
 8006652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d0ef      	beq.n	800663a <_fflush_r+0xa>
 800665a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800665c:	07d0      	lsls	r0, r2, #31
 800665e:	d404      	bmi.n	800666a <_fflush_r+0x3a>
 8006660:	0599      	lsls	r1, r3, #22
 8006662:	d402      	bmi.n	800666a <_fflush_r+0x3a>
 8006664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006666:	f000 f915 	bl	8006894 <__retarget_lock_acquire_recursive>
 800666a:	4628      	mov	r0, r5
 800666c:	4621      	mov	r1, r4
 800666e:	f7ff ff59 	bl	8006524 <__sflush_r>
 8006672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006674:	07da      	lsls	r2, r3, #31
 8006676:	4605      	mov	r5, r0
 8006678:	d4e0      	bmi.n	800663c <_fflush_r+0xc>
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	059b      	lsls	r3, r3, #22
 800667e:	d4dd      	bmi.n	800663c <_fflush_r+0xc>
 8006680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006682:	f000 f908 	bl	8006896 <__retarget_lock_release_recursive>
 8006686:	e7d9      	b.n	800663c <_fflush_r+0xc>
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <_fflush_r+0x70>)
 800668a:	429c      	cmp	r4, r3
 800668c:	d101      	bne.n	8006692 <_fflush_r+0x62>
 800668e:	68ac      	ldr	r4, [r5, #8]
 8006690:	e7df      	b.n	8006652 <_fflush_r+0x22>
 8006692:	4b04      	ldr	r3, [pc, #16]	; (80066a4 <_fflush_r+0x74>)
 8006694:	429c      	cmp	r4, r3
 8006696:	bf08      	it	eq
 8006698:	68ec      	ldreq	r4, [r5, #12]
 800669a:	e7da      	b.n	8006652 <_fflush_r+0x22>
 800669c:	080078ac 	.word	0x080078ac
 80066a0:	080078cc 	.word	0x080078cc
 80066a4:	0800788c 	.word	0x0800788c

080066a8 <std>:
 80066a8:	2300      	movs	r3, #0
 80066aa:	b510      	push	{r4, lr}
 80066ac:	4604      	mov	r4, r0
 80066ae:	e9c0 3300 	strd	r3, r3, [r0]
 80066b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066b6:	6083      	str	r3, [r0, #8]
 80066b8:	8181      	strh	r1, [r0, #12]
 80066ba:	6643      	str	r3, [r0, #100]	; 0x64
 80066bc:	81c2      	strh	r2, [r0, #14]
 80066be:	6183      	str	r3, [r0, #24]
 80066c0:	4619      	mov	r1, r3
 80066c2:	2208      	movs	r2, #8
 80066c4:	305c      	adds	r0, #92	; 0x5c
 80066c6:	f7ff fdb7 	bl	8006238 <memset>
 80066ca:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <std+0x38>)
 80066cc:	6263      	str	r3, [r4, #36]	; 0x24
 80066ce:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <std+0x3c>)
 80066d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80066d2:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <std+0x40>)
 80066d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066d6:	4b05      	ldr	r3, [pc, #20]	; (80066ec <std+0x44>)
 80066d8:	6224      	str	r4, [r4, #32]
 80066da:	6323      	str	r3, [r4, #48]	; 0x30
 80066dc:	bd10      	pop	{r4, pc}
 80066de:	bf00      	nop
 80066e0:	080073d9 	.word	0x080073d9
 80066e4:	080073fb 	.word	0x080073fb
 80066e8:	08007433 	.word	0x08007433
 80066ec:	08007457 	.word	0x08007457

080066f0 <_cleanup_r>:
 80066f0:	4901      	ldr	r1, [pc, #4]	; (80066f8 <_cleanup_r+0x8>)
 80066f2:	f000 b8af 	b.w	8006854 <_fwalk_reent>
 80066f6:	bf00      	nop
 80066f8:	08006631 	.word	0x08006631

080066fc <__sfmoreglue>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	2268      	movs	r2, #104	; 0x68
 8006700:	1e4d      	subs	r5, r1, #1
 8006702:	4355      	muls	r5, r2
 8006704:	460e      	mov	r6, r1
 8006706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800670a:	f000 f997 	bl	8006a3c <_malloc_r>
 800670e:	4604      	mov	r4, r0
 8006710:	b140      	cbz	r0, 8006724 <__sfmoreglue+0x28>
 8006712:	2100      	movs	r1, #0
 8006714:	e9c0 1600 	strd	r1, r6, [r0]
 8006718:	300c      	adds	r0, #12
 800671a:	60a0      	str	r0, [r4, #8]
 800671c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006720:	f7ff fd8a 	bl	8006238 <memset>
 8006724:	4620      	mov	r0, r4
 8006726:	bd70      	pop	{r4, r5, r6, pc}

08006728 <__sfp_lock_acquire>:
 8006728:	4801      	ldr	r0, [pc, #4]	; (8006730 <__sfp_lock_acquire+0x8>)
 800672a:	f000 b8b3 	b.w	8006894 <__retarget_lock_acquire_recursive>
 800672e:	bf00      	nop
 8006730:	200004e5 	.word	0x200004e5

08006734 <__sfp_lock_release>:
 8006734:	4801      	ldr	r0, [pc, #4]	; (800673c <__sfp_lock_release+0x8>)
 8006736:	f000 b8ae 	b.w	8006896 <__retarget_lock_release_recursive>
 800673a:	bf00      	nop
 800673c:	200004e5 	.word	0x200004e5

08006740 <__sinit_lock_acquire>:
 8006740:	4801      	ldr	r0, [pc, #4]	; (8006748 <__sinit_lock_acquire+0x8>)
 8006742:	f000 b8a7 	b.w	8006894 <__retarget_lock_acquire_recursive>
 8006746:	bf00      	nop
 8006748:	200004e6 	.word	0x200004e6

0800674c <__sinit_lock_release>:
 800674c:	4801      	ldr	r0, [pc, #4]	; (8006754 <__sinit_lock_release+0x8>)
 800674e:	f000 b8a2 	b.w	8006896 <__retarget_lock_release_recursive>
 8006752:	bf00      	nop
 8006754:	200004e6 	.word	0x200004e6

08006758 <__sinit>:
 8006758:	b510      	push	{r4, lr}
 800675a:	4604      	mov	r4, r0
 800675c:	f7ff fff0 	bl	8006740 <__sinit_lock_acquire>
 8006760:	69a3      	ldr	r3, [r4, #24]
 8006762:	b11b      	cbz	r3, 800676c <__sinit+0x14>
 8006764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006768:	f7ff bff0 	b.w	800674c <__sinit_lock_release>
 800676c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006770:	6523      	str	r3, [r4, #80]	; 0x50
 8006772:	4b13      	ldr	r3, [pc, #76]	; (80067c0 <__sinit+0x68>)
 8006774:	4a13      	ldr	r2, [pc, #76]	; (80067c4 <__sinit+0x6c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	62a2      	str	r2, [r4, #40]	; 0x28
 800677a:	42a3      	cmp	r3, r4
 800677c:	bf04      	itt	eq
 800677e:	2301      	moveq	r3, #1
 8006780:	61a3      	streq	r3, [r4, #24]
 8006782:	4620      	mov	r0, r4
 8006784:	f000 f820 	bl	80067c8 <__sfp>
 8006788:	6060      	str	r0, [r4, #4]
 800678a:	4620      	mov	r0, r4
 800678c:	f000 f81c 	bl	80067c8 <__sfp>
 8006790:	60a0      	str	r0, [r4, #8]
 8006792:	4620      	mov	r0, r4
 8006794:	f000 f818 	bl	80067c8 <__sfp>
 8006798:	2200      	movs	r2, #0
 800679a:	60e0      	str	r0, [r4, #12]
 800679c:	2104      	movs	r1, #4
 800679e:	6860      	ldr	r0, [r4, #4]
 80067a0:	f7ff ff82 	bl	80066a8 <std>
 80067a4:	68a0      	ldr	r0, [r4, #8]
 80067a6:	2201      	movs	r2, #1
 80067a8:	2109      	movs	r1, #9
 80067aa:	f7ff ff7d 	bl	80066a8 <std>
 80067ae:	68e0      	ldr	r0, [r4, #12]
 80067b0:	2202      	movs	r2, #2
 80067b2:	2112      	movs	r1, #18
 80067b4:	f7ff ff78 	bl	80066a8 <std>
 80067b8:	2301      	movs	r3, #1
 80067ba:	61a3      	str	r3, [r4, #24]
 80067bc:	e7d2      	b.n	8006764 <__sinit+0xc>
 80067be:	bf00      	nop
 80067c0:	08007888 	.word	0x08007888
 80067c4:	080066f1 	.word	0x080066f1

080067c8 <__sfp>:
 80067c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ca:	4607      	mov	r7, r0
 80067cc:	f7ff ffac 	bl	8006728 <__sfp_lock_acquire>
 80067d0:	4b1e      	ldr	r3, [pc, #120]	; (800684c <__sfp+0x84>)
 80067d2:	681e      	ldr	r6, [r3, #0]
 80067d4:	69b3      	ldr	r3, [r6, #24]
 80067d6:	b913      	cbnz	r3, 80067de <__sfp+0x16>
 80067d8:	4630      	mov	r0, r6
 80067da:	f7ff ffbd 	bl	8006758 <__sinit>
 80067de:	3648      	adds	r6, #72	; 0x48
 80067e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	d503      	bpl.n	80067f0 <__sfp+0x28>
 80067e8:	6833      	ldr	r3, [r6, #0]
 80067ea:	b30b      	cbz	r3, 8006830 <__sfp+0x68>
 80067ec:	6836      	ldr	r6, [r6, #0]
 80067ee:	e7f7      	b.n	80067e0 <__sfp+0x18>
 80067f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067f4:	b9d5      	cbnz	r5, 800682c <__sfp+0x64>
 80067f6:	4b16      	ldr	r3, [pc, #88]	; (8006850 <__sfp+0x88>)
 80067f8:	60e3      	str	r3, [r4, #12]
 80067fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067fe:	6665      	str	r5, [r4, #100]	; 0x64
 8006800:	f000 f847 	bl	8006892 <__retarget_lock_init_recursive>
 8006804:	f7ff ff96 	bl	8006734 <__sfp_lock_release>
 8006808:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800680c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006810:	6025      	str	r5, [r4, #0]
 8006812:	61a5      	str	r5, [r4, #24]
 8006814:	2208      	movs	r2, #8
 8006816:	4629      	mov	r1, r5
 8006818:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800681c:	f7ff fd0c 	bl	8006238 <memset>
 8006820:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006824:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006828:	4620      	mov	r0, r4
 800682a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800682c:	3468      	adds	r4, #104	; 0x68
 800682e:	e7d9      	b.n	80067e4 <__sfp+0x1c>
 8006830:	2104      	movs	r1, #4
 8006832:	4638      	mov	r0, r7
 8006834:	f7ff ff62 	bl	80066fc <__sfmoreglue>
 8006838:	4604      	mov	r4, r0
 800683a:	6030      	str	r0, [r6, #0]
 800683c:	2800      	cmp	r0, #0
 800683e:	d1d5      	bne.n	80067ec <__sfp+0x24>
 8006840:	f7ff ff78 	bl	8006734 <__sfp_lock_release>
 8006844:	230c      	movs	r3, #12
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	e7ee      	b.n	8006828 <__sfp+0x60>
 800684a:	bf00      	nop
 800684c:	08007888 	.word	0x08007888
 8006850:	ffff0001 	.word	0xffff0001

08006854 <_fwalk_reent>:
 8006854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006858:	4606      	mov	r6, r0
 800685a:	4688      	mov	r8, r1
 800685c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006860:	2700      	movs	r7, #0
 8006862:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006866:	f1b9 0901 	subs.w	r9, r9, #1
 800686a:	d505      	bpl.n	8006878 <_fwalk_reent+0x24>
 800686c:	6824      	ldr	r4, [r4, #0]
 800686e:	2c00      	cmp	r4, #0
 8006870:	d1f7      	bne.n	8006862 <_fwalk_reent+0xe>
 8006872:	4638      	mov	r0, r7
 8006874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006878:	89ab      	ldrh	r3, [r5, #12]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d907      	bls.n	800688e <_fwalk_reent+0x3a>
 800687e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006882:	3301      	adds	r3, #1
 8006884:	d003      	beq.n	800688e <_fwalk_reent+0x3a>
 8006886:	4629      	mov	r1, r5
 8006888:	4630      	mov	r0, r6
 800688a:	47c0      	blx	r8
 800688c:	4307      	orrs	r7, r0
 800688e:	3568      	adds	r5, #104	; 0x68
 8006890:	e7e9      	b.n	8006866 <_fwalk_reent+0x12>

08006892 <__retarget_lock_init_recursive>:
 8006892:	4770      	bx	lr

08006894 <__retarget_lock_acquire_recursive>:
 8006894:	4770      	bx	lr

08006896 <__retarget_lock_release_recursive>:
 8006896:	4770      	bx	lr

08006898 <__swhatbuf_r>:
 8006898:	b570      	push	{r4, r5, r6, lr}
 800689a:	460e      	mov	r6, r1
 800689c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068a0:	2900      	cmp	r1, #0
 80068a2:	b096      	sub	sp, #88	; 0x58
 80068a4:	4614      	mov	r4, r2
 80068a6:	461d      	mov	r5, r3
 80068a8:	da08      	bge.n	80068bc <__swhatbuf_r+0x24>
 80068aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	602a      	str	r2, [r5, #0]
 80068b2:	061a      	lsls	r2, r3, #24
 80068b4:	d410      	bmi.n	80068d8 <__swhatbuf_r+0x40>
 80068b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ba:	e00e      	b.n	80068da <__swhatbuf_r+0x42>
 80068bc:	466a      	mov	r2, sp
 80068be:	f000 fdf1 	bl	80074a4 <_fstat_r>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	dbf1      	blt.n	80068aa <__swhatbuf_r+0x12>
 80068c6:	9a01      	ldr	r2, [sp, #4]
 80068c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068d0:	425a      	negs	r2, r3
 80068d2:	415a      	adcs	r2, r3
 80068d4:	602a      	str	r2, [r5, #0]
 80068d6:	e7ee      	b.n	80068b6 <__swhatbuf_r+0x1e>
 80068d8:	2340      	movs	r3, #64	; 0x40
 80068da:	2000      	movs	r0, #0
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	b016      	add	sp, #88	; 0x58
 80068e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080068e4 <__smakebuf_r>:
 80068e4:	898b      	ldrh	r3, [r1, #12]
 80068e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068e8:	079d      	lsls	r5, r3, #30
 80068ea:	4606      	mov	r6, r0
 80068ec:	460c      	mov	r4, r1
 80068ee:	d507      	bpl.n	8006900 <__smakebuf_r+0x1c>
 80068f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	6123      	str	r3, [r4, #16]
 80068f8:	2301      	movs	r3, #1
 80068fa:	6163      	str	r3, [r4, #20]
 80068fc:	b002      	add	sp, #8
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	ab01      	add	r3, sp, #4
 8006902:	466a      	mov	r2, sp
 8006904:	f7ff ffc8 	bl	8006898 <__swhatbuf_r>
 8006908:	9900      	ldr	r1, [sp, #0]
 800690a:	4605      	mov	r5, r0
 800690c:	4630      	mov	r0, r6
 800690e:	f000 f895 	bl	8006a3c <_malloc_r>
 8006912:	b948      	cbnz	r0, 8006928 <__smakebuf_r+0x44>
 8006914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006918:	059a      	lsls	r2, r3, #22
 800691a:	d4ef      	bmi.n	80068fc <__smakebuf_r+0x18>
 800691c:	f023 0303 	bic.w	r3, r3, #3
 8006920:	f043 0302 	orr.w	r3, r3, #2
 8006924:	81a3      	strh	r3, [r4, #12]
 8006926:	e7e3      	b.n	80068f0 <__smakebuf_r+0xc>
 8006928:	4b0d      	ldr	r3, [pc, #52]	; (8006960 <__smakebuf_r+0x7c>)
 800692a:	62b3      	str	r3, [r6, #40]	; 0x28
 800692c:	89a3      	ldrh	r3, [r4, #12]
 800692e:	6020      	str	r0, [r4, #0]
 8006930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006934:	81a3      	strh	r3, [r4, #12]
 8006936:	9b00      	ldr	r3, [sp, #0]
 8006938:	6163      	str	r3, [r4, #20]
 800693a:	9b01      	ldr	r3, [sp, #4]
 800693c:	6120      	str	r0, [r4, #16]
 800693e:	b15b      	cbz	r3, 8006958 <__smakebuf_r+0x74>
 8006940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006944:	4630      	mov	r0, r6
 8006946:	f000 fdbf 	bl	80074c8 <_isatty_r>
 800694a:	b128      	cbz	r0, 8006958 <__smakebuf_r+0x74>
 800694c:	89a3      	ldrh	r3, [r4, #12]
 800694e:	f023 0303 	bic.w	r3, r3, #3
 8006952:	f043 0301 	orr.w	r3, r3, #1
 8006956:	81a3      	strh	r3, [r4, #12]
 8006958:	89a0      	ldrh	r0, [r4, #12]
 800695a:	4305      	orrs	r5, r0
 800695c:	81a5      	strh	r5, [r4, #12]
 800695e:	e7cd      	b.n	80068fc <__smakebuf_r+0x18>
 8006960:	080066f1 	.word	0x080066f1

08006964 <_free_r>:
 8006964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006966:	2900      	cmp	r1, #0
 8006968:	d044      	beq.n	80069f4 <_free_r+0x90>
 800696a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800696e:	9001      	str	r0, [sp, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f1a1 0404 	sub.w	r4, r1, #4
 8006976:	bfb8      	it	lt
 8006978:	18e4      	addlt	r4, r4, r3
 800697a:	f000 fde1 	bl	8007540 <__malloc_lock>
 800697e:	4a1e      	ldr	r2, [pc, #120]	; (80069f8 <_free_r+0x94>)
 8006980:	9801      	ldr	r0, [sp, #4]
 8006982:	6813      	ldr	r3, [r2, #0]
 8006984:	b933      	cbnz	r3, 8006994 <_free_r+0x30>
 8006986:	6063      	str	r3, [r4, #4]
 8006988:	6014      	str	r4, [r2, #0]
 800698a:	b003      	add	sp, #12
 800698c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006990:	f000 bddc 	b.w	800754c <__malloc_unlock>
 8006994:	42a3      	cmp	r3, r4
 8006996:	d908      	bls.n	80069aa <_free_r+0x46>
 8006998:	6825      	ldr	r5, [r4, #0]
 800699a:	1961      	adds	r1, r4, r5
 800699c:	428b      	cmp	r3, r1
 800699e:	bf01      	itttt	eq
 80069a0:	6819      	ldreq	r1, [r3, #0]
 80069a2:	685b      	ldreq	r3, [r3, #4]
 80069a4:	1949      	addeq	r1, r1, r5
 80069a6:	6021      	streq	r1, [r4, #0]
 80069a8:	e7ed      	b.n	8006986 <_free_r+0x22>
 80069aa:	461a      	mov	r2, r3
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	b10b      	cbz	r3, 80069b4 <_free_r+0x50>
 80069b0:	42a3      	cmp	r3, r4
 80069b2:	d9fa      	bls.n	80069aa <_free_r+0x46>
 80069b4:	6811      	ldr	r1, [r2, #0]
 80069b6:	1855      	adds	r5, r2, r1
 80069b8:	42a5      	cmp	r5, r4
 80069ba:	d10b      	bne.n	80069d4 <_free_r+0x70>
 80069bc:	6824      	ldr	r4, [r4, #0]
 80069be:	4421      	add	r1, r4
 80069c0:	1854      	adds	r4, r2, r1
 80069c2:	42a3      	cmp	r3, r4
 80069c4:	6011      	str	r1, [r2, #0]
 80069c6:	d1e0      	bne.n	800698a <_free_r+0x26>
 80069c8:	681c      	ldr	r4, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	6053      	str	r3, [r2, #4]
 80069ce:	4421      	add	r1, r4
 80069d0:	6011      	str	r1, [r2, #0]
 80069d2:	e7da      	b.n	800698a <_free_r+0x26>
 80069d4:	d902      	bls.n	80069dc <_free_r+0x78>
 80069d6:	230c      	movs	r3, #12
 80069d8:	6003      	str	r3, [r0, #0]
 80069da:	e7d6      	b.n	800698a <_free_r+0x26>
 80069dc:	6825      	ldr	r5, [r4, #0]
 80069de:	1961      	adds	r1, r4, r5
 80069e0:	428b      	cmp	r3, r1
 80069e2:	bf04      	itt	eq
 80069e4:	6819      	ldreq	r1, [r3, #0]
 80069e6:	685b      	ldreq	r3, [r3, #4]
 80069e8:	6063      	str	r3, [r4, #4]
 80069ea:	bf04      	itt	eq
 80069ec:	1949      	addeq	r1, r1, r5
 80069ee:	6021      	streq	r1, [r4, #0]
 80069f0:	6054      	str	r4, [r2, #4]
 80069f2:	e7ca      	b.n	800698a <_free_r+0x26>
 80069f4:	b003      	add	sp, #12
 80069f6:	bd30      	pop	{r4, r5, pc}
 80069f8:	200004e8 	.word	0x200004e8

080069fc <sbrk_aligned>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	4e0e      	ldr	r6, [pc, #56]	; (8006a38 <sbrk_aligned+0x3c>)
 8006a00:	460c      	mov	r4, r1
 8006a02:	6831      	ldr	r1, [r6, #0]
 8006a04:	4605      	mov	r5, r0
 8006a06:	b911      	cbnz	r1, 8006a0e <sbrk_aligned+0x12>
 8006a08:	f000 fcd6 	bl	80073b8 <_sbrk_r>
 8006a0c:	6030      	str	r0, [r6, #0]
 8006a0e:	4621      	mov	r1, r4
 8006a10:	4628      	mov	r0, r5
 8006a12:	f000 fcd1 	bl	80073b8 <_sbrk_r>
 8006a16:	1c43      	adds	r3, r0, #1
 8006a18:	d00a      	beq.n	8006a30 <sbrk_aligned+0x34>
 8006a1a:	1cc4      	adds	r4, r0, #3
 8006a1c:	f024 0403 	bic.w	r4, r4, #3
 8006a20:	42a0      	cmp	r0, r4
 8006a22:	d007      	beq.n	8006a34 <sbrk_aligned+0x38>
 8006a24:	1a21      	subs	r1, r4, r0
 8006a26:	4628      	mov	r0, r5
 8006a28:	f000 fcc6 	bl	80073b8 <_sbrk_r>
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d101      	bne.n	8006a34 <sbrk_aligned+0x38>
 8006a30:	f04f 34ff 	mov.w	r4, #4294967295
 8006a34:	4620      	mov	r0, r4
 8006a36:	bd70      	pop	{r4, r5, r6, pc}
 8006a38:	200004ec 	.word	0x200004ec

08006a3c <_malloc_r>:
 8006a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a40:	1ccd      	adds	r5, r1, #3
 8006a42:	f025 0503 	bic.w	r5, r5, #3
 8006a46:	3508      	adds	r5, #8
 8006a48:	2d0c      	cmp	r5, #12
 8006a4a:	bf38      	it	cc
 8006a4c:	250c      	movcc	r5, #12
 8006a4e:	2d00      	cmp	r5, #0
 8006a50:	4607      	mov	r7, r0
 8006a52:	db01      	blt.n	8006a58 <_malloc_r+0x1c>
 8006a54:	42a9      	cmp	r1, r5
 8006a56:	d905      	bls.n	8006a64 <_malloc_r+0x28>
 8006a58:	230c      	movs	r3, #12
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	2600      	movs	r6, #0
 8006a5e:	4630      	mov	r0, r6
 8006a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a64:	4e2e      	ldr	r6, [pc, #184]	; (8006b20 <_malloc_r+0xe4>)
 8006a66:	f000 fd6b 	bl	8007540 <__malloc_lock>
 8006a6a:	6833      	ldr	r3, [r6, #0]
 8006a6c:	461c      	mov	r4, r3
 8006a6e:	bb34      	cbnz	r4, 8006abe <_malloc_r+0x82>
 8006a70:	4629      	mov	r1, r5
 8006a72:	4638      	mov	r0, r7
 8006a74:	f7ff ffc2 	bl	80069fc <sbrk_aligned>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	d14d      	bne.n	8006b1a <_malloc_r+0xde>
 8006a7e:	6834      	ldr	r4, [r6, #0]
 8006a80:	4626      	mov	r6, r4
 8006a82:	2e00      	cmp	r6, #0
 8006a84:	d140      	bne.n	8006b08 <_malloc_r+0xcc>
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	4631      	mov	r1, r6
 8006a8a:	4638      	mov	r0, r7
 8006a8c:	eb04 0803 	add.w	r8, r4, r3
 8006a90:	f000 fc92 	bl	80073b8 <_sbrk_r>
 8006a94:	4580      	cmp	r8, r0
 8006a96:	d13a      	bne.n	8006b0e <_malloc_r+0xd2>
 8006a98:	6821      	ldr	r1, [r4, #0]
 8006a9a:	3503      	adds	r5, #3
 8006a9c:	1a6d      	subs	r5, r5, r1
 8006a9e:	f025 0503 	bic.w	r5, r5, #3
 8006aa2:	3508      	adds	r5, #8
 8006aa4:	2d0c      	cmp	r5, #12
 8006aa6:	bf38      	it	cc
 8006aa8:	250c      	movcc	r5, #12
 8006aaa:	4629      	mov	r1, r5
 8006aac:	4638      	mov	r0, r7
 8006aae:	f7ff ffa5 	bl	80069fc <sbrk_aligned>
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d02b      	beq.n	8006b0e <_malloc_r+0xd2>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	442b      	add	r3, r5
 8006aba:	6023      	str	r3, [r4, #0]
 8006abc:	e00e      	b.n	8006adc <_malloc_r+0xa0>
 8006abe:	6822      	ldr	r2, [r4, #0]
 8006ac0:	1b52      	subs	r2, r2, r5
 8006ac2:	d41e      	bmi.n	8006b02 <_malloc_r+0xc6>
 8006ac4:	2a0b      	cmp	r2, #11
 8006ac6:	d916      	bls.n	8006af6 <_malloc_r+0xba>
 8006ac8:	1961      	adds	r1, r4, r5
 8006aca:	42a3      	cmp	r3, r4
 8006acc:	6025      	str	r5, [r4, #0]
 8006ace:	bf18      	it	ne
 8006ad0:	6059      	strne	r1, [r3, #4]
 8006ad2:	6863      	ldr	r3, [r4, #4]
 8006ad4:	bf08      	it	eq
 8006ad6:	6031      	streq	r1, [r6, #0]
 8006ad8:	5162      	str	r2, [r4, r5]
 8006ada:	604b      	str	r3, [r1, #4]
 8006adc:	4638      	mov	r0, r7
 8006ade:	f104 060b 	add.w	r6, r4, #11
 8006ae2:	f000 fd33 	bl	800754c <__malloc_unlock>
 8006ae6:	f026 0607 	bic.w	r6, r6, #7
 8006aea:	1d23      	adds	r3, r4, #4
 8006aec:	1af2      	subs	r2, r6, r3
 8006aee:	d0b6      	beq.n	8006a5e <_malloc_r+0x22>
 8006af0:	1b9b      	subs	r3, r3, r6
 8006af2:	50a3      	str	r3, [r4, r2]
 8006af4:	e7b3      	b.n	8006a5e <_malloc_r+0x22>
 8006af6:	6862      	ldr	r2, [r4, #4]
 8006af8:	42a3      	cmp	r3, r4
 8006afa:	bf0c      	ite	eq
 8006afc:	6032      	streq	r2, [r6, #0]
 8006afe:	605a      	strne	r2, [r3, #4]
 8006b00:	e7ec      	b.n	8006adc <_malloc_r+0xa0>
 8006b02:	4623      	mov	r3, r4
 8006b04:	6864      	ldr	r4, [r4, #4]
 8006b06:	e7b2      	b.n	8006a6e <_malloc_r+0x32>
 8006b08:	4634      	mov	r4, r6
 8006b0a:	6876      	ldr	r6, [r6, #4]
 8006b0c:	e7b9      	b.n	8006a82 <_malloc_r+0x46>
 8006b0e:	230c      	movs	r3, #12
 8006b10:	603b      	str	r3, [r7, #0]
 8006b12:	4638      	mov	r0, r7
 8006b14:	f000 fd1a 	bl	800754c <__malloc_unlock>
 8006b18:	e7a1      	b.n	8006a5e <_malloc_r+0x22>
 8006b1a:	6025      	str	r5, [r4, #0]
 8006b1c:	e7de      	b.n	8006adc <_malloc_r+0xa0>
 8006b1e:	bf00      	nop
 8006b20:	200004e8 	.word	0x200004e8

08006b24 <__ssputs_r>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	688e      	ldr	r6, [r1, #8]
 8006b2a:	429e      	cmp	r6, r3
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	4690      	mov	r8, r2
 8006b32:	461f      	mov	r7, r3
 8006b34:	d838      	bhi.n	8006ba8 <__ssputs_r+0x84>
 8006b36:	898a      	ldrh	r2, [r1, #12]
 8006b38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b3c:	d032      	beq.n	8006ba4 <__ssputs_r+0x80>
 8006b3e:	6825      	ldr	r5, [r4, #0]
 8006b40:	6909      	ldr	r1, [r1, #16]
 8006b42:	eba5 0901 	sub.w	r9, r5, r1
 8006b46:	6965      	ldr	r5, [r4, #20]
 8006b48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b50:	3301      	adds	r3, #1
 8006b52:	444b      	add	r3, r9
 8006b54:	106d      	asrs	r5, r5, #1
 8006b56:	429d      	cmp	r5, r3
 8006b58:	bf38      	it	cc
 8006b5a:	461d      	movcc	r5, r3
 8006b5c:	0553      	lsls	r3, r2, #21
 8006b5e:	d531      	bpl.n	8006bc4 <__ssputs_r+0xa0>
 8006b60:	4629      	mov	r1, r5
 8006b62:	f7ff ff6b 	bl	8006a3c <_malloc_r>
 8006b66:	4606      	mov	r6, r0
 8006b68:	b950      	cbnz	r0, 8006b80 <__ssputs_r+0x5c>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	f8ca 3000 	str.w	r3, [sl]
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b76:	81a3      	strh	r3, [r4, #12]
 8006b78:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b80:	6921      	ldr	r1, [r4, #16]
 8006b82:	464a      	mov	r2, r9
 8006b84:	f7ff fb4a 	bl	800621c <memcpy>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	6126      	str	r6, [r4, #16]
 8006b96:	6165      	str	r5, [r4, #20]
 8006b98:	444e      	add	r6, r9
 8006b9a:	eba5 0509 	sub.w	r5, r5, r9
 8006b9e:	6026      	str	r6, [r4, #0]
 8006ba0:	60a5      	str	r5, [r4, #8]
 8006ba2:	463e      	mov	r6, r7
 8006ba4:	42be      	cmp	r6, r7
 8006ba6:	d900      	bls.n	8006baa <__ssputs_r+0x86>
 8006ba8:	463e      	mov	r6, r7
 8006baa:	6820      	ldr	r0, [r4, #0]
 8006bac:	4632      	mov	r2, r6
 8006bae:	4641      	mov	r1, r8
 8006bb0:	f000 fcac 	bl	800750c <memmove>
 8006bb4:	68a3      	ldr	r3, [r4, #8]
 8006bb6:	1b9b      	subs	r3, r3, r6
 8006bb8:	60a3      	str	r3, [r4, #8]
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	4433      	add	r3, r6
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	e7db      	b.n	8006b7c <__ssputs_r+0x58>
 8006bc4:	462a      	mov	r2, r5
 8006bc6:	f000 fcc7 	bl	8007558 <_realloc_r>
 8006bca:	4606      	mov	r6, r0
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d1e1      	bne.n	8006b94 <__ssputs_r+0x70>
 8006bd0:	6921      	ldr	r1, [r4, #16]
 8006bd2:	4650      	mov	r0, sl
 8006bd4:	f7ff fec6 	bl	8006964 <_free_r>
 8006bd8:	e7c7      	b.n	8006b6a <__ssputs_r+0x46>
	...

08006bdc <_svfiprintf_r>:
 8006bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be0:	4698      	mov	r8, r3
 8006be2:	898b      	ldrh	r3, [r1, #12]
 8006be4:	061b      	lsls	r3, r3, #24
 8006be6:	b09d      	sub	sp, #116	; 0x74
 8006be8:	4607      	mov	r7, r0
 8006bea:	460d      	mov	r5, r1
 8006bec:	4614      	mov	r4, r2
 8006bee:	d50e      	bpl.n	8006c0e <_svfiprintf_r+0x32>
 8006bf0:	690b      	ldr	r3, [r1, #16]
 8006bf2:	b963      	cbnz	r3, 8006c0e <_svfiprintf_r+0x32>
 8006bf4:	2140      	movs	r1, #64	; 0x40
 8006bf6:	f7ff ff21 	bl	8006a3c <_malloc_r>
 8006bfa:	6028      	str	r0, [r5, #0]
 8006bfc:	6128      	str	r0, [r5, #16]
 8006bfe:	b920      	cbnz	r0, 8006c0a <_svfiprintf_r+0x2e>
 8006c00:	230c      	movs	r3, #12
 8006c02:	603b      	str	r3, [r7, #0]
 8006c04:	f04f 30ff 	mov.w	r0, #4294967295
 8006c08:	e0d1      	b.n	8006dae <_svfiprintf_r+0x1d2>
 8006c0a:	2340      	movs	r3, #64	; 0x40
 8006c0c:	616b      	str	r3, [r5, #20]
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9309      	str	r3, [sp, #36]	; 0x24
 8006c12:	2320      	movs	r3, #32
 8006c14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c18:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c1c:	2330      	movs	r3, #48	; 0x30
 8006c1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006dc8 <_svfiprintf_r+0x1ec>
 8006c22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c26:	f04f 0901 	mov.w	r9, #1
 8006c2a:	4623      	mov	r3, r4
 8006c2c:	469a      	mov	sl, r3
 8006c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c32:	b10a      	cbz	r2, 8006c38 <_svfiprintf_r+0x5c>
 8006c34:	2a25      	cmp	r2, #37	; 0x25
 8006c36:	d1f9      	bne.n	8006c2c <_svfiprintf_r+0x50>
 8006c38:	ebba 0b04 	subs.w	fp, sl, r4
 8006c3c:	d00b      	beq.n	8006c56 <_svfiprintf_r+0x7a>
 8006c3e:	465b      	mov	r3, fp
 8006c40:	4622      	mov	r2, r4
 8006c42:	4629      	mov	r1, r5
 8006c44:	4638      	mov	r0, r7
 8006c46:	f7ff ff6d 	bl	8006b24 <__ssputs_r>
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	f000 80aa 	beq.w	8006da4 <_svfiprintf_r+0x1c8>
 8006c50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c52:	445a      	add	r2, fp
 8006c54:	9209      	str	r2, [sp, #36]	; 0x24
 8006c56:	f89a 3000 	ldrb.w	r3, [sl]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	f000 80a2 	beq.w	8006da4 <_svfiprintf_r+0x1c8>
 8006c60:	2300      	movs	r3, #0
 8006c62:	f04f 32ff 	mov.w	r2, #4294967295
 8006c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c6a:	f10a 0a01 	add.w	sl, sl, #1
 8006c6e:	9304      	str	r3, [sp, #16]
 8006c70:	9307      	str	r3, [sp, #28]
 8006c72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c76:	931a      	str	r3, [sp, #104]	; 0x68
 8006c78:	4654      	mov	r4, sl
 8006c7a:	2205      	movs	r2, #5
 8006c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c80:	4851      	ldr	r0, [pc, #324]	; (8006dc8 <_svfiprintf_r+0x1ec>)
 8006c82:	f7f9 faad 	bl	80001e0 <memchr>
 8006c86:	9a04      	ldr	r2, [sp, #16]
 8006c88:	b9d8      	cbnz	r0, 8006cc2 <_svfiprintf_r+0xe6>
 8006c8a:	06d0      	lsls	r0, r2, #27
 8006c8c:	bf44      	itt	mi
 8006c8e:	2320      	movmi	r3, #32
 8006c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c94:	0711      	lsls	r1, r2, #28
 8006c96:	bf44      	itt	mi
 8006c98:	232b      	movmi	r3, #43	; 0x2b
 8006c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ca4:	d015      	beq.n	8006cd2 <_svfiprintf_r+0xf6>
 8006ca6:	9a07      	ldr	r2, [sp, #28]
 8006ca8:	4654      	mov	r4, sl
 8006caa:	2000      	movs	r0, #0
 8006cac:	f04f 0c0a 	mov.w	ip, #10
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cb6:	3b30      	subs	r3, #48	; 0x30
 8006cb8:	2b09      	cmp	r3, #9
 8006cba:	d94e      	bls.n	8006d5a <_svfiprintf_r+0x17e>
 8006cbc:	b1b0      	cbz	r0, 8006cec <_svfiprintf_r+0x110>
 8006cbe:	9207      	str	r2, [sp, #28]
 8006cc0:	e014      	b.n	8006cec <_svfiprintf_r+0x110>
 8006cc2:	eba0 0308 	sub.w	r3, r0, r8
 8006cc6:	fa09 f303 	lsl.w	r3, r9, r3
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	9304      	str	r3, [sp, #16]
 8006cce:	46a2      	mov	sl, r4
 8006cd0:	e7d2      	b.n	8006c78 <_svfiprintf_r+0x9c>
 8006cd2:	9b03      	ldr	r3, [sp, #12]
 8006cd4:	1d19      	adds	r1, r3, #4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	9103      	str	r1, [sp, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bfbb      	ittet	lt
 8006cde:	425b      	neglt	r3, r3
 8006ce0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ce4:	9307      	strge	r3, [sp, #28]
 8006ce6:	9307      	strlt	r3, [sp, #28]
 8006ce8:	bfb8      	it	lt
 8006cea:	9204      	strlt	r2, [sp, #16]
 8006cec:	7823      	ldrb	r3, [r4, #0]
 8006cee:	2b2e      	cmp	r3, #46	; 0x2e
 8006cf0:	d10c      	bne.n	8006d0c <_svfiprintf_r+0x130>
 8006cf2:	7863      	ldrb	r3, [r4, #1]
 8006cf4:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf6:	d135      	bne.n	8006d64 <_svfiprintf_r+0x188>
 8006cf8:	9b03      	ldr	r3, [sp, #12]
 8006cfa:	1d1a      	adds	r2, r3, #4
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	9203      	str	r2, [sp, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	bfb8      	it	lt
 8006d04:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d08:	3402      	adds	r4, #2
 8006d0a:	9305      	str	r3, [sp, #20]
 8006d0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006dd8 <_svfiprintf_r+0x1fc>
 8006d10:	7821      	ldrb	r1, [r4, #0]
 8006d12:	2203      	movs	r2, #3
 8006d14:	4650      	mov	r0, sl
 8006d16:	f7f9 fa63 	bl	80001e0 <memchr>
 8006d1a:	b140      	cbz	r0, 8006d2e <_svfiprintf_r+0x152>
 8006d1c:	2340      	movs	r3, #64	; 0x40
 8006d1e:	eba0 000a 	sub.w	r0, r0, sl
 8006d22:	fa03 f000 	lsl.w	r0, r3, r0
 8006d26:	9b04      	ldr	r3, [sp, #16]
 8006d28:	4303      	orrs	r3, r0
 8006d2a:	3401      	adds	r4, #1
 8006d2c:	9304      	str	r3, [sp, #16]
 8006d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d32:	4826      	ldr	r0, [pc, #152]	; (8006dcc <_svfiprintf_r+0x1f0>)
 8006d34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d38:	2206      	movs	r2, #6
 8006d3a:	f7f9 fa51 	bl	80001e0 <memchr>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d038      	beq.n	8006db4 <_svfiprintf_r+0x1d8>
 8006d42:	4b23      	ldr	r3, [pc, #140]	; (8006dd0 <_svfiprintf_r+0x1f4>)
 8006d44:	bb1b      	cbnz	r3, 8006d8e <_svfiprintf_r+0x1b2>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	3307      	adds	r3, #7
 8006d4a:	f023 0307 	bic.w	r3, r3, #7
 8006d4e:	3308      	adds	r3, #8
 8006d50:	9303      	str	r3, [sp, #12]
 8006d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d54:	4433      	add	r3, r6
 8006d56:	9309      	str	r3, [sp, #36]	; 0x24
 8006d58:	e767      	b.n	8006c2a <_svfiprintf_r+0x4e>
 8006d5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d5e:	460c      	mov	r4, r1
 8006d60:	2001      	movs	r0, #1
 8006d62:	e7a5      	b.n	8006cb0 <_svfiprintf_r+0xd4>
 8006d64:	2300      	movs	r3, #0
 8006d66:	3401      	adds	r4, #1
 8006d68:	9305      	str	r3, [sp, #20]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	f04f 0c0a 	mov.w	ip, #10
 8006d70:	4620      	mov	r0, r4
 8006d72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d76:	3a30      	subs	r2, #48	; 0x30
 8006d78:	2a09      	cmp	r2, #9
 8006d7a:	d903      	bls.n	8006d84 <_svfiprintf_r+0x1a8>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0c5      	beq.n	8006d0c <_svfiprintf_r+0x130>
 8006d80:	9105      	str	r1, [sp, #20]
 8006d82:	e7c3      	b.n	8006d0c <_svfiprintf_r+0x130>
 8006d84:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d88:	4604      	mov	r4, r0
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e7f0      	b.n	8006d70 <_svfiprintf_r+0x194>
 8006d8e:	ab03      	add	r3, sp, #12
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	462a      	mov	r2, r5
 8006d94:	4b0f      	ldr	r3, [pc, #60]	; (8006dd4 <_svfiprintf_r+0x1f8>)
 8006d96:	a904      	add	r1, sp, #16
 8006d98:	4638      	mov	r0, r7
 8006d9a:	f3af 8000 	nop.w
 8006d9e:	1c42      	adds	r2, r0, #1
 8006da0:	4606      	mov	r6, r0
 8006da2:	d1d6      	bne.n	8006d52 <_svfiprintf_r+0x176>
 8006da4:	89ab      	ldrh	r3, [r5, #12]
 8006da6:	065b      	lsls	r3, r3, #25
 8006da8:	f53f af2c 	bmi.w	8006c04 <_svfiprintf_r+0x28>
 8006dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dae:	b01d      	add	sp, #116	; 0x74
 8006db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db4:	ab03      	add	r3, sp, #12
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	462a      	mov	r2, r5
 8006dba:	4b06      	ldr	r3, [pc, #24]	; (8006dd4 <_svfiprintf_r+0x1f8>)
 8006dbc:	a904      	add	r1, sp, #16
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	f000 f9d4 	bl	800716c <_printf_i>
 8006dc4:	e7eb      	b.n	8006d9e <_svfiprintf_r+0x1c2>
 8006dc6:	bf00      	nop
 8006dc8:	080078ec 	.word	0x080078ec
 8006dcc:	080078f6 	.word	0x080078f6
 8006dd0:	00000000 	.word	0x00000000
 8006dd4:	08006b25 	.word	0x08006b25
 8006dd8:	080078f2 	.word	0x080078f2

08006ddc <__sfputc_r>:
 8006ddc:	6893      	ldr	r3, [r2, #8]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	b410      	push	{r4}
 8006de4:	6093      	str	r3, [r2, #8]
 8006de6:	da08      	bge.n	8006dfa <__sfputc_r+0x1e>
 8006de8:	6994      	ldr	r4, [r2, #24]
 8006dea:	42a3      	cmp	r3, r4
 8006dec:	db01      	blt.n	8006df2 <__sfputc_r+0x16>
 8006dee:	290a      	cmp	r1, #10
 8006df0:	d103      	bne.n	8006dfa <__sfputc_r+0x1e>
 8006df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006df6:	f7ff bad5 	b.w	80063a4 <__swbuf_r>
 8006dfa:	6813      	ldr	r3, [r2, #0]
 8006dfc:	1c58      	adds	r0, r3, #1
 8006dfe:	6010      	str	r0, [r2, #0]
 8006e00:	7019      	strb	r1, [r3, #0]
 8006e02:	4608      	mov	r0, r1
 8006e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <__sfputs_r>:
 8006e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	460f      	mov	r7, r1
 8006e10:	4614      	mov	r4, r2
 8006e12:	18d5      	adds	r5, r2, r3
 8006e14:	42ac      	cmp	r4, r5
 8006e16:	d101      	bne.n	8006e1c <__sfputs_r+0x12>
 8006e18:	2000      	movs	r0, #0
 8006e1a:	e007      	b.n	8006e2c <__sfputs_r+0x22>
 8006e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e20:	463a      	mov	r2, r7
 8006e22:	4630      	mov	r0, r6
 8006e24:	f7ff ffda 	bl	8006ddc <__sfputc_r>
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d1f3      	bne.n	8006e14 <__sfputs_r+0xa>
 8006e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e30 <_vfiprintf_r>:
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	460d      	mov	r5, r1
 8006e36:	b09d      	sub	sp, #116	; 0x74
 8006e38:	4614      	mov	r4, r2
 8006e3a:	4698      	mov	r8, r3
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	b118      	cbz	r0, 8006e48 <_vfiprintf_r+0x18>
 8006e40:	6983      	ldr	r3, [r0, #24]
 8006e42:	b90b      	cbnz	r3, 8006e48 <_vfiprintf_r+0x18>
 8006e44:	f7ff fc88 	bl	8006758 <__sinit>
 8006e48:	4b89      	ldr	r3, [pc, #548]	; (8007070 <_vfiprintf_r+0x240>)
 8006e4a:	429d      	cmp	r5, r3
 8006e4c:	d11b      	bne.n	8006e86 <_vfiprintf_r+0x56>
 8006e4e:	6875      	ldr	r5, [r6, #4]
 8006e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e52:	07d9      	lsls	r1, r3, #31
 8006e54:	d405      	bmi.n	8006e62 <_vfiprintf_r+0x32>
 8006e56:	89ab      	ldrh	r3, [r5, #12]
 8006e58:	059a      	lsls	r2, r3, #22
 8006e5a:	d402      	bmi.n	8006e62 <_vfiprintf_r+0x32>
 8006e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e5e:	f7ff fd19 	bl	8006894 <__retarget_lock_acquire_recursive>
 8006e62:	89ab      	ldrh	r3, [r5, #12]
 8006e64:	071b      	lsls	r3, r3, #28
 8006e66:	d501      	bpl.n	8006e6c <_vfiprintf_r+0x3c>
 8006e68:	692b      	ldr	r3, [r5, #16]
 8006e6a:	b9eb      	cbnz	r3, 8006ea8 <_vfiprintf_r+0x78>
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f7ff faea 	bl	8006448 <__swsetup_r>
 8006e74:	b1c0      	cbz	r0, 8006ea8 <_vfiprintf_r+0x78>
 8006e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e78:	07dc      	lsls	r4, r3, #31
 8006e7a:	d50e      	bpl.n	8006e9a <_vfiprintf_r+0x6a>
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e80:	b01d      	add	sp, #116	; 0x74
 8006e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e86:	4b7b      	ldr	r3, [pc, #492]	; (8007074 <_vfiprintf_r+0x244>)
 8006e88:	429d      	cmp	r5, r3
 8006e8a:	d101      	bne.n	8006e90 <_vfiprintf_r+0x60>
 8006e8c:	68b5      	ldr	r5, [r6, #8]
 8006e8e:	e7df      	b.n	8006e50 <_vfiprintf_r+0x20>
 8006e90:	4b79      	ldr	r3, [pc, #484]	; (8007078 <_vfiprintf_r+0x248>)
 8006e92:	429d      	cmp	r5, r3
 8006e94:	bf08      	it	eq
 8006e96:	68f5      	ldreq	r5, [r6, #12]
 8006e98:	e7da      	b.n	8006e50 <_vfiprintf_r+0x20>
 8006e9a:	89ab      	ldrh	r3, [r5, #12]
 8006e9c:	0598      	lsls	r0, r3, #22
 8006e9e:	d4ed      	bmi.n	8006e7c <_vfiprintf_r+0x4c>
 8006ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ea2:	f7ff fcf8 	bl	8006896 <__retarget_lock_release_recursive>
 8006ea6:	e7e9      	b.n	8006e7c <_vfiprintf_r+0x4c>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8006eac:	2320      	movs	r3, #32
 8006eae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eb6:	2330      	movs	r3, #48	; 0x30
 8006eb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800707c <_vfiprintf_r+0x24c>
 8006ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ec0:	f04f 0901 	mov.w	r9, #1
 8006ec4:	4623      	mov	r3, r4
 8006ec6:	469a      	mov	sl, r3
 8006ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ecc:	b10a      	cbz	r2, 8006ed2 <_vfiprintf_r+0xa2>
 8006ece:	2a25      	cmp	r2, #37	; 0x25
 8006ed0:	d1f9      	bne.n	8006ec6 <_vfiprintf_r+0x96>
 8006ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8006ed6:	d00b      	beq.n	8006ef0 <_vfiprintf_r+0xc0>
 8006ed8:	465b      	mov	r3, fp
 8006eda:	4622      	mov	r2, r4
 8006edc:	4629      	mov	r1, r5
 8006ede:	4630      	mov	r0, r6
 8006ee0:	f7ff ff93 	bl	8006e0a <__sfputs_r>
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	f000 80aa 	beq.w	800703e <_vfiprintf_r+0x20e>
 8006eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006eec:	445a      	add	r2, fp
 8006eee:	9209      	str	r2, [sp, #36]	; 0x24
 8006ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f000 80a2 	beq.w	800703e <_vfiprintf_r+0x20e>
 8006efa:	2300      	movs	r3, #0
 8006efc:	f04f 32ff 	mov.w	r2, #4294967295
 8006f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f04:	f10a 0a01 	add.w	sl, sl, #1
 8006f08:	9304      	str	r3, [sp, #16]
 8006f0a:	9307      	str	r3, [sp, #28]
 8006f0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f10:	931a      	str	r3, [sp, #104]	; 0x68
 8006f12:	4654      	mov	r4, sl
 8006f14:	2205      	movs	r2, #5
 8006f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1a:	4858      	ldr	r0, [pc, #352]	; (800707c <_vfiprintf_r+0x24c>)
 8006f1c:	f7f9 f960 	bl	80001e0 <memchr>
 8006f20:	9a04      	ldr	r2, [sp, #16]
 8006f22:	b9d8      	cbnz	r0, 8006f5c <_vfiprintf_r+0x12c>
 8006f24:	06d1      	lsls	r1, r2, #27
 8006f26:	bf44      	itt	mi
 8006f28:	2320      	movmi	r3, #32
 8006f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f2e:	0713      	lsls	r3, r2, #28
 8006f30:	bf44      	itt	mi
 8006f32:	232b      	movmi	r3, #43	; 0x2b
 8006f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f38:	f89a 3000 	ldrb.w	r3, [sl]
 8006f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f3e:	d015      	beq.n	8006f6c <_vfiprintf_r+0x13c>
 8006f40:	9a07      	ldr	r2, [sp, #28]
 8006f42:	4654      	mov	r4, sl
 8006f44:	2000      	movs	r0, #0
 8006f46:	f04f 0c0a 	mov.w	ip, #10
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f50:	3b30      	subs	r3, #48	; 0x30
 8006f52:	2b09      	cmp	r3, #9
 8006f54:	d94e      	bls.n	8006ff4 <_vfiprintf_r+0x1c4>
 8006f56:	b1b0      	cbz	r0, 8006f86 <_vfiprintf_r+0x156>
 8006f58:	9207      	str	r2, [sp, #28]
 8006f5a:	e014      	b.n	8006f86 <_vfiprintf_r+0x156>
 8006f5c:	eba0 0308 	sub.w	r3, r0, r8
 8006f60:	fa09 f303 	lsl.w	r3, r9, r3
 8006f64:	4313      	orrs	r3, r2
 8006f66:	9304      	str	r3, [sp, #16]
 8006f68:	46a2      	mov	sl, r4
 8006f6a:	e7d2      	b.n	8006f12 <_vfiprintf_r+0xe2>
 8006f6c:	9b03      	ldr	r3, [sp, #12]
 8006f6e:	1d19      	adds	r1, r3, #4
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	9103      	str	r1, [sp, #12]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	bfbb      	ittet	lt
 8006f78:	425b      	neglt	r3, r3
 8006f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8006f7e:	9307      	strge	r3, [sp, #28]
 8006f80:	9307      	strlt	r3, [sp, #28]
 8006f82:	bfb8      	it	lt
 8006f84:	9204      	strlt	r2, [sp, #16]
 8006f86:	7823      	ldrb	r3, [r4, #0]
 8006f88:	2b2e      	cmp	r3, #46	; 0x2e
 8006f8a:	d10c      	bne.n	8006fa6 <_vfiprintf_r+0x176>
 8006f8c:	7863      	ldrb	r3, [r4, #1]
 8006f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f90:	d135      	bne.n	8006ffe <_vfiprintf_r+0x1ce>
 8006f92:	9b03      	ldr	r3, [sp, #12]
 8006f94:	1d1a      	adds	r2, r3, #4
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	9203      	str	r2, [sp, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	bfb8      	it	lt
 8006f9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fa2:	3402      	adds	r4, #2
 8006fa4:	9305      	str	r3, [sp, #20]
 8006fa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800708c <_vfiprintf_r+0x25c>
 8006faa:	7821      	ldrb	r1, [r4, #0]
 8006fac:	2203      	movs	r2, #3
 8006fae:	4650      	mov	r0, sl
 8006fb0:	f7f9 f916 	bl	80001e0 <memchr>
 8006fb4:	b140      	cbz	r0, 8006fc8 <_vfiprintf_r+0x198>
 8006fb6:	2340      	movs	r3, #64	; 0x40
 8006fb8:	eba0 000a 	sub.w	r0, r0, sl
 8006fbc:	fa03 f000 	lsl.w	r0, r3, r0
 8006fc0:	9b04      	ldr	r3, [sp, #16]
 8006fc2:	4303      	orrs	r3, r0
 8006fc4:	3401      	adds	r4, #1
 8006fc6:	9304      	str	r3, [sp, #16]
 8006fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fcc:	482c      	ldr	r0, [pc, #176]	; (8007080 <_vfiprintf_r+0x250>)
 8006fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fd2:	2206      	movs	r2, #6
 8006fd4:	f7f9 f904 	bl	80001e0 <memchr>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d03f      	beq.n	800705c <_vfiprintf_r+0x22c>
 8006fdc:	4b29      	ldr	r3, [pc, #164]	; (8007084 <_vfiprintf_r+0x254>)
 8006fde:	bb1b      	cbnz	r3, 8007028 <_vfiprintf_r+0x1f8>
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	3307      	adds	r3, #7
 8006fe4:	f023 0307 	bic.w	r3, r3, #7
 8006fe8:	3308      	adds	r3, #8
 8006fea:	9303      	str	r3, [sp, #12]
 8006fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fee:	443b      	add	r3, r7
 8006ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff2:	e767      	b.n	8006ec4 <_vfiprintf_r+0x94>
 8006ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	e7a5      	b.n	8006f4a <_vfiprintf_r+0x11a>
 8006ffe:	2300      	movs	r3, #0
 8007000:	3401      	adds	r4, #1
 8007002:	9305      	str	r3, [sp, #20]
 8007004:	4619      	mov	r1, r3
 8007006:	f04f 0c0a 	mov.w	ip, #10
 800700a:	4620      	mov	r0, r4
 800700c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007010:	3a30      	subs	r2, #48	; 0x30
 8007012:	2a09      	cmp	r2, #9
 8007014:	d903      	bls.n	800701e <_vfiprintf_r+0x1ee>
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0c5      	beq.n	8006fa6 <_vfiprintf_r+0x176>
 800701a:	9105      	str	r1, [sp, #20]
 800701c:	e7c3      	b.n	8006fa6 <_vfiprintf_r+0x176>
 800701e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007022:	4604      	mov	r4, r0
 8007024:	2301      	movs	r3, #1
 8007026:	e7f0      	b.n	800700a <_vfiprintf_r+0x1da>
 8007028:	ab03      	add	r3, sp, #12
 800702a:	9300      	str	r3, [sp, #0]
 800702c:	462a      	mov	r2, r5
 800702e:	4b16      	ldr	r3, [pc, #88]	; (8007088 <_vfiprintf_r+0x258>)
 8007030:	a904      	add	r1, sp, #16
 8007032:	4630      	mov	r0, r6
 8007034:	f3af 8000 	nop.w
 8007038:	4607      	mov	r7, r0
 800703a:	1c78      	adds	r0, r7, #1
 800703c:	d1d6      	bne.n	8006fec <_vfiprintf_r+0x1bc>
 800703e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007040:	07d9      	lsls	r1, r3, #31
 8007042:	d405      	bmi.n	8007050 <_vfiprintf_r+0x220>
 8007044:	89ab      	ldrh	r3, [r5, #12]
 8007046:	059a      	lsls	r2, r3, #22
 8007048:	d402      	bmi.n	8007050 <_vfiprintf_r+0x220>
 800704a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800704c:	f7ff fc23 	bl	8006896 <__retarget_lock_release_recursive>
 8007050:	89ab      	ldrh	r3, [r5, #12]
 8007052:	065b      	lsls	r3, r3, #25
 8007054:	f53f af12 	bmi.w	8006e7c <_vfiprintf_r+0x4c>
 8007058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800705a:	e711      	b.n	8006e80 <_vfiprintf_r+0x50>
 800705c:	ab03      	add	r3, sp, #12
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	462a      	mov	r2, r5
 8007062:	4b09      	ldr	r3, [pc, #36]	; (8007088 <_vfiprintf_r+0x258>)
 8007064:	a904      	add	r1, sp, #16
 8007066:	4630      	mov	r0, r6
 8007068:	f000 f880 	bl	800716c <_printf_i>
 800706c:	e7e4      	b.n	8007038 <_vfiprintf_r+0x208>
 800706e:	bf00      	nop
 8007070:	080078ac 	.word	0x080078ac
 8007074:	080078cc 	.word	0x080078cc
 8007078:	0800788c 	.word	0x0800788c
 800707c:	080078ec 	.word	0x080078ec
 8007080:	080078f6 	.word	0x080078f6
 8007084:	00000000 	.word	0x00000000
 8007088:	08006e0b 	.word	0x08006e0b
 800708c:	080078f2 	.word	0x080078f2

08007090 <_printf_common>:
 8007090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007094:	4616      	mov	r6, r2
 8007096:	4699      	mov	r9, r3
 8007098:	688a      	ldr	r2, [r1, #8]
 800709a:	690b      	ldr	r3, [r1, #16]
 800709c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070a0:	4293      	cmp	r3, r2
 80070a2:	bfb8      	it	lt
 80070a4:	4613      	movlt	r3, r2
 80070a6:	6033      	str	r3, [r6, #0]
 80070a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070ac:	4607      	mov	r7, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	b10a      	cbz	r2, 80070b6 <_printf_common+0x26>
 80070b2:	3301      	adds	r3, #1
 80070b4:	6033      	str	r3, [r6, #0]
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	0699      	lsls	r1, r3, #26
 80070ba:	bf42      	ittt	mi
 80070bc:	6833      	ldrmi	r3, [r6, #0]
 80070be:	3302      	addmi	r3, #2
 80070c0:	6033      	strmi	r3, [r6, #0]
 80070c2:	6825      	ldr	r5, [r4, #0]
 80070c4:	f015 0506 	ands.w	r5, r5, #6
 80070c8:	d106      	bne.n	80070d8 <_printf_common+0x48>
 80070ca:	f104 0a19 	add.w	sl, r4, #25
 80070ce:	68e3      	ldr	r3, [r4, #12]
 80070d0:	6832      	ldr	r2, [r6, #0]
 80070d2:	1a9b      	subs	r3, r3, r2
 80070d4:	42ab      	cmp	r3, r5
 80070d6:	dc26      	bgt.n	8007126 <_printf_common+0x96>
 80070d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070dc:	1e13      	subs	r3, r2, #0
 80070de:	6822      	ldr	r2, [r4, #0]
 80070e0:	bf18      	it	ne
 80070e2:	2301      	movne	r3, #1
 80070e4:	0692      	lsls	r2, r2, #26
 80070e6:	d42b      	bmi.n	8007140 <_printf_common+0xb0>
 80070e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070ec:	4649      	mov	r1, r9
 80070ee:	4638      	mov	r0, r7
 80070f0:	47c0      	blx	r8
 80070f2:	3001      	adds	r0, #1
 80070f4:	d01e      	beq.n	8007134 <_printf_common+0xa4>
 80070f6:	6823      	ldr	r3, [r4, #0]
 80070f8:	68e5      	ldr	r5, [r4, #12]
 80070fa:	6832      	ldr	r2, [r6, #0]
 80070fc:	f003 0306 	and.w	r3, r3, #6
 8007100:	2b04      	cmp	r3, #4
 8007102:	bf08      	it	eq
 8007104:	1aad      	subeq	r5, r5, r2
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	6922      	ldr	r2, [r4, #16]
 800710a:	bf0c      	ite	eq
 800710c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007110:	2500      	movne	r5, #0
 8007112:	4293      	cmp	r3, r2
 8007114:	bfc4      	itt	gt
 8007116:	1a9b      	subgt	r3, r3, r2
 8007118:	18ed      	addgt	r5, r5, r3
 800711a:	2600      	movs	r6, #0
 800711c:	341a      	adds	r4, #26
 800711e:	42b5      	cmp	r5, r6
 8007120:	d11a      	bne.n	8007158 <_printf_common+0xc8>
 8007122:	2000      	movs	r0, #0
 8007124:	e008      	b.n	8007138 <_printf_common+0xa8>
 8007126:	2301      	movs	r3, #1
 8007128:	4652      	mov	r2, sl
 800712a:	4649      	mov	r1, r9
 800712c:	4638      	mov	r0, r7
 800712e:	47c0      	blx	r8
 8007130:	3001      	adds	r0, #1
 8007132:	d103      	bne.n	800713c <_printf_common+0xac>
 8007134:	f04f 30ff 	mov.w	r0, #4294967295
 8007138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713c:	3501      	adds	r5, #1
 800713e:	e7c6      	b.n	80070ce <_printf_common+0x3e>
 8007140:	18e1      	adds	r1, r4, r3
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	2030      	movs	r0, #48	; 0x30
 8007146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800714a:	4422      	add	r2, r4
 800714c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007154:	3302      	adds	r3, #2
 8007156:	e7c7      	b.n	80070e8 <_printf_common+0x58>
 8007158:	2301      	movs	r3, #1
 800715a:	4622      	mov	r2, r4
 800715c:	4649      	mov	r1, r9
 800715e:	4638      	mov	r0, r7
 8007160:	47c0      	blx	r8
 8007162:	3001      	adds	r0, #1
 8007164:	d0e6      	beq.n	8007134 <_printf_common+0xa4>
 8007166:	3601      	adds	r6, #1
 8007168:	e7d9      	b.n	800711e <_printf_common+0x8e>
	...

0800716c <_printf_i>:
 800716c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007170:	7e0f      	ldrb	r7, [r1, #24]
 8007172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007174:	2f78      	cmp	r7, #120	; 0x78
 8007176:	4691      	mov	r9, r2
 8007178:	4680      	mov	r8, r0
 800717a:	460c      	mov	r4, r1
 800717c:	469a      	mov	sl, r3
 800717e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007182:	d807      	bhi.n	8007194 <_printf_i+0x28>
 8007184:	2f62      	cmp	r7, #98	; 0x62
 8007186:	d80a      	bhi.n	800719e <_printf_i+0x32>
 8007188:	2f00      	cmp	r7, #0
 800718a:	f000 80d8 	beq.w	800733e <_printf_i+0x1d2>
 800718e:	2f58      	cmp	r7, #88	; 0x58
 8007190:	f000 80a3 	beq.w	80072da <_printf_i+0x16e>
 8007194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800719c:	e03a      	b.n	8007214 <_printf_i+0xa8>
 800719e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071a2:	2b15      	cmp	r3, #21
 80071a4:	d8f6      	bhi.n	8007194 <_printf_i+0x28>
 80071a6:	a101      	add	r1, pc, #4	; (adr r1, 80071ac <_printf_i+0x40>)
 80071a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071ac:	08007205 	.word	0x08007205
 80071b0:	08007219 	.word	0x08007219
 80071b4:	08007195 	.word	0x08007195
 80071b8:	08007195 	.word	0x08007195
 80071bc:	08007195 	.word	0x08007195
 80071c0:	08007195 	.word	0x08007195
 80071c4:	08007219 	.word	0x08007219
 80071c8:	08007195 	.word	0x08007195
 80071cc:	08007195 	.word	0x08007195
 80071d0:	08007195 	.word	0x08007195
 80071d4:	08007195 	.word	0x08007195
 80071d8:	08007325 	.word	0x08007325
 80071dc:	08007249 	.word	0x08007249
 80071e0:	08007307 	.word	0x08007307
 80071e4:	08007195 	.word	0x08007195
 80071e8:	08007195 	.word	0x08007195
 80071ec:	08007347 	.word	0x08007347
 80071f0:	08007195 	.word	0x08007195
 80071f4:	08007249 	.word	0x08007249
 80071f8:	08007195 	.word	0x08007195
 80071fc:	08007195 	.word	0x08007195
 8007200:	0800730f 	.word	0x0800730f
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	1d1a      	adds	r2, r3, #4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	602a      	str	r2, [r5, #0]
 800720c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007214:	2301      	movs	r3, #1
 8007216:	e0a3      	b.n	8007360 <_printf_i+0x1f4>
 8007218:	6820      	ldr	r0, [r4, #0]
 800721a:	6829      	ldr	r1, [r5, #0]
 800721c:	0606      	lsls	r6, r0, #24
 800721e:	f101 0304 	add.w	r3, r1, #4
 8007222:	d50a      	bpl.n	800723a <_printf_i+0xce>
 8007224:	680e      	ldr	r6, [r1, #0]
 8007226:	602b      	str	r3, [r5, #0]
 8007228:	2e00      	cmp	r6, #0
 800722a:	da03      	bge.n	8007234 <_printf_i+0xc8>
 800722c:	232d      	movs	r3, #45	; 0x2d
 800722e:	4276      	negs	r6, r6
 8007230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007234:	485e      	ldr	r0, [pc, #376]	; (80073b0 <_printf_i+0x244>)
 8007236:	230a      	movs	r3, #10
 8007238:	e019      	b.n	800726e <_printf_i+0x102>
 800723a:	680e      	ldr	r6, [r1, #0]
 800723c:	602b      	str	r3, [r5, #0]
 800723e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007242:	bf18      	it	ne
 8007244:	b236      	sxthne	r6, r6
 8007246:	e7ef      	b.n	8007228 <_printf_i+0xbc>
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	6820      	ldr	r0, [r4, #0]
 800724c:	1d19      	adds	r1, r3, #4
 800724e:	6029      	str	r1, [r5, #0]
 8007250:	0601      	lsls	r1, r0, #24
 8007252:	d501      	bpl.n	8007258 <_printf_i+0xec>
 8007254:	681e      	ldr	r6, [r3, #0]
 8007256:	e002      	b.n	800725e <_printf_i+0xf2>
 8007258:	0646      	lsls	r6, r0, #25
 800725a:	d5fb      	bpl.n	8007254 <_printf_i+0xe8>
 800725c:	881e      	ldrh	r6, [r3, #0]
 800725e:	4854      	ldr	r0, [pc, #336]	; (80073b0 <_printf_i+0x244>)
 8007260:	2f6f      	cmp	r7, #111	; 0x6f
 8007262:	bf0c      	ite	eq
 8007264:	2308      	moveq	r3, #8
 8007266:	230a      	movne	r3, #10
 8007268:	2100      	movs	r1, #0
 800726a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800726e:	6865      	ldr	r5, [r4, #4]
 8007270:	60a5      	str	r5, [r4, #8]
 8007272:	2d00      	cmp	r5, #0
 8007274:	bfa2      	ittt	ge
 8007276:	6821      	ldrge	r1, [r4, #0]
 8007278:	f021 0104 	bicge.w	r1, r1, #4
 800727c:	6021      	strge	r1, [r4, #0]
 800727e:	b90e      	cbnz	r6, 8007284 <_printf_i+0x118>
 8007280:	2d00      	cmp	r5, #0
 8007282:	d04d      	beq.n	8007320 <_printf_i+0x1b4>
 8007284:	4615      	mov	r5, r2
 8007286:	fbb6 f1f3 	udiv	r1, r6, r3
 800728a:	fb03 6711 	mls	r7, r3, r1, r6
 800728e:	5dc7      	ldrb	r7, [r0, r7]
 8007290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007294:	4637      	mov	r7, r6
 8007296:	42bb      	cmp	r3, r7
 8007298:	460e      	mov	r6, r1
 800729a:	d9f4      	bls.n	8007286 <_printf_i+0x11a>
 800729c:	2b08      	cmp	r3, #8
 800729e:	d10b      	bne.n	80072b8 <_printf_i+0x14c>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	07de      	lsls	r6, r3, #31
 80072a4:	d508      	bpl.n	80072b8 <_printf_i+0x14c>
 80072a6:	6923      	ldr	r3, [r4, #16]
 80072a8:	6861      	ldr	r1, [r4, #4]
 80072aa:	4299      	cmp	r1, r3
 80072ac:	bfde      	ittt	le
 80072ae:	2330      	movle	r3, #48	; 0x30
 80072b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072b8:	1b52      	subs	r2, r2, r5
 80072ba:	6122      	str	r2, [r4, #16]
 80072bc:	f8cd a000 	str.w	sl, [sp]
 80072c0:	464b      	mov	r3, r9
 80072c2:	aa03      	add	r2, sp, #12
 80072c4:	4621      	mov	r1, r4
 80072c6:	4640      	mov	r0, r8
 80072c8:	f7ff fee2 	bl	8007090 <_printf_common>
 80072cc:	3001      	adds	r0, #1
 80072ce:	d14c      	bne.n	800736a <_printf_i+0x1fe>
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295
 80072d4:	b004      	add	sp, #16
 80072d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072da:	4835      	ldr	r0, [pc, #212]	; (80073b0 <_printf_i+0x244>)
 80072dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072e0:	6829      	ldr	r1, [r5, #0]
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80072e8:	6029      	str	r1, [r5, #0]
 80072ea:	061d      	lsls	r5, r3, #24
 80072ec:	d514      	bpl.n	8007318 <_printf_i+0x1ac>
 80072ee:	07df      	lsls	r7, r3, #31
 80072f0:	bf44      	itt	mi
 80072f2:	f043 0320 	orrmi.w	r3, r3, #32
 80072f6:	6023      	strmi	r3, [r4, #0]
 80072f8:	b91e      	cbnz	r6, 8007302 <_printf_i+0x196>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	f023 0320 	bic.w	r3, r3, #32
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	2310      	movs	r3, #16
 8007304:	e7b0      	b.n	8007268 <_printf_i+0xfc>
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	f043 0320 	orr.w	r3, r3, #32
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	2378      	movs	r3, #120	; 0x78
 8007310:	4828      	ldr	r0, [pc, #160]	; (80073b4 <_printf_i+0x248>)
 8007312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007316:	e7e3      	b.n	80072e0 <_printf_i+0x174>
 8007318:	0659      	lsls	r1, r3, #25
 800731a:	bf48      	it	mi
 800731c:	b2b6      	uxthmi	r6, r6
 800731e:	e7e6      	b.n	80072ee <_printf_i+0x182>
 8007320:	4615      	mov	r5, r2
 8007322:	e7bb      	b.n	800729c <_printf_i+0x130>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	6826      	ldr	r6, [r4, #0]
 8007328:	6961      	ldr	r1, [r4, #20]
 800732a:	1d18      	adds	r0, r3, #4
 800732c:	6028      	str	r0, [r5, #0]
 800732e:	0635      	lsls	r5, r6, #24
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	d501      	bpl.n	8007338 <_printf_i+0x1cc>
 8007334:	6019      	str	r1, [r3, #0]
 8007336:	e002      	b.n	800733e <_printf_i+0x1d2>
 8007338:	0670      	lsls	r0, r6, #25
 800733a:	d5fb      	bpl.n	8007334 <_printf_i+0x1c8>
 800733c:	8019      	strh	r1, [r3, #0]
 800733e:	2300      	movs	r3, #0
 8007340:	6123      	str	r3, [r4, #16]
 8007342:	4615      	mov	r5, r2
 8007344:	e7ba      	b.n	80072bc <_printf_i+0x150>
 8007346:	682b      	ldr	r3, [r5, #0]
 8007348:	1d1a      	adds	r2, r3, #4
 800734a:	602a      	str	r2, [r5, #0]
 800734c:	681d      	ldr	r5, [r3, #0]
 800734e:	6862      	ldr	r2, [r4, #4]
 8007350:	2100      	movs	r1, #0
 8007352:	4628      	mov	r0, r5
 8007354:	f7f8 ff44 	bl	80001e0 <memchr>
 8007358:	b108      	cbz	r0, 800735e <_printf_i+0x1f2>
 800735a:	1b40      	subs	r0, r0, r5
 800735c:	6060      	str	r0, [r4, #4]
 800735e:	6863      	ldr	r3, [r4, #4]
 8007360:	6123      	str	r3, [r4, #16]
 8007362:	2300      	movs	r3, #0
 8007364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007368:	e7a8      	b.n	80072bc <_printf_i+0x150>
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	462a      	mov	r2, r5
 800736e:	4649      	mov	r1, r9
 8007370:	4640      	mov	r0, r8
 8007372:	47d0      	blx	sl
 8007374:	3001      	adds	r0, #1
 8007376:	d0ab      	beq.n	80072d0 <_printf_i+0x164>
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	079b      	lsls	r3, r3, #30
 800737c:	d413      	bmi.n	80073a6 <_printf_i+0x23a>
 800737e:	68e0      	ldr	r0, [r4, #12]
 8007380:	9b03      	ldr	r3, [sp, #12]
 8007382:	4298      	cmp	r0, r3
 8007384:	bfb8      	it	lt
 8007386:	4618      	movlt	r0, r3
 8007388:	e7a4      	b.n	80072d4 <_printf_i+0x168>
 800738a:	2301      	movs	r3, #1
 800738c:	4632      	mov	r2, r6
 800738e:	4649      	mov	r1, r9
 8007390:	4640      	mov	r0, r8
 8007392:	47d0      	blx	sl
 8007394:	3001      	adds	r0, #1
 8007396:	d09b      	beq.n	80072d0 <_printf_i+0x164>
 8007398:	3501      	adds	r5, #1
 800739a:	68e3      	ldr	r3, [r4, #12]
 800739c:	9903      	ldr	r1, [sp, #12]
 800739e:	1a5b      	subs	r3, r3, r1
 80073a0:	42ab      	cmp	r3, r5
 80073a2:	dcf2      	bgt.n	800738a <_printf_i+0x21e>
 80073a4:	e7eb      	b.n	800737e <_printf_i+0x212>
 80073a6:	2500      	movs	r5, #0
 80073a8:	f104 0619 	add.w	r6, r4, #25
 80073ac:	e7f5      	b.n	800739a <_printf_i+0x22e>
 80073ae:	bf00      	nop
 80073b0:	080078fd 	.word	0x080078fd
 80073b4:	0800790e 	.word	0x0800790e

080073b8 <_sbrk_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4d06      	ldr	r5, [pc, #24]	; (80073d4 <_sbrk_r+0x1c>)
 80073bc:	2300      	movs	r3, #0
 80073be:	4604      	mov	r4, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	602b      	str	r3, [r5, #0]
 80073c4:	f7fa fe26 	bl	8002014 <_sbrk>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_sbrk_r+0x1a>
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_sbrk_r+0x1a>
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	200004f0 	.word	0x200004f0

080073d8 <__sread>:
 80073d8:	b510      	push	{r4, lr}
 80073da:	460c      	mov	r4, r1
 80073dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e0:	f000 f8ea 	bl	80075b8 <_read_r>
 80073e4:	2800      	cmp	r0, #0
 80073e6:	bfab      	itete	ge
 80073e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073ea:	89a3      	ldrhlt	r3, [r4, #12]
 80073ec:	181b      	addge	r3, r3, r0
 80073ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073f2:	bfac      	ite	ge
 80073f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80073f6:	81a3      	strhlt	r3, [r4, #12]
 80073f8:	bd10      	pop	{r4, pc}

080073fa <__swrite>:
 80073fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073fe:	461f      	mov	r7, r3
 8007400:	898b      	ldrh	r3, [r1, #12]
 8007402:	05db      	lsls	r3, r3, #23
 8007404:	4605      	mov	r5, r0
 8007406:	460c      	mov	r4, r1
 8007408:	4616      	mov	r6, r2
 800740a:	d505      	bpl.n	8007418 <__swrite+0x1e>
 800740c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007410:	2302      	movs	r3, #2
 8007412:	2200      	movs	r2, #0
 8007414:	f000 f868 	bl	80074e8 <_lseek_r>
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800741e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007422:	81a3      	strh	r3, [r4, #12]
 8007424:	4632      	mov	r2, r6
 8007426:	463b      	mov	r3, r7
 8007428:	4628      	mov	r0, r5
 800742a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800742e:	f000 b817 	b.w	8007460 <_write_r>

08007432 <__sseek>:
 8007432:	b510      	push	{r4, lr}
 8007434:	460c      	mov	r4, r1
 8007436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743a:	f000 f855 	bl	80074e8 <_lseek_r>
 800743e:	1c43      	adds	r3, r0, #1
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	bf15      	itete	ne
 8007444:	6560      	strne	r0, [r4, #84]	; 0x54
 8007446:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800744a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800744e:	81a3      	strheq	r3, [r4, #12]
 8007450:	bf18      	it	ne
 8007452:	81a3      	strhne	r3, [r4, #12]
 8007454:	bd10      	pop	{r4, pc}

08007456 <__sclose>:
 8007456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800745a:	f000 b813 	b.w	8007484 <_close_r>
	...

08007460 <_write_r>:
 8007460:	b538      	push	{r3, r4, r5, lr}
 8007462:	4d07      	ldr	r5, [pc, #28]	; (8007480 <_write_r+0x20>)
 8007464:	4604      	mov	r4, r0
 8007466:	4608      	mov	r0, r1
 8007468:	4611      	mov	r1, r2
 800746a:	2200      	movs	r2, #0
 800746c:	602a      	str	r2, [r5, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	f7fa fd80 	bl	8001f74 <_write>
 8007474:	1c43      	adds	r3, r0, #1
 8007476:	d102      	bne.n	800747e <_write_r+0x1e>
 8007478:	682b      	ldr	r3, [r5, #0]
 800747a:	b103      	cbz	r3, 800747e <_write_r+0x1e>
 800747c:	6023      	str	r3, [r4, #0]
 800747e:	bd38      	pop	{r3, r4, r5, pc}
 8007480:	200004f0 	.word	0x200004f0

08007484 <_close_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4d06      	ldr	r5, [pc, #24]	; (80074a0 <_close_r+0x1c>)
 8007488:	2300      	movs	r3, #0
 800748a:	4604      	mov	r4, r0
 800748c:	4608      	mov	r0, r1
 800748e:	602b      	str	r3, [r5, #0]
 8007490:	f7fa fd8c 	bl	8001fac <_close>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_close_r+0x1a>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	b103      	cbz	r3, 800749e <_close_r+0x1a>
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	200004f0 	.word	0x200004f0

080074a4 <_fstat_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4d07      	ldr	r5, [pc, #28]	; (80074c4 <_fstat_r+0x20>)
 80074a8:	2300      	movs	r3, #0
 80074aa:	4604      	mov	r4, r0
 80074ac:	4608      	mov	r0, r1
 80074ae:	4611      	mov	r1, r2
 80074b0:	602b      	str	r3, [r5, #0]
 80074b2:	f7fa fd87 	bl	8001fc4 <_fstat>
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	d102      	bne.n	80074c0 <_fstat_r+0x1c>
 80074ba:	682b      	ldr	r3, [r5, #0]
 80074bc:	b103      	cbz	r3, 80074c0 <_fstat_r+0x1c>
 80074be:	6023      	str	r3, [r4, #0]
 80074c0:	bd38      	pop	{r3, r4, r5, pc}
 80074c2:	bf00      	nop
 80074c4:	200004f0 	.word	0x200004f0

080074c8 <_isatty_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4d06      	ldr	r5, [pc, #24]	; (80074e4 <_isatty_r+0x1c>)
 80074cc:	2300      	movs	r3, #0
 80074ce:	4604      	mov	r4, r0
 80074d0:	4608      	mov	r0, r1
 80074d2:	602b      	str	r3, [r5, #0]
 80074d4:	f7fa fd86 	bl	8001fe4 <_isatty>
 80074d8:	1c43      	adds	r3, r0, #1
 80074da:	d102      	bne.n	80074e2 <_isatty_r+0x1a>
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	b103      	cbz	r3, 80074e2 <_isatty_r+0x1a>
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
 80074e4:	200004f0 	.word	0x200004f0

080074e8 <_lseek_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4d07      	ldr	r5, [pc, #28]	; (8007508 <_lseek_r+0x20>)
 80074ec:	4604      	mov	r4, r0
 80074ee:	4608      	mov	r0, r1
 80074f0:	4611      	mov	r1, r2
 80074f2:	2200      	movs	r2, #0
 80074f4:	602a      	str	r2, [r5, #0]
 80074f6:	461a      	mov	r2, r3
 80074f8:	f7fa fd7f 	bl	8001ffa <_lseek>
 80074fc:	1c43      	adds	r3, r0, #1
 80074fe:	d102      	bne.n	8007506 <_lseek_r+0x1e>
 8007500:	682b      	ldr	r3, [r5, #0]
 8007502:	b103      	cbz	r3, 8007506 <_lseek_r+0x1e>
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	bd38      	pop	{r3, r4, r5, pc}
 8007508:	200004f0 	.word	0x200004f0

0800750c <memmove>:
 800750c:	4288      	cmp	r0, r1
 800750e:	b510      	push	{r4, lr}
 8007510:	eb01 0402 	add.w	r4, r1, r2
 8007514:	d902      	bls.n	800751c <memmove+0x10>
 8007516:	4284      	cmp	r4, r0
 8007518:	4623      	mov	r3, r4
 800751a:	d807      	bhi.n	800752c <memmove+0x20>
 800751c:	1e43      	subs	r3, r0, #1
 800751e:	42a1      	cmp	r1, r4
 8007520:	d008      	beq.n	8007534 <memmove+0x28>
 8007522:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007526:	f803 2f01 	strb.w	r2, [r3, #1]!
 800752a:	e7f8      	b.n	800751e <memmove+0x12>
 800752c:	4402      	add	r2, r0
 800752e:	4601      	mov	r1, r0
 8007530:	428a      	cmp	r2, r1
 8007532:	d100      	bne.n	8007536 <memmove+0x2a>
 8007534:	bd10      	pop	{r4, pc}
 8007536:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800753a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800753e:	e7f7      	b.n	8007530 <memmove+0x24>

08007540 <__malloc_lock>:
 8007540:	4801      	ldr	r0, [pc, #4]	; (8007548 <__malloc_lock+0x8>)
 8007542:	f7ff b9a7 	b.w	8006894 <__retarget_lock_acquire_recursive>
 8007546:	bf00      	nop
 8007548:	200004e4 	.word	0x200004e4

0800754c <__malloc_unlock>:
 800754c:	4801      	ldr	r0, [pc, #4]	; (8007554 <__malloc_unlock+0x8>)
 800754e:	f7ff b9a2 	b.w	8006896 <__retarget_lock_release_recursive>
 8007552:	bf00      	nop
 8007554:	200004e4 	.word	0x200004e4

08007558 <_realloc_r>:
 8007558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755c:	4680      	mov	r8, r0
 800755e:	4614      	mov	r4, r2
 8007560:	460e      	mov	r6, r1
 8007562:	b921      	cbnz	r1, 800756e <_realloc_r+0x16>
 8007564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007568:	4611      	mov	r1, r2
 800756a:	f7ff ba67 	b.w	8006a3c <_malloc_r>
 800756e:	b92a      	cbnz	r2, 800757c <_realloc_r+0x24>
 8007570:	f7ff f9f8 	bl	8006964 <_free_r>
 8007574:	4625      	mov	r5, r4
 8007576:	4628      	mov	r0, r5
 8007578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800757c:	f000 f82e 	bl	80075dc <_malloc_usable_size_r>
 8007580:	4284      	cmp	r4, r0
 8007582:	4607      	mov	r7, r0
 8007584:	d802      	bhi.n	800758c <_realloc_r+0x34>
 8007586:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800758a:	d812      	bhi.n	80075b2 <_realloc_r+0x5a>
 800758c:	4621      	mov	r1, r4
 800758e:	4640      	mov	r0, r8
 8007590:	f7ff fa54 	bl	8006a3c <_malloc_r>
 8007594:	4605      	mov	r5, r0
 8007596:	2800      	cmp	r0, #0
 8007598:	d0ed      	beq.n	8007576 <_realloc_r+0x1e>
 800759a:	42bc      	cmp	r4, r7
 800759c:	4622      	mov	r2, r4
 800759e:	4631      	mov	r1, r6
 80075a0:	bf28      	it	cs
 80075a2:	463a      	movcs	r2, r7
 80075a4:	f7fe fe3a 	bl	800621c <memcpy>
 80075a8:	4631      	mov	r1, r6
 80075aa:	4640      	mov	r0, r8
 80075ac:	f7ff f9da 	bl	8006964 <_free_r>
 80075b0:	e7e1      	b.n	8007576 <_realloc_r+0x1e>
 80075b2:	4635      	mov	r5, r6
 80075b4:	e7df      	b.n	8007576 <_realloc_r+0x1e>
	...

080075b8 <_read_r>:
 80075b8:	b538      	push	{r3, r4, r5, lr}
 80075ba:	4d07      	ldr	r5, [pc, #28]	; (80075d8 <_read_r+0x20>)
 80075bc:	4604      	mov	r4, r0
 80075be:	4608      	mov	r0, r1
 80075c0:	4611      	mov	r1, r2
 80075c2:	2200      	movs	r2, #0
 80075c4:	602a      	str	r2, [r5, #0]
 80075c6:	461a      	mov	r2, r3
 80075c8:	f7fa fcb7 	bl	8001f3a <_read>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d102      	bne.n	80075d6 <_read_r+0x1e>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	b103      	cbz	r3, 80075d6 <_read_r+0x1e>
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	bd38      	pop	{r3, r4, r5, pc}
 80075d8:	200004f0 	.word	0x200004f0

080075dc <_malloc_usable_size_r>:
 80075dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075e0:	1f18      	subs	r0, r3, #4
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	bfbc      	itt	lt
 80075e6:	580b      	ldrlt	r3, [r1, r0]
 80075e8:	18c0      	addlt	r0, r0, r3
 80075ea:	4770      	bx	lr

080075ec <_init>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	bf00      	nop
 80075f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f2:	bc08      	pop	{r3}
 80075f4:	469e      	mov	lr, r3
 80075f6:	4770      	bx	lr

080075f8 <_fini>:
 80075f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fa:	bf00      	nop
 80075fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075fe:	bc08      	pop	{r3}
 8007600:	469e      	mov	lr, r3
 8007602:	4770      	bx	lr
