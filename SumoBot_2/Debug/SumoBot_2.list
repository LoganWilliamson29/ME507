
SumoBot_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007438  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  080075d8  080075d8  000175d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078f4  080078f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080078f4  080078f4  000178f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078fc  080078fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080078fc  080078fc  000178fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007904  08007904  00017904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000074  0800797c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  0800797c  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147ea  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002abd  00000000  00000000  0003488e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00037350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00038578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1da  00000000  00000000  000396b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c34  00000000  00000000  0005588a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a165f  00000000  00000000  0006b4be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010cb1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005848  00000000  00000000  0010cb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080075c0 	.word	0x080075c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080075c0 	.word	0x080075c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <_ZN5motorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_ts>:
{

}

//Initializing constructor
motor::motor(TIM_HandleTypeDef* _htim,
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	80fb      	strh	r3, [r7, #6]
			 GPIO_TypeDef*		_nSLEEP,
			 uint16_t			_nSLEEP_Pin,
			 int16_t            _level)
{

}
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
	...

08000d90 <_ZN5motor9set_levelEl>:
					  GPIO_PIN_RESET);
}

//Motor duty cycle setting method
void motor::set_level(int32_t level)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	if (level<-4800)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	f513 5f96 	cmn.w	r3, #4800	; 0x12c0
 8000da0:	da02      	bge.n	8000da8 <_ZN5motor9set_levelEl+0x18>
	{
		level = -4800;
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <_ZN5motor9set_levelEl+0xe8>)
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	e006      	b.n	8000db6 <_ZN5motor9set_levelEl+0x26>
	}
	else if (level>4800)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
 8000dae:	dd02      	ble.n	8000db6 <_ZN5motor9set_levelEl+0x26>
	{
		level = 4800;
 8000db0:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8000db4:	603b      	str	r3, [r7, #0]
	}
	if (level>=0)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db2b      	blt.n	8000e14 <_ZN5motor9set_levelEl+0x84>
	{
		__HAL_TIM_SET_COMPARE(htim, TIM_EN, level);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	895b      	ldrh	r3, [r3, #10]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d105      	bne.n	8000dd0 <_ZN5motor9set_levelEl+0x40>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	683a      	ldr	r2, [r7, #0]
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dce:	e018      	b.n	8000e02 <_ZN5motor9set_levelEl+0x72>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	895b      	ldrh	r3, [r3, #10]
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d105      	bne.n	8000de4 <_ZN5motor9set_levelEl+0x54>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	683a      	ldr	r2, [r7, #0]
 8000de0:	639a      	str	r2, [r3, #56]	; 0x38
 8000de2:	e00e      	b.n	8000e02 <_ZN5motor9set_levelEl+0x72>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	895b      	ldrh	r3, [r3, #10]
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d105      	bne.n	8000df8 <_ZN5motor9set_levelEl+0x68>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000df6:	e004      	b.n	8000e02 <_ZN5motor9set_levelEl+0x72>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	683a      	ldr	r2, [r7, #0]
 8000e00:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIO_PH, GPIO_PH_Pin, GPIO_PIN_SET);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6858      	ldr	r0, [r3, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	891b      	ldrh	r3, [r3, #8]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f001 ff8d 	bl	8002d2c <HAL_GPIO_WritePin>
	else if (level<0)
	{
		__HAL_TIM_SET_COMPARE(htim, TIM_EN, level);
		HAL_GPIO_WritePin(GPIO_PH, GPIO_PH_Pin, GPIO_PIN_RESET);
	}
}
 8000e12:	e02d      	b.n	8000e70 <_ZN5motor9set_levelEl+0xe0>
	else if (level<0)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	da2a      	bge.n	8000e70 <_ZN5motor9set_levelEl+0xe0>
		__HAL_TIM_SET_COMPARE(htim, TIM_EN, level);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	895b      	ldrh	r3, [r3, #10]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d105      	bne.n	8000e2e <_ZN5motor9set_levelEl+0x9e>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e2c:	e018      	b.n	8000e60 <_ZN5motor9set_levelEl+0xd0>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	895b      	ldrh	r3, [r3, #10]
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d105      	bne.n	8000e42 <_ZN5motor9set_levelEl+0xb2>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e40:	e00e      	b.n	8000e60 <_ZN5motor9set_levelEl+0xd0>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	895b      	ldrh	r3, [r3, #10]
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	d105      	bne.n	8000e56 <_ZN5motor9set_levelEl+0xc6>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e54:	e004      	b.n	8000e60 <_ZN5motor9set_levelEl+0xd0>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	683a      	ldr	r2, [r7, #0]
 8000e5e:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_GPIO_WritePin(GPIO_PH, GPIO_PH_Pin, GPIO_PIN_RESET);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6858      	ldr	r0, [r3, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	891b      	ldrh	r3, [r3, #8]
 8000e68:	2200      	movs	r2, #0
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f001 ff5e 	bl	8002d2c <HAL_GPIO_WritePin>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	ffffed40 	.word	0xffffed40

08000e7c <_ZN6FlySkyC1EP17TIM_HandleTypeDefmmhhtttt>:
{

}

// Initializing Constructor
FlySky::FlySky(TIM_HandleTypeDef*	_htim,
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
				uint16_t 			_STR_Val2,
				uint16_t 			_THR_Val1,
				uint16_t 			_THR_Val2)
{

}
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <_Z14bno055_setPageh>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2007      	movs	r0, #7
 8000ea8:	f000 f87a 	bl	8000fa0 <bno055_writeData>
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, (uint8_t*) &mode, 1);  //<-- I added the uint8_t cast here, not sure if that's a problem.
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	203d      	movs	r0, #61	; 0x3d
 8000ec4:	f000 f86c 	bl	8000fa0 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d103      	bne.n	8000ed6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000ece:	2013      	movs	r0, #19
 8000ed0:	f000 f85a 	bl	8000f88 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000ed4:	e002      	b.n	8000edc <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000ed6:	2007      	movs	r0, #7
 8000ed8:	f000 f856 	bl	8000f88 <bno055_delay>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f7ff ffe3 	bl	8000eb4 <bno055_setOperationMode>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000ef6:	200c      	movs	r0, #12
 8000ef8:	f7ff ffdc 	bl	8000eb4 <bno055_setOperationMode>
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000f04:	2120      	movs	r1, #32
 8000f06:	203f      	movs	r0, #63	; 0x3f
 8000f08:	f000 f84a 	bl	8000fa0 <bno055_writeData>
  bno055_delay(700);
 8000f0c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f10:	f000 f83a 	bl	8000f88 <bno055_delay>
}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
  bno055_reset();
 8000f1e:	f7ff ffef 	bl	8000f00 <bno055_reset>

  uint8_t id = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	2201      	movs	r2, #1
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 f923 	bl	8001178 <bno055_readData>
  if (id != BNO055_ID) {
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2ba0      	cmp	r3, #160	; 0xa0
 8000f36:	d004      	beq.n	8000f42 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4809      	ldr	r0, [pc, #36]	; (8000f64 <bno055_setup+0x4c>)
 8000f3e:	f005 f96d 	bl	800621c <iprintf>
  }
  bno055_setPage(0);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f7ff ffa8 	bl	8000e98 <_Z14bno055_setPageh>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	203f      	movs	r0, #63	; 0x3f
 8000f4c:	f000 f828 	bl	8000fa0 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000f50:	f7ff ffc8 	bl	8000ee4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000f54:	200a      	movs	r0, #10
 8000f56:	f000 f817 	bl	8000f88 <bno055_delay>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	080075d8 	.word	0x080075d8

08000f68 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <bno055_assignI2C+0x1c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6013      	str	r3, [r2, #0]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000090 	.word	0x20000090

08000f88 <bno055_delay>:

void bno055_delay(int time) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 f90c 	bl	80021b0 <HAL_Delay>
#endif
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af02      	add	r7, sp, #8
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460a      	mov	r2, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	733b      	strb	r3, [r7, #12]
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000fb8:	4b5a      	ldr	r3, [pc, #360]	; (8001124 <bno055_writeData+0x184>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	f107 020c 	add.w	r2, r7, #12
 8000fc0:	230a      	movs	r3, #10
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	2150      	movs	r1, #80	; 0x50
 8000fc8:	f002 f80e 	bl	8002fe8 <HAL_I2C_Master_Transmit>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000fd0:	7dfb      	ldrb	r3, [r7, #23]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 80a0 	beq.w	8001118 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d103      	bne.n	8000fe6 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000fde:	4852      	ldr	r0, [pc, #328]	; (8001128 <bno055_writeData+0x188>)
 8000fe0:	f005 f9a2 	bl	8006328 <puts>
 8000fe4:	e012      	b.n	800100c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000fe6:	7dfb      	ldrb	r3, [r7, #23]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d103      	bne.n	8000ff4 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000fec:	484f      	ldr	r0, [pc, #316]	; (800112c <bno055_writeData+0x18c>)
 8000fee:	f005 f99b 	bl	8006328 <puts>
 8000ff2:	e00b      	b.n	800100c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d103      	bne.n	8001002 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000ffa:	484d      	ldr	r0, [pc, #308]	; (8001130 <bno055_writeData+0x190>)
 8000ffc:	f005 f994 	bl	8006328 <puts>
 8001000:	e004      	b.n	800100c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001002:	7dfb      	ldrb	r3, [r7, #23]
 8001004:	4619      	mov	r1, r3
 8001006:	484b      	ldr	r0, [pc, #300]	; (8001134 <bno055_writeData+0x194>)
 8001008:	f005 f908 	bl	800621c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 800100c:	4b45      	ldr	r3, [pc, #276]	; (8001124 <bno055_writeData+0x184>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4618      	mov	r0, r3
 8001012:	f002 fb1b 	bl	800364c <HAL_I2C_GetError>
 8001016:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d07e      	beq.n	800111c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d103      	bne.n	800102c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001024:	4844      	ldr	r0, [pc, #272]	; (8001138 <bno055_writeData+0x198>)
 8001026:	f005 f97f 	bl	8006328 <puts>
 800102a:	e021      	b.n	8001070 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d103      	bne.n	800103a <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001032:	4842      	ldr	r0, [pc, #264]	; (800113c <bno055_writeData+0x19c>)
 8001034:	f005 f978 	bl	8006328 <puts>
 8001038:	e01a      	b.n	8001070 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	2b04      	cmp	r3, #4
 800103e:	d103      	bne.n	8001048 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001040:	483f      	ldr	r0, [pc, #252]	; (8001140 <bno055_writeData+0x1a0>)
 8001042:	f005 f971 	bl	8006328 <puts>
 8001046:	e013      	b.n	8001070 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	2b08      	cmp	r3, #8
 800104c:	d103      	bne.n	8001056 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 800104e:	483d      	ldr	r0, [pc, #244]	; (8001144 <bno055_writeData+0x1a4>)
 8001050:	f005 f96a 	bl	8006328 <puts>
 8001054:	e00c      	b.n	8001070 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	2b10      	cmp	r3, #16
 800105a:	d103      	bne.n	8001064 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 800105c:	483a      	ldr	r0, [pc, #232]	; (8001148 <bno055_writeData+0x1a8>)
 800105e:	f005 f963 	bl	8006328 <puts>
 8001062:	e005      	b.n	8001070 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	2b20      	cmp	r3, #32
 8001068:	d102      	bne.n	8001070 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 800106a:	4838      	ldr	r0, [pc, #224]	; (800114c <bno055_writeData+0x1ac>)
 800106c:	f005 f95c 	bl	8006328 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <bno055_writeData+0x184>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f002 fadb 	bl	8003630 <HAL_I2C_GetState>
 800107a:	4603      	mov	r3, r0
 800107c:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d103      	bne.n	800108c <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001084:	4832      	ldr	r0, [pc, #200]	; (8001150 <bno055_writeData+0x1b0>)
 8001086:	f005 f94f 	bl	8006328 <puts>
 800108a:	e048      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	2b20      	cmp	r3, #32
 8001090:	d103      	bne.n	800109a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001092:	482f      	ldr	r0, [pc, #188]	; (8001150 <bno055_writeData+0x1b0>)
 8001094:	f005 f948 	bl	8006328 <puts>
 8001098:	e041      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	2b24      	cmp	r3, #36	; 0x24
 800109e:	d103      	bne.n	80010a8 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 80010a0:	482c      	ldr	r0, [pc, #176]	; (8001154 <bno055_writeData+0x1b4>)
 80010a2:	f005 f941 	bl	8006328 <puts>
 80010a6:	e03a      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	2b21      	cmp	r3, #33	; 0x21
 80010ac:	d103      	bne.n	80010b6 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 80010ae:	482a      	ldr	r0, [pc, #168]	; (8001158 <bno055_writeData+0x1b8>)
 80010b0:	f005 f93a 	bl	8006328 <puts>
 80010b4:	e033      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b22      	cmp	r3, #34	; 0x22
 80010ba:	d103      	bne.n	80010c4 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 80010bc:	4827      	ldr	r0, [pc, #156]	; (800115c <bno055_writeData+0x1bc>)
 80010be:	f005 f933 	bl	8006328 <puts>
 80010c2:	e02c      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	2b28      	cmp	r3, #40	; 0x28
 80010c8:	d103      	bne.n	80010d2 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 80010ca:	4825      	ldr	r0, [pc, #148]	; (8001160 <bno055_writeData+0x1c0>)
 80010cc:	f005 f92c 	bl	8006328 <puts>
 80010d0:	e025      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b29      	cmp	r3, #41	; 0x29
 80010d6:	d103      	bne.n	80010e0 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 80010d8:	4822      	ldr	r0, [pc, #136]	; (8001164 <bno055_writeData+0x1c4>)
 80010da:	f005 f925 	bl	8006328 <puts>
 80010de:	e01e      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	2b2a      	cmp	r3, #42	; 0x2a
 80010e4:	d103      	bne.n	80010ee <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 80010e6:	4820      	ldr	r0, [pc, #128]	; (8001168 <bno055_writeData+0x1c8>)
 80010e8:	f005 f91e 	bl	8006328 <puts>
 80010ec:	e017      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2b60      	cmp	r3, #96	; 0x60
 80010f2:	d103      	bne.n	80010fc <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 80010f4:	481d      	ldr	r0, [pc, #116]	; (800116c <bno055_writeData+0x1cc>)
 80010f6:	f005 f917 	bl	8006328 <puts>
 80010fa:	e010      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2ba0      	cmp	r3, #160	; 0xa0
 8001100:	d103      	bne.n	800110a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001102:	481b      	ldr	r0, [pc, #108]	; (8001170 <bno055_writeData+0x1d0>)
 8001104:	f005 f910 	bl	8006328 <puts>
 8001108:	e009      	b.n	800111e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	2be0      	cmp	r3, #224	; 0xe0
 800110e:	d106      	bne.n	800111e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <bno055_writeData+0x1d4>)
 8001112:	f005 f909 	bl	8006328 <puts>
 8001116:	e002      	b.n	800111e <bno055_writeData+0x17e>
    return;
 8001118:	bf00      	nop
 800111a:	e000      	b.n	800111e <bno055_writeData+0x17e>
    return;
 800111c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000090 	.word	0x20000090
 8001128:	08007614 	.word	0x08007614
 800112c:	08007638 	.word	0x08007638
 8001130:	08007660 	.word	0x08007660
 8001134:	08007684 	.word	0x08007684
 8001138:	0800769c 	.word	0x0800769c
 800113c:	080076b0 	.word	0x080076b0
 8001140:	080076c4 	.word	0x080076c4
 8001144:	080076d8 	.word	0x080076d8
 8001148:	080076ec 	.word	0x080076ec
 800114c:	08007700 	.word	0x08007700
 8001150:	08007718 	.word	0x08007718
 8001154:	08007730 	.word	0x08007730
 8001158:	08007744 	.word	0x08007744
 800115c:	0800775c 	.word	0x0800775c
 8001160:	08007774 	.word	0x08007774
 8001164:	0800778c 	.word	0x0800778c
 8001168:	080077ac 	.word	0x080077ac
 800116c:	080077cc 	.word	0x080077cc
 8001170:	080077e4 	.word	0x080077e4
 8001174:	080077fc 	.word	0x080077fc

08001178 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af02      	add	r7, sp, #8
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <bno055_readData+0x40>)
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	1dfa      	adds	r2, r7, #7
 800118e:	2364      	movs	r3, #100	; 0x64
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	2150      	movs	r1, #80	; 0x50
 8001196:	f001 ff27 	bl	8002fe8 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 800119a:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <bno055_readData+0x40>)
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	79bb      	ldrb	r3, [r7, #6]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	2264      	movs	r2, #100	; 0x64
 80011a4:	9200      	str	r2, [sp, #0]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	2150      	movs	r1, #80	; 0x50
 80011aa:	f002 f81b 	bl	80031e4 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000090 	.word	0x20000090
 80011bc:	00000000 	.word	0x00000000

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c4:	f000 ff82 	bl	80020cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 f904 	bl	80013d4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f000 fb3c 	bl	8001848 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80011d0:	f000 f972 	bl	80014b8 <_ZL12MX_ADC1_Initv>
  MX_TIM3_Init();
 80011d4:	f000 fa72 	bl	80016bc <_ZL12MX_TIM3_Initv>
  MX_TIM2_Init();
 80011d8:	f000 f9fe 	bl	80015d8 <_ZL12MX_TIM2_Initv>
  MX_USART6_UART_Init();
 80011dc:	f000 fb06 	bl	80017ec <_ZL19MX_USART6_UART_Initv>
  MX_I2C1_Init();
 80011e0:	f000 f9c6 	bl	8001570 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  // BNO055 DRIVERS BORROWED FROM THE FOLLOWING GITHUB REPO: https://github.com/ivyknob/bno055_stm32
  bno055_assignI2C(&hi2c1);
 80011e4:	4868      	ldr	r0, [pc, #416]	; (8001388 <main+0x1c8>)
 80011e6:	f7ff febf 	bl	8000f68 <bno055_assignI2C>
  bno055_setup();
 80011ea:	f7ff fe95 	bl	8000f18 <bno055_setup>
  bno055_setOperationModeNDOF();
 80011ee:	f7ff fe80 	bl	8000ef2 <bno055_setOperationModeNDOF>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Set motor1 levels based on receiver pulse widths
	  	  	  THR_lvl = 9.5427*receiver.THR_Width - 14495;
 80011f2:	4b66      	ldr	r3, [pc, #408]	; (800138c <main+0x1cc>)
 80011f4:	8b1b      	ldrh	r3, [r3, #24]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f994 	bl	8000524 <__aeabi_i2d>
 80011fc:	a35a      	add	r3, pc, #360	; (adr r3, 8001368 <main+0x1a8>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7ff f9f9 	bl	80005f8 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	a358      	add	r3, pc, #352	; (adr r3, 8001370 <main+0x1b0>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff f838 	bl	8000288 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fbfc 	bl	8000a1c <__aeabi_d2iz>
 8001224:	4603      	mov	r3, r0
 8001226:	4a5a      	ldr	r2, [pc, #360]	; (8001390 <main+0x1d0>)
 8001228:	6013      	str	r3, [r2, #0]
	  	  	  STR_lvl = 9.3842*receiver.STR_Width - 14118;
 800122a:	4b58      	ldr	r3, [pc, #352]	; (800138c <main+0x1cc>)
 800122c:	8adb      	ldrh	r3, [r3, #22]
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff f978 	bl	8000524 <__aeabi_i2d>
 8001234:	a350      	add	r3, pc, #320	; (adr r3, 8001378 <main+0x1b8>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	f7ff f9dd 	bl	80005f8 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	a34e      	add	r3, pc, #312	; (adr r3, 8001380 <main+0x1c0>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f81c 	bl	8000288 <__aeabi_dsub>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff fbe0 	bl	8000a1c <__aeabi_d2iz>
 800125c:	4603      	mov	r3, r0
 800125e:	4a4d      	ldr	r2, [pc, #308]	; (8001394 <main+0x1d4>)
 8001260:	6013      	str	r3, [r2, #0]
	  	  	  level_1 = THR_lvl - STR_lvl;
 8001262:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <main+0x1d0>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	4b4b      	ldr	r3, [pc, #300]	; (8001394 <main+0x1d4>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	4a4a      	ldr	r2, [pc, #296]	; (8001398 <main+0x1d8>)
 800126e:	6013      	str	r3, [r2, #0]
	  	  	  level_2 = THR_lvl + STR_lvl;
 8001270:	4b47      	ldr	r3, [pc, #284]	; (8001390 <main+0x1d0>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b47      	ldr	r3, [pc, #284]	; (8001394 <main+0x1d4>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4413      	add	r3, r2
 800127a:	4a48      	ldr	r2, [pc, #288]	; (800139c <main+0x1dc>)
 800127c:	6013      	str	r3, [r2, #0]
	  	  	  level_3 = level_1;
 800127e:	4b46      	ldr	r3, [pc, #280]	; (8001398 <main+0x1d8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a47      	ldr	r2, [pc, #284]	; (80013a0 <main+0x1e0>)
 8001284:	6013      	str	r3, [r2, #0]
	  	  	  level_4 = level_2;
 8001286:	4b45      	ldr	r3, [pc, #276]	; (800139c <main+0x1dc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a46      	ldr	r2, [pc, #280]	; (80013a4 <main+0x1e4>)
 800128c:	6013      	str	r3, [r2, #0]
	  	  	  if ((level_1>200) | (level_1<-200))
 800128e:	4b42      	ldr	r3, [pc, #264]	; (8001398 <main+0x1d8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2bc8      	cmp	r3, #200	; 0xc8
 8001294:	bfcc      	ite	gt
 8001296:	2301      	movgt	r3, #1
 8001298:	2300      	movle	r3, #0
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b3e      	ldr	r3, [pc, #248]	; (8001398 <main+0x1d8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80012a4:	bfb4      	ite	lt
 80012a6:	2301      	movlt	r3, #1
 80012a8:	2300      	movge	r3, #0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00b      	beq.n	80012cc <main+0x10c>
	  	  	  {
	  	  	  motor1.set_level(level_1);
 80012b4:	4b38      	ldr	r3, [pc, #224]	; (8001398 <main+0x1d8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	483b      	ldr	r0, [pc, #236]	; (80013a8 <main+0x1e8>)
 80012bc:	f7ff fd68 	bl	8000d90 <_ZN5motor9set_levelEl>
	  	  	  motor3.set_level(level_3);
 80012c0:	4b37      	ldr	r3, [pc, #220]	; (80013a0 <main+0x1e0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4839      	ldr	r0, [pc, #228]	; (80013ac <main+0x1ec>)
 80012c8:	f7ff fd62 	bl	8000d90 <_ZN5motor9set_levelEl>
	  	  	  }
	  	  	  if ((level_2>200) | (level_2<-200))
 80012cc:	4b33      	ldr	r3, [pc, #204]	; (800139c <main+0x1dc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2bc8      	cmp	r3, #200	; 0xc8
 80012d2:	bfcc      	ite	gt
 80012d4:	2301      	movgt	r3, #1
 80012d6:	2300      	movle	r3, #0
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <main+0x1dc>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f113 0fc8 	cmn.w	r3, #200	; 0xc8
 80012e2:	bfb4      	ite	lt
 80012e4:	2301      	movlt	r3, #1
 80012e6:	2300      	movge	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <main+0x14a>
	  	  	  {
	  	  	  motor2.set_level(level_2);
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <main+0x1dc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4619      	mov	r1, r3
 80012f8:	482d      	ldr	r0, [pc, #180]	; (80013b0 <main+0x1f0>)
 80012fa:	f7ff fd49 	bl	8000d90 <_ZN5motor9set_levelEl>
	  	  	  motor4.set_level(level_4);
 80012fe:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <main+0x1e4>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	482b      	ldr	r0, [pc, #172]	; (80013b4 <main+0x1f4>)
 8001306:	f7ff fd43 	bl	8000d90 <_ZN5motor9set_levelEl>
	  	  	  }

	  	  //Print receiver channel pulse widths at a frequency of 2Hz
	  	  	  current_time = HAL_GetTick();
 800130a:	f000 ff45 	bl	8002198 <HAL_GetTick>
 800130e:	4603      	mov	r3, r0
 8001310:	4a29      	ldr	r2, [pc, #164]	; (80013b8 <main+0x1f8>)
 8001312:	6013      	str	r3, [r2, #0]
	  	  	  if (current_time >= next_time)
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <main+0x1f8>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <main+0x1fc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	f4ff af68 	bcc.w	80011f2 <main+0x32>
	  	  	  {
	  	  		  mess_len = sprintf(mess, "Throttle level is %d\r\nSteering level is %d\r\n\n", receiver.THR_Width, receiver.STR_Width);
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <main+0x1cc>)
 8001324:	8b1b      	ldrh	r3, [r3, #24]
 8001326:	461a      	mov	r2, r3
 8001328:	4b18      	ldr	r3, [pc, #96]	; (800138c <main+0x1cc>)
 800132a:	8adb      	ldrh	r3, [r3, #22]
 800132c:	4924      	ldr	r1, [pc, #144]	; (80013c0 <main+0x200>)
 800132e:	4825      	ldr	r0, [pc, #148]	; (80013c4 <main+0x204>)
 8001330:	f005 f802 	bl	8006338 <siprintf>
 8001334:	4603      	mov	r3, r0
 8001336:	b29a      	uxth	r2, r3
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <main+0x208>)
 800133a:	801a      	strh	r2, [r3, #0]
	  	  		  HAL_UART_Transmit(&huart6,(uint8_t*) &mess, mess_len, 10);
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <main+0x208>)
 800133e:	881a      	ldrh	r2, [r3, #0]
 8001340:	230a      	movs	r3, #10
 8001342:	4920      	ldr	r1, [pc, #128]	; (80013c4 <main+0x204>)
 8001344:	4821      	ldr	r0, [pc, #132]	; (80013cc <main+0x20c>)
 8001346:	f003 fef4 	bl	8005132 <HAL_UART_Transmit>
	  	  		  HAL_UART_Receive_IT(&huart6,(uint8_t*) &mess, 1);
 800134a:	2201      	movs	r2, #1
 800134c:	491d      	ldr	r1, [pc, #116]	; (80013c4 <main+0x204>)
 800134e:	481f      	ldr	r0, [pc, #124]	; (80013cc <main+0x20c>)
 8001350:	f003 ff81 	bl	8005256 <HAL_UART_Receive_IT>
	  	  		  next_time = current_time+period;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <main+0x210>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <main+0x1f8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a16      	ldr	r2, [pc, #88]	; (80013bc <main+0x1fc>)
 8001362:	6013      	str	r3, [r2, #0]
	  	  	  THR_lvl = 9.5427*receiver.THR_Width - 14495;
 8001364:	e745      	b.n	80011f2 <main+0x32>
 8001366:	bf00      	nop
 8001368:	c63f1412 	.word	0xc63f1412
 800136c:	402315dc 	.word	0x402315dc
 8001370:	00000000 	.word	0x00000000
 8001374:	40cc4f80 	.word	0x40cc4f80
 8001378:	dcc63f14 	.word	0xdcc63f14
 800137c:	4022c4b5 	.word	0x4022c4b5
 8001380:	00000000 	.word	0x00000000
 8001384:	40cb9300 	.word	0x40cb9300
 8001388:	200000dc 	.word	0x200000dc
 800138c:	2000027c 	.word	0x2000027c
 8001390:	20000204 	.word	0x20000204
 8001394:	20000208 	.word	0x20000208
 8001398:	2000020c 	.word	0x2000020c
 800139c:	20000210 	.word	0x20000210
 80013a0:	20000214 	.word	0x20000214
 80013a4:	20000218 	.word	0x20000218
 80013a8:	2000021c 	.word	0x2000021c
 80013ac:	2000024c 	.word	0x2000024c
 80013b0:	20000234 	.word	0x20000234
 80013b4:	20000264 	.word	0x20000264
 80013b8:	2000029c 	.word	0x2000029c
 80013bc:	200002a0 	.word	0x200002a0
 80013c0:	08007814 	.word	0x08007814
 80013c4:	200002a4 	.word	0x200002a4
 80013c8:	200002d6 	.word	0x200002d6
 80013cc:	200001c0 	.word	0x200001c0
 80013d0:	20000000 	.word	0x20000000

080013d4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	; 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2230      	movs	r2, #48	; 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f004 ff12 	bl	800620c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <_Z18SystemClock_Configv+0xdc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a2b      	ldr	r2, [pc, #172]	; (80014b0 <_Z18SystemClock_Configv+0xdc>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b29      	ldr	r3, [pc, #164]	; (80014b0 <_Z18SystemClock_Configv+0xdc>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	4b26      	ldr	r3, [pc, #152]	; (80014b4 <_Z18SystemClock_Configv+0xe0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a25      	ldr	r2, [pc, #148]	; (80014b4 <_Z18SystemClock_Configv+0xe0>)
 800141e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <_Z18SystemClock_Configv+0xe0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001430:	2301      	movs	r3, #1
 8001432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143a:	2302      	movs	r3, #2
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001444:	2319      	movs	r3, #25
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001448:	23c0      	movs	r3, #192	; 0xc0
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001450:	2304      	movs	r3, #4
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4618      	mov	r0, r3
 800145a:	f002 fc31 	bl	8003cc0 <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800146e:	f000 fa97 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001472:	230f      	movs	r3, #15
 8001474:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001476:	2302      	movs	r3, #2
 8001478:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001482:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2103      	movs	r1, #3
 800148e:	4618      	mov	r0, r3
 8001490:	f002 fe8e 	bl	80041b0 <HAL_RCC_ClockConfig>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	bf14      	ite	ne
 800149a:	2301      	movne	r3, #1
 800149c:	2300      	moveq	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80014a4:	f000 fa7c 	bl	80019a0 <Error_Handler>
  }
}
 80014a8:	bf00      	nop
 80014aa:	3750      	adds	r7, #80	; 0x50
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40007000 	.word	0x40007000

080014b8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014be:	463b      	mov	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014cc:	4a26      	ldr	r2, [pc, #152]	; (8001568 <_ZL12MX_ADC1_Initv+0xb0>)
 80014ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014d8:	4b22      	ldr	r3, [pc, #136]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014e4:	4b1f      	ldr	r3, [pc, #124]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014f2:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <_ZL12MX_ADC1_Initv+0xb4>)
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 8001506:	2201      	movs	r2, #1
 8001508:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800150a:	4b16      	ldr	r3, [pc, #88]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001512:	4b14      	ldr	r3, [pc, #80]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 8001514:	2201      	movs	r2, #1
 8001516:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001518:	4812      	ldr	r0, [pc, #72]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 800151a:	f000 fe6d 	bl	80021f8 <HAL_ADC_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	bf14      	ite	ne
 8001524:	2301      	movne	r3, #1
 8001526:	2300      	moveq	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 800152e:	f000 fa37 	bl	80019a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001536:	2301      	movs	r3, #1
 8001538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	4619      	mov	r1, r3
 8001542:	4808      	ldr	r0, [pc, #32]	; (8001564 <_ZL12MX_ADC1_Initv+0xac>)
 8001544:	f000 fe9c 	bl	8002280 <HAL_ADC_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	bf14      	ite	ne
 800154e:	2301      	movne	r3, #1
 8001550:	2300      	moveq	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8001558:	f000 fa22 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000094 	.word	0x20000094
 8001568:	40012000 	.word	0x40012000
 800156c:	0f000001 	.word	0x0f000001

08001570 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b15      	ldr	r3, [pc, #84]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 8001576:	4a16      	ldr	r2, [pc, #88]	; (80015d0 <_ZL12MX_I2C1_Initv+0x60>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800157a:	4b14      	ldr	r3, [pc, #80]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 800157c:	4a15      	ldr	r2, [pc, #84]	; (80015d4 <_ZL12MX_I2C1_Initv+0x64>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001580:	4b12      	ldr	r3, [pc, #72]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 800158e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001592:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <_ZL12MX_I2C1_Initv+0x5c>)
 80015ae:	f001 fbd7 	bl	8002d60 <HAL_I2C_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf14      	ite	ne
 80015b8:	2301      	movne	r3, #1
 80015ba:	2300      	moveq	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80015c2:	f000 f9ed 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	200000dc 	.word	0x200000dc
 80015d0:	40005400 	.word	0x40005400
 80015d4:	000186a0 	.word	0x000186a0

080015d8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015e8:	463b      	mov	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f4:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 80015f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015fc:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001608:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 800160a:	f04f 32ff 	mov.w	r2, #4294967295
 800160e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001610:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 8001612:	2200      	movs	r2, #0
 8001614:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001616:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800161c:	4826      	ldr	r0, [pc, #152]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 800161e:	f002 fff6 	bl	800460e <HAL_TIM_IC_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf14      	ite	ne
 8001628:	2301      	movne	r3, #1
 800162a:	2300      	moveq	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001632:	f000 f9b5 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	481c      	ldr	r0, [pc, #112]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 8001646:	f003 fcb9 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf14      	ite	ne
 8001650:	2301      	movne	r3, #1
 8001652:	2300      	moveq	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 800165a:	f000 f9a1 	bl	80019a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001662:	2301      	movs	r3, #1
 8001664:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	4810      	ldr	r0, [pc, #64]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 8001676:	f003 f819 	bl	80046ac <HAL_TIM_IC_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <_ZL12MX_TIM2_Initv+0xb6>
  {
    Error_Handler();
 800168a:	f000 f989 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800168e:	463b      	mov	r3, r7
 8001690:	2204      	movs	r2, #4
 8001692:	4619      	mov	r1, r3
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <_ZL12MX_TIM2_Initv+0xe0>)
 8001696:	f003 f809 	bl	80046ac <HAL_TIM_IC_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 80016aa:	f000 f979 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000130 	.word	0x20000130

080016bc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c2:	f107 0320 	add.w	r3, r7, #32
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	611a      	str	r2, [r3, #16]
 80016da:	615a      	str	r2, [r3, #20]
 80016dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016de:	4b41      	ldr	r3, [pc, #260]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80016e0:	4a41      	ldr	r2, [pc, #260]	; (80017e8 <_ZL12MX_TIM3_Initv+0x12c>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016e4:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b3e      	ldr	r3, [pc, #248]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016f0:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80016f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fe:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001704:	4837      	ldr	r0, [pc, #220]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 8001706:	f002 ff33 	bl	8004570 <HAL_TIM_PWM_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 800171a:	f000 f941 	bl	80019a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001726:	f107 0320 	add.w	r3, r7, #32
 800172a:	4619      	mov	r1, r3
 800172c:	482d      	ldr	r0, [pc, #180]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 800172e:	f003 fc45 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	bf14      	ite	ne
 8001738:	2301      	movne	r3, #1
 800173a:	2300      	moveq	r3, #0
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8001742:	f000 f92d 	bl	80019a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001746:	2360      	movs	r3, #96	; 0x60
 8001748:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	4619      	mov	r1, r3
 800175c:	4821      	ldr	r0, [pc, #132]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 800175e:	f003 f841 	bl	80047e4 <HAL_TIM_PWM_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8001772:	f000 f915 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2204      	movs	r2, #4
 800177a:	4619      	mov	r1, r3
 800177c:	4819      	ldr	r0, [pc, #100]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 800177e:	f003 f831 	bl	80047e4 <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf14      	ite	ne
 8001788:	2301      	movne	r3, #1
 800178a:	2300      	moveq	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 8001792:	f000 f905 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2208      	movs	r2, #8
 800179a:	4619      	mov	r1, r3
 800179c:	4811      	ldr	r0, [pc, #68]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 800179e:	f003 f821 	bl	80047e4 <HAL_TIM_PWM_ConfigChannel>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <_ZL12MX_TIM3_Initv+0xfa>
  {
    Error_Handler();
 80017b2:	f000 f8f5 	bl	80019a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	220c      	movs	r2, #12
 80017ba:	4619      	mov	r1, r3
 80017bc:	4809      	ldr	r0, [pc, #36]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80017be:	f003 f811 	bl	80047e4 <HAL_TIM_PWM_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf14      	ite	ne
 80017c8:	2301      	movne	r3, #1
 80017ca:	2300      	moveq	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <_ZL12MX_TIM3_Initv+0x11a>
  {
    Error_Handler();
 80017d2:	f000 f8e5 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017d6:	4803      	ldr	r0, [pc, #12]	; (80017e4 <_ZL12MX_TIM3_Initv+0x128>)
 80017d8:	f000 faba 	bl	8001d50 <HAL_TIM_MspPostInit>

}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	; 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000178 	.word	0x20000178
 80017e8:	40000400 	.word	0x40000400

080017ec <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017f0:	4b13      	ldr	r3, [pc, #76]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 80017f2:	4a14      	ldr	r2, [pc, #80]	; (8001844 <_ZL19MX_USART6_UART_Initv+0x58>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001822:	4807      	ldr	r0, [pc, #28]	; (8001840 <_ZL19MX_USART6_UART_Initv+0x54>)
 8001824:	f003 fc38 	bl	8005098 <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf14      	ite	ne
 800182e:	2301      	movne	r3, #1
 8001830:	2300      	moveq	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8001838:	f000 f8b2 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200001c0 	.word	0x200001c0
 8001844:	40011400 	.word	0x40011400

08001848 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	4b4b      	ldr	r3, [pc, #300]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a4a      	ldr	r2, [pc, #296]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b48      	ldr	r3, [pc, #288]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b44      	ldr	r3, [pc, #272]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a43      	ldr	r2, [pc, #268]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 8001884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b41      	ldr	r3, [pc, #260]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a3c      	ldr	r2, [pc, #240]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b36      	ldr	r3, [pc, #216]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a35      	ldr	r2, [pc, #212]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b33      	ldr	r3, [pc, #204]	; (8001990 <_ZL12MX_GPIO_Initv+0x148>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOT1_PH_GPIO_Port, MOT1_PH_Pin, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2120      	movs	r1, #32
 80018d2:	4830      	ldr	r0, [pc, #192]	; (8001994 <_ZL12MX_GPIO_Initv+0x14c>)
 80018d4:	f001 fa2a 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOT2_PH_Pin|MOT3_PH_Pin|MOT4_PH_Pin|MOTORnSLEEP_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	f243 4104 	movw	r1, #13316	; 0x3404
 80018de:	482e      	ldr	r0, [pc, #184]	; (8001998 <_ZL12MX_GPIO_Initv+0x150>)
 80018e0:	f001 fa24 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FAULT_n_Pin */
  GPIO_InitStruct.Pin = FAULT_n_Pin;
 80018e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FAULT_n_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	4828      	ldr	r0, [pc, #160]	; (800199c <_ZL12MX_GPIO_Initv+0x154>)
 80018fa:	f001 f893 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOT1_PH_Pin */
  GPIO_InitStruct.Pin = MOT1_PH_Pin;
 80018fe:	2320      	movs	r3, #32
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	2301      	movs	r3, #1
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOT1_PH_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	481f      	ldr	r0, [pc, #124]	; (8001994 <_ZL12MX_GPIO_Initv+0x14c>)
 8001916:	f001 f885 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOT2_PH_Pin MOT3_PH_Pin MOT4_PH_Pin MOTORnSLEEP_Pin */
  GPIO_InitStruct.Pin = MOT2_PH_Pin|MOT3_PH_Pin|MOT4_PH_Pin|MOTORnSLEEP_Pin;
 800191a:	f243 4304 	movw	r3, #13316	; 0x3404
 800191e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001920:	2301      	movs	r3, #1
 8001922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4619      	mov	r1, r3
 8001932:	4819      	ldr	r0, [pc, #100]	; (8001998 <_ZL12MX_GPIO_Initv+0x150>)
 8001934:	f001 f876 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LS4_Pin LS3_Pin */
  GPIO_InitStruct.Pin = LS4_Pin|LS3_Pin;
 8001938:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800193c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4619      	mov	r1, r3
 800194c:	4812      	ldr	r0, [pc, #72]	; (8001998 <_ZL12MX_GPIO_Initv+0x150>)
 800194e:	f001 f869 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS1_Pin */
  GPIO_InitStruct.Pin = LS1_Pin;
 8001952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS1_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	480b      	ldr	r0, [pc, #44]	; (8001994 <_ZL12MX_GPIO_Initv+0x14c>)
 8001968:	f001 f85c 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS2_Pin */
  GPIO_InitStruct.Pin = LS2_Pin;
 800196c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001972:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LS2_GPIO_Port, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4804      	ldr	r0, [pc, #16]	; (8001994 <_ZL12MX_GPIO_Initv+0x14c>)
 8001984:	f001 f84e 	bl	8002a24 <HAL_GPIO_Init>

}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	; 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020400 	.word	0x40020400
 800199c:	40020800 	.word	0x40020800

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af06      	add	r7, sp, #24
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d166      	bne.n	8001a8a <_Z41__static_initialization_and_destruction_0ii+0xde>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d161      	bne.n	8001a8a <_Z41__static_initialization_and_destruction_0ii+0xde>
motor		motor1 = motor(&htim3,
 80019c6:	2300      	movs	r3, #0
 80019c8:	9303      	str	r3, [sp, #12]
 80019ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	2320      	movs	r3, #32
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 80019da:	2200      	movs	r2, #0
 80019dc:	492f      	ldr	r1, [pc, #188]	; (8001a9c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80019de:	4830      	ldr	r0, [pc, #192]	; (8001aa0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 80019e0:	f7ff f9c6 	bl	8000d70 <_ZN5motorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_ts>
motor   	motor2 = motor(&htim3,
 80019e4:	2300      	movs	r3, #0
 80019e6:	9303      	str	r3, [sp, #12]
 80019e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	2304      	movs	r3, #4
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	4b27      	ldr	r3, [pc, #156]	; (8001a94 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80019f8:	2204      	movs	r2, #4
 80019fa:	4928      	ldr	r1, [pc, #160]	; (8001a9c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80019fc:	4829      	ldr	r0, [pc, #164]	; (8001aa4 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80019fe:	f7ff f9b7 	bl	8000d70 <_ZN5motorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_ts>
motor 		motor3 = motor(&htim3,
 8001a02:	2300      	movs	r3, #0
 8001a04:	9303      	str	r3, [sp, #12]
 8001a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001a18:	2208      	movs	r2, #8
 8001a1a:	4920      	ldr	r1, [pc, #128]	; (8001a9c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8001a1c:	4822      	ldr	r0, [pc, #136]	; (8001aa8 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8001a1e:	f7ff f9a7 	bl	8000d70 <_ZN5motorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_ts>
motor 		motor4 = motor(&htim3,
 8001a22:	2300      	movs	r3, #0
 8001a24:	9303      	str	r3, [sp, #12]
 8001a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8001a38:	220c      	movs	r2, #12
 8001a3a:	4918      	ldr	r1, [pc, #96]	; (8001a9c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8001a3c:	481b      	ldr	r0, [pc, #108]	; (8001aac <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8001a3e:	f7ff f997 	bl	8000d70 <_ZN5motorC1EP17TIM_HandleTypeDeftP12GPIO_TypeDeftS3_ts>
FlySky 		receiver = FlySky(&htim2,TIM_CHANNEL_1,TIM_CHANNEL_2,0,0,0,0,0,0);
 8001a42:	2300      	movs	r3, #0
 8001a44:	9305      	str	r3, [sp, #20]
 8001a46:	2300      	movs	r3, #0
 8001a48:	9304      	str	r3, [sp, #16]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9303      	str	r3, [sp, #12]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	9302      	str	r3, [sp, #8]
 8001a52:	2300      	movs	r3, #0
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	2300      	movs	r3, #0
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4914      	ldr	r1, [pc, #80]	; (8001ab0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8001a60:	4814      	ldr	r0, [pc, #80]	; (8001ab4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8001a62:	f7ff fa0b 	bl	8000e7c <_ZN6FlySkyC1EP17TIM_HandleTypeDefmmhhtttt>
uint32_t start_time = HAL_GetTick();
 8001a66:	f000 fb97 	bl	8002198 <HAL_GetTick>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8001a6e:	6013      	str	r3, [r2, #0]
uint32_t current_time = HAL_GetTick();
 8001a70:	f000 fb92 	bl	8002198 <HAL_GetTick>
 8001a74:	4603      	mov	r3, r0
 8001a76:	4a11      	ldr	r2, [pc, #68]	; (8001abc <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001a78:	6013      	str	r3, [r2, #0]
uint32_t next_time = current_time + period;
 8001a7a:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8001a88:	6013      	str	r3, [r2, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40020400 	.word	0x40020400
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	20000178 	.word	0x20000178
 8001aa0:	2000021c 	.word	0x2000021c
 8001aa4:	20000234 	.word	0x20000234
 8001aa8:	2000024c 	.word	0x2000024c
 8001aac:	20000264 	.word	0x20000264
 8001ab0:	20000130 	.word	0x20000130
 8001ab4:	2000027c 	.word	0x2000027c
 8001ab8:	20000298 	.word	0x20000298
 8001abc:	2000029c 	.word	0x2000029c
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	200002a0 	.word	0x200002a0

08001ac8 <_GLOBAL__sub_I__bno055_i2c_port>:
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f7ff ff6b 	bl	80019ac <_Z41__static_initialization_and_destruction_0ii>
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_MspInit+0x4c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <HAL_MspInit+0x4c>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_MspInit+0x4c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_MspInit+0x4c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_MspInit+0x4c>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_MspInit+0x4c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800

08001b28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_ADC_MspInit+0x7c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d127      	bne.n	8001b9a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_ADC_MspInit+0x80>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <HAL_ADC_MspInit+0x80>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_ADC_MspInit+0x80>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	613b      	str	r3, [r7, #16]
 8001b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_ADC_MspInit+0x80>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <HAL_ADC_MspInit+0x80>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_ADC_MspInit+0x80>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC1_I1_Pin|ADC1_I2_Pin|ADC1_I3_Pin|ADC1_I4_Pin
 8001b82:	231f      	movs	r3, #31
 8001b84:	617b      	str	r3, [r7, #20]
                          |ADC1_QBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b86:	2303      	movs	r3, #3
 8001b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_ADC_MspInit+0x84>)
 8001b96:	f000 ff45 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3728      	adds	r7, #40	; 0x28
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40012000 	.word	0x40012000
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000

08001bb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a19      	ldr	r2, [pc, #100]	; (8001c34 <HAL_I2C_MspInit+0x84>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d12b      	bne.n	8001c2a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_I2C_MspInit+0x88>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a17      	ldr	r2, [pc, #92]	; (8001c38 <HAL_I2C_MspInit+0x88>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <HAL_I2C_MspInit+0x88>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bee:	23c0      	movs	r3, #192	; 0xc0
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf2:	2312      	movs	r3, #18
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	480c      	ldr	r0, [pc, #48]	; (8001c3c <HAL_I2C_MspInit+0x8c>)
 8001c0a:	f000 ff0b 	bl	8002a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <HAL_I2C_MspInit+0x88>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <HAL_I2C_MspInit+0x88>)
 8001c18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_I2C_MspInit+0x88>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	; 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40005400 	.word	0x40005400
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020400 	.word	0x40020400

08001c40 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c60:	d14a      	bne.n	8001cf8 <HAL_TIM_IC_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_TIM_IC_MspInit+0xc0>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <HAL_TIM_IC_MspInit+0xc0>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <HAL_TIM_IC_MspInit+0xc0>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b1f      	ldr	r3, [pc, #124]	; (8001d00 <HAL_TIM_IC_MspInit+0xc0>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a1e      	ldr	r2, [pc, #120]	; (8001d00 <HAL_TIM_IC_MspInit+0xc0>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_TIM_IC_MspInit+0xc0>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <HAL_TIM_IC_MspInit+0xc0>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <HAL_TIM_IC_MspInit+0xc0>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_TIM_IC_MspInit+0xc0>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = STR_Pin;
 8001cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STR_GPIO_Port, &GPIO_InitStruct);
 8001ccc:	f107 0314 	add.w	r3, r7, #20
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	480c      	ldr	r0, [pc, #48]	; (8001d04 <HAL_TIM_IC_MspInit+0xc4>)
 8001cd4:	f000 fea6 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = THR_Pin;
 8001cd8:	2308      	movs	r3, #8
 8001cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(THR_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <HAL_TIM_IC_MspInit+0xc8>)
 8001cf4:	f000 fe96 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	; 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020400 	.word	0x40020400

08001d0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d10d      	bne.n	8001d3a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_TIM_PWM_MspInit+0x40>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <HAL_TIM_PWM_MspInit+0x40>)
 8001d28:	f043 0302 	orr.w	r3, r3, #2
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <HAL_TIM_PWM_MspInit+0x40>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40023800 	.word	0x40023800

08001d50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a21      	ldr	r2, [pc, #132]	; (8001df4 <HAL_TIM_MspPostInit+0xa4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d13b      	bne.n	8001dea <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_TIM_MspPostInit+0xa8>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_TIM_MspPostInit+0xa8>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_TIM_MspPostInit+0xa8>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	613b      	str	r3, [r7, #16]
 8001d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_TIM_MspPostInit+0xa8>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <HAL_TIM_MspPostInit+0xa8>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_TIM_MspPostInit+0xa8>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = MOT1_EN_Pin|MOT2_EN_Pin;
 8001daa:	23c0      	movs	r3, #192	; 0xc0
 8001dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	480d      	ldr	r0, [pc, #52]	; (8001dfc <HAL_TIM_MspPostInit+0xac>)
 8001dc6:	f000 fe2d 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOT3_EN_Pin|MOT4_EN_Pin;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	4806      	ldr	r0, [pc, #24]	; (8001e00 <HAL_TIM_MspPostInit+0xb0>)
 8001de6:	f000 fe1d 	bl	8002a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3728      	adds	r7, #40	; 0x28
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40000400 	.word	0x40000400
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	40020400 	.word	0x40020400

08001e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_UART_MspInit+0x94>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d134      	bne.n	8001e90 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <HAL_UART_MspInit+0x98>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <HAL_UART_MspInit+0x98>)
 8001e30:	f043 0320 	orr.w	r3, r3, #32
 8001e34:	6453      	str	r3, [r2, #68]	; 0x44
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_UART_MspInit+0x98>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_UART_MspInit+0x98>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <HAL_UART_MspInit+0x98>)
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	6313      	str	r3, [r2, #48]	; 0x30
 8001e52:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_UART_MspInit+0x98>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e70:	2308      	movs	r3, #8
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <HAL_UART_MspInit+0x9c>)
 8001e7c:	f000 fdd2 	bl	8002a24 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001e80:	2200      	movs	r2, #0
 8001e82:	2100      	movs	r1, #0
 8001e84:	2047      	movs	r0, #71	; 0x47
 8001e86:	f000 fd04 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001e8a:	2047      	movs	r0, #71	; 0x47
 8001e8c:	f000 fd1d 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e90:	bf00      	nop
 8001e92:	3728      	adds	r7, #40	; 0x28
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40011400 	.word	0x40011400
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020000 	.word	0x40020000

08001ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <NMI_Handler+0x4>

08001eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <HardFault_Handler+0x4>

08001eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <MemManage_Handler+0x4>

08001eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eba:	e7fe      	b.n	8001eba <BusFault_Handler+0x4>

08001ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec0:	e7fe      	b.n	8001ec0 <UsageFault_Handler+0x4>

08001ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef0:	f000 f93e 	bl	8002170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <USART6_IRQHandler+0x10>)
 8001efe:	f003 f9db 	bl	80052b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	200001c0 	.word	0x200001c0

08001f0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	e00a      	b.n	8001f34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f1e:	f3af 8000 	nop.w
 8001f22:	4601      	mov	r1, r0
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	60ba      	str	r2, [r7, #8]
 8001f2a:	b2ca      	uxtb	r2, r1
 8001f2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	3301      	adds	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	dbf0      	blt.n	8001f1e <_read+0x12>
	}

return len;
 8001f3c:	687b      	ldr	r3, [r7, #4]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3718      	adds	r7, #24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	e009      	b.n	8001f6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	60ba      	str	r2, [r7, #8]
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	dbf1      	blt.n	8001f58 <_write+0x12>
	}
	return len;
 8001f74:	687b      	ldr	r3, [r7, #4]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <_close>:

int _close(int file)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
	return -1;
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fa6:	605a      	str	r2, [r3, #4]
	return 0;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <_isatty>:

int _isatty(int file)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
	return 1;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
	return 0;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
	...

08001fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff0:	4a14      	ldr	r2, [pc, #80]	; (8002044 <_sbrk+0x5c>)
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <_sbrk+0x60>)
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d102      	bne.n	800200a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <_sbrk+0x64>)
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <_sbrk+0x68>)
 8002008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <_sbrk+0x64>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	429a      	cmp	r2, r3
 8002016:	d207      	bcs.n	8002028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002018:	f004 f8c0 	bl	800619c <__errno>
 800201c:	4603      	mov	r3, r0
 800201e:	220c      	movs	r2, #12
 8002020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002022:	f04f 33ff 	mov.w	r3, #4294967295
 8002026:	e009      	b.n	800203c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <_sbrk+0x64>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800202e:	4b07      	ldr	r3, [pc, #28]	; (800204c <_sbrk+0x64>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	4a05      	ldr	r2, [pc, #20]	; (800204c <_sbrk+0x64>)
 8002038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203a:	68fb      	ldr	r3, [r7, #12]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20020000 	.word	0x20020000
 8002048:	00000400 	.word	0x00000400
 800204c:	200002d8 	.word	0x200002d8
 8002050:	200002f0 	.word	0x200002f0

08002054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <SystemInit+0x20>)
 800205a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <SystemInit+0x20>)
 8002060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800207c:	480d      	ldr	r0, [pc, #52]	; (80020b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800207e:	490e      	ldr	r1, [pc, #56]	; (80020b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002080:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002084:	e002      	b.n	800208c <LoopCopyDataInit>

08002086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800208a:	3304      	adds	r3, #4

0800208c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800208c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002090:	d3f9      	bcc.n	8002086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002092:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002094:	4c0b      	ldr	r4, [pc, #44]	; (80020c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002098:	e001      	b.n	800209e <LoopFillZerobss>

0800209a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800209a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800209c:	3204      	adds	r2, #4

0800209e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a0:	d3fb      	bcc.n	800209a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020a2:	f7ff ffd7 	bl	8002054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020a6:	f004 f87f 	bl	80061a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020aa:	f7ff f889 	bl	80011c0 <main>
  bx  lr    
 80020ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80020bc:	08007908 	.word	0x08007908
  ldr r2, =_sbss
 80020c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80020c4:	200002f0 	.word	0x200002f0

080020c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c8:	e7fe      	b.n	80020c8 <ADC_IRQHandler>
	...

080020cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <HAL_Init+0x40>)
 80020d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_Init+0x40>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0a      	ldr	r2, [pc, #40]	; (800210c <HAL_Init+0x40>)
 80020e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_Init+0x40>)
 80020ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f4:	2003      	movs	r0, #3
 80020f6:	f000 fbc1 	bl	800287c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fa:	200f      	movs	r0, #15
 80020fc:	f000 f808 	bl	8002110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002100:	f7ff fcea 	bl	8001ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023c00 	.word	0x40023c00

08002110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_InitTick+0x54>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_InitTick+0x58>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002126:	fbb3 f3f1 	udiv	r3, r3, r1
 800212a:	fbb2 f3f3 	udiv	r3, r2, r3
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fbd9 	bl	80028e6 <HAL_SYSTICK_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e00e      	b.n	800215c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b0f      	cmp	r3, #15
 8002142:	d80a      	bhi.n	800215a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002144:	2200      	movs	r2, #0
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	f04f 30ff 	mov.w	r0, #4294967295
 800214c:	f000 fba1 	bl	8002892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002150:	4a06      	ldr	r2, [pc, #24]	; (800216c <HAL_InitTick+0x5c>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20000004 	.word	0x20000004
 8002168:	2000000c 	.word	0x2000000c
 800216c:	20000008 	.word	0x20000008

08002170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_IncTick+0x20>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	461a      	mov	r2, r3
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_IncTick+0x24>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4413      	add	r3, r2
 8002180:	4a04      	ldr	r2, [pc, #16]	; (8002194 <HAL_IncTick+0x24>)
 8002182:	6013      	str	r3, [r2, #0]
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	2000000c 	.word	0x2000000c
 8002194:	200002dc 	.word	0x200002dc

08002198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return uwTick;
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <HAL_GetTick+0x14>)
 800219e:	681b      	ldr	r3, [r3, #0]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	200002dc 	.word	0x200002dc

080021b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff ffee 	bl	8002198 <HAL_GetTick>
 80021bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c8:	d005      	beq.n	80021d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_Delay+0x44>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4413      	add	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021d6:	bf00      	nop
 80021d8:	f7ff ffde 	bl	8002198 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d8f7      	bhi.n	80021d8 <HAL_Delay+0x28>
  {
  }
}
 80021e8:	bf00      	nop
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000000c 	.word	0x2000000c

080021f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e033      	b.n	8002276 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7ff fc86 	bl	8001b28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 0310 	and.w	r3, r3, #16
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800223e:	f023 0302 	bic.w	r3, r3, #2
 8002242:	f043 0202 	orr.w	r2, r3, #2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f94a 	bl	80024e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
 8002266:	e001      	b.n	800226c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002274:	7bfb      	ldrb	r3, [r7, #15]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x1c>
 8002298:	2302      	movs	r3, #2
 800229a:	e113      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x244>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b09      	cmp	r3, #9
 80022aa:	d925      	bls.n	80022f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68d9      	ldr	r1, [r3, #12]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	3b1e      	subs	r3, #30
 80022c2:	2207      	movs	r2, #7
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43da      	mvns	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	400a      	ands	r2, r1
 80022d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68d9      	ldr	r1, [r3, #12]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	4603      	mov	r3, r0
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4403      	add	r3, r0
 80022ea:	3b1e      	subs	r3, #30
 80022ec:	409a      	lsls	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	e022      	b.n	800233e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6919      	ldr	r1, [r3, #16]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	2207      	movs	r2, #7
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	400a      	ands	r2, r1
 800231a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6919      	ldr	r1, [r3, #16]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	4618      	mov	r0, r3
 800232e:	4603      	mov	r3, r0
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4403      	add	r3, r0
 8002334:	409a      	lsls	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b06      	cmp	r3, #6
 8002344:	d824      	bhi.n	8002390 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	3b05      	subs	r3, #5
 8002358:	221f      	movs	r2, #31
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	400a      	ands	r2, r1
 8002366:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	3b05      	subs	r3, #5
 8002382:	fa00 f203 	lsl.w	r2, r0, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	635a      	str	r2, [r3, #52]	; 0x34
 800238e:	e04c      	b.n	800242a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	d824      	bhi.n	80023e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	3b23      	subs	r3, #35	; 0x23
 80023aa:	221f      	movs	r2, #31
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43da      	mvns	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	400a      	ands	r2, r1
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3b23      	subs	r3, #35	; 0x23
 80023d4:	fa00 f203 	lsl.w	r2, r0, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
 80023e0:	e023      	b.n	800242a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	3b41      	subs	r3, #65	; 0x41
 80023f4:	221f      	movs	r2, #31
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	400a      	ands	r2, r1
 8002402:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	4618      	mov	r0, r3
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	3b41      	subs	r3, #65	; 0x41
 800241e:	fa00 f203 	lsl.w	r2, r0, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800242a:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <HAL_ADC_ConfigChannel+0x250>)
 800242c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a28      	ldr	r2, [pc, #160]	; (80024d4 <HAL_ADC_ConfigChannel+0x254>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d10f      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1d8>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b12      	cmp	r3, #18
 800243e:	d10b      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_ADC_ConfigChannel+0x254>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d12b      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x23a>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <HAL_ADC_ConfigChannel+0x258>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d003      	beq.n	8002474 <HAL_ADC_ConfigChannel+0x1f4>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b11      	cmp	r3, #17
 8002472:	d122      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <HAL_ADC_ConfigChannel+0x258>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d111      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_ADC_ConfigChannel+0x25c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_ADC_ConfigChannel+0x260>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	0c9a      	lsrs	r2, r3, #18
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024ac:	e002      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f9      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40012300 	.word	0x40012300
 80024d4:	40012000 	.word	0x40012000
 80024d8:	10000012 	.word	0x10000012
 80024dc:	20000004 	.word	0x20000004
 80024e0:	431bde83 	.word	0x431bde83

080024e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ec:	4b79      	ldr	r3, [pc, #484]	; (80026d4 <ADC_Init+0x1f0>)
 80024ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	021a      	lsls	r2, r3, #8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800253c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800255e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6899      	ldr	r1, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	4a58      	ldr	r2, [pc, #352]	; (80026d8 <ADC_Init+0x1f4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d022      	beq.n	80025c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800258a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6899      	ldr	r1, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6899      	ldr	r1, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	e00f      	b.n	80025e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0202 	bic.w	r2, r2, #2
 80025f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7e1b      	ldrb	r3, [r3, #24]
 80025fc:	005a      	lsls	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01b      	beq.n	8002648 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800262e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	3b01      	subs	r3, #1
 800263c:	035a      	lsls	r2, r3, #13
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	e007      	b.n	8002658 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002656:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	3b01      	subs	r3, #1
 8002674:	051a      	lsls	r2, r3, #20
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800268c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800269a:	025a      	lsls	r2, r3, #9
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6899      	ldr	r1, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	029a      	lsls	r2, r3, #10
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	40012300 	.word	0x40012300
 80026d8:	0f000001 	.word	0x0f000001

080026dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f8:	4013      	ands	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270e:	4a04      	ldr	r2, [pc, #16]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	60d3      	str	r3, [r2, #12]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <__NVIC_GetPriorityGrouping+0x18>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 0307 	and.w	r3, r3, #7
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	db0b      	blt.n	800276a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	4907      	ldr	r1, [pc, #28]	; (8002778 <__NVIC_EnableIRQ+0x38>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2001      	movs	r0, #1
 8002762:	fa00 f202 	lsl.w	r2, r0, r2
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000e100 	.word	0xe000e100

0800277c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	db0a      	blt.n	80027a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	490c      	ldr	r1, [pc, #48]	; (80027c8 <__NVIC_SetPriority+0x4c>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	0112      	lsls	r2, r2, #4
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	440b      	add	r3, r1
 80027a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a4:	e00a      	b.n	80027bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4908      	ldr	r1, [pc, #32]	; (80027cc <__NVIC_SetPriority+0x50>)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	3b04      	subs	r3, #4
 80027b4:	0112      	lsls	r2, r2, #4
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	440b      	add	r3, r1
 80027ba:	761a      	strb	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000e100 	.word	0xe000e100
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f1c3 0307 	rsb	r3, r3, #7
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	bf28      	it	cs
 80027ee:	2304      	movcs	r3, #4
 80027f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d902      	bls.n	8002800 <NVIC_EncodePriority+0x30>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3b03      	subs	r3, #3
 80027fe:	e000      	b.n	8002802 <NVIC_EncodePriority+0x32>
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	f04f 32ff 	mov.w	r2, #4294967295
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	401a      	ands	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002818:	f04f 31ff 	mov.w	r1, #4294967295
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43d9      	mvns	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	4313      	orrs	r3, r2
         );
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002848:	d301      	bcc.n	800284e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284a:	2301      	movs	r3, #1
 800284c:	e00f      	b.n	800286e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <SysTick_Config+0x40>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002856:	210f      	movs	r1, #15
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f7ff ff8e 	bl	800277c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <SysTick_Config+0x40>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <SysTick_Config+0x40>)
 8002868:	2207      	movs	r2, #7
 800286a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	e000e010 	.word	0xe000e010

0800287c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff29 	bl	80026dc <__NVIC_SetPriorityGrouping>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a4:	f7ff ff3e 	bl	8002724 <__NVIC_GetPriorityGrouping>
 80028a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7ff ff8e 	bl	80027d0 <NVIC_EncodePriority>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff5d 	bl	800277c <__NVIC_SetPriority>
}
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff31 	bl	8002740 <__NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ffa2 	bl	8002838 <SysTick_Config>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800290c:	f7ff fc44 	bl	8002198 <HAL_GetTick>
 8002910:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d008      	beq.n	8002930 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e052      	b.n	80029d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0216 	bic.w	r2, r2, #22
 800293e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d103      	bne.n	8002960 <HAL_DMA_Abort+0x62>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295c:	2b00      	cmp	r3, #0
 800295e:	d007      	beq.n	8002970 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0208 	bic.w	r2, r2, #8
 800296e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 0201 	bic.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002980:	e013      	b.n	80029aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002982:	f7ff fc09 	bl	8002198 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b05      	cmp	r3, #5
 800298e:	d90c      	bls.n	80029aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2220      	movs	r2, #32
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2203      	movs	r2, #3
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e015      	b.n	80029d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1e4      	bne.n	8002982 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	223f      	movs	r2, #63	; 0x3f
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d004      	beq.n	80029fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e00c      	b.n	8002a16 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2205      	movs	r2, #5
 8002a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0201 	bic.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
	...

08002a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	e159      	b.n	8002cf4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a40:	2201      	movs	r2, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	4013      	ands	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	f040 8148 	bne.w	8002cee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d005      	beq.n	8002a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d130      	bne.n	8002ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	2203      	movs	r2, #3
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aac:	2201      	movs	r2, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	091b      	lsrs	r3, r3, #4
 8002ac2:	f003 0201 	and.w	r2, r3, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d017      	beq.n	8002b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d123      	bne.n	8002b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	08da      	lsrs	r2, r3, #3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3208      	adds	r2, #8
 8002b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	220f      	movs	r2, #15
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	08da      	lsrs	r2, r3, #3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3208      	adds	r2, #8
 8002b62:	69b9      	ldr	r1, [r7, #24]
 8002b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	2203      	movs	r2, #3
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0203 	and.w	r2, r3, #3
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 80a2 	beq.w	8002cee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b57      	ldr	r3, [pc, #348]	; (8002d0c <HAL_GPIO_Init+0x2e8>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb2:	4a56      	ldr	r2, [pc, #344]	; (8002d0c <HAL_GPIO_Init+0x2e8>)
 8002bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bba:	4b54      	ldr	r3, [pc, #336]	; (8002d0c <HAL_GPIO_Init+0x2e8>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bc6:	4a52      	ldr	r2, [pc, #328]	; (8002d10 <HAL_GPIO_Init+0x2ec>)
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	089b      	lsrs	r3, r3, #2
 8002bcc:	3302      	adds	r3, #2
 8002bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a49      	ldr	r2, [pc, #292]	; (8002d14 <HAL_GPIO_Init+0x2f0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d019      	beq.n	8002c26 <HAL_GPIO_Init+0x202>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a48      	ldr	r2, [pc, #288]	; (8002d18 <HAL_GPIO_Init+0x2f4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <HAL_GPIO_Init+0x1fe>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a47      	ldr	r2, [pc, #284]	; (8002d1c <HAL_GPIO_Init+0x2f8>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00d      	beq.n	8002c1e <HAL_GPIO_Init+0x1fa>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a46      	ldr	r2, [pc, #280]	; (8002d20 <HAL_GPIO_Init+0x2fc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d007      	beq.n	8002c1a <HAL_GPIO_Init+0x1f6>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a45      	ldr	r2, [pc, #276]	; (8002d24 <HAL_GPIO_Init+0x300>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d101      	bne.n	8002c16 <HAL_GPIO_Init+0x1f2>
 8002c12:	2304      	movs	r3, #4
 8002c14:	e008      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c16:	2307      	movs	r3, #7
 8002c18:	e006      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e004      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e002      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c26:	2300      	movs	r3, #0
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	f002 0203 	and.w	r2, r2, #3
 8002c2e:	0092      	lsls	r2, r2, #2
 8002c30:	4093      	lsls	r3, r2
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c38:	4935      	ldr	r1, [pc, #212]	; (8002d10 <HAL_GPIO_Init+0x2ec>)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	089b      	lsrs	r3, r3, #2
 8002c3e:	3302      	adds	r3, #2
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c46:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c6a:	4a2f      	ldr	r2, [pc, #188]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c70:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c94:	4a24      	ldr	r2, [pc, #144]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c9a:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cbe:	4a1a      	ldr	r2, [pc, #104]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce8:	4a0f      	ldr	r2, [pc, #60]	; (8002d28 <HAL_GPIO_Init+0x304>)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	2b0f      	cmp	r3, #15
 8002cf8:	f67f aea2 	bls.w	8002a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	bf00      	nop
 8002d00:	3724      	adds	r7, #36	; 0x24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	40013800 	.word	0x40013800
 8002d14:	40020000 	.word	0x40020000
 8002d18:	40020400 	.word	0x40020400
 8002d1c:	40020800 	.word	0x40020800
 8002d20:	40020c00 	.word	0x40020c00
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40013c00 	.word	0x40013c00

08002d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d3c:	787b      	ldrb	r3, [r7, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d42:	887a      	ldrh	r2, [r7, #2]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d48:	e003      	b.n	8002d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	041a      	lsls	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	619a      	str	r2, [r3, #24]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e12b      	b.n	8002fca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fe ff12 	bl	8001bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2224      	movs	r2, #36	; 0x24
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dc4:	f001 fbac 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8002dc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4a81      	ldr	r2, [pc, #516]	; (8002fd4 <HAL_I2C_Init+0x274>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d807      	bhi.n	8002de4 <HAL_I2C_Init+0x84>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4a80      	ldr	r2, [pc, #512]	; (8002fd8 <HAL_I2C_Init+0x278>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	bf94      	ite	ls
 8002ddc:	2301      	movls	r3, #1
 8002dde:	2300      	movhi	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e006      	b.n	8002df2 <HAL_I2C_Init+0x92>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a7d      	ldr	r2, [pc, #500]	; (8002fdc <HAL_I2C_Init+0x27c>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	bf94      	ite	ls
 8002dec:	2301      	movls	r3, #1
 8002dee:	2300      	movhi	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0e7      	b.n	8002fca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4a78      	ldr	r2, [pc, #480]	; (8002fe0 <HAL_I2C_Init+0x280>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0c9b      	lsrs	r3, r3, #18
 8002e04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a6a      	ldr	r2, [pc, #424]	; (8002fd4 <HAL_I2C_Init+0x274>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d802      	bhi.n	8002e34 <HAL_I2C_Init+0xd4>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3301      	adds	r3, #1
 8002e32:	e009      	b.n	8002e48 <HAL_I2C_Init+0xe8>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e3a:	fb02 f303 	mul.w	r3, r2, r3
 8002e3e:	4a69      	ldr	r2, [pc, #420]	; (8002fe4 <HAL_I2C_Init+0x284>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	099b      	lsrs	r3, r3, #6
 8002e46:	3301      	adds	r3, #1
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	495c      	ldr	r1, [pc, #368]	; (8002fd4 <HAL_I2C_Init+0x274>)
 8002e64:	428b      	cmp	r3, r1
 8002e66:	d819      	bhi.n	8002e9c <HAL_I2C_Init+0x13c>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e59      	subs	r1, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e76:	1c59      	adds	r1, r3, #1
 8002e78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e7c:	400b      	ands	r3, r1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <HAL_I2C_Init+0x138>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1e59      	subs	r1, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e90:	3301      	adds	r3, #1
 8002e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e96:	e051      	b.n	8002f3c <HAL_I2C_Init+0x1dc>
 8002e98:	2304      	movs	r3, #4
 8002e9a:	e04f      	b.n	8002f3c <HAL_I2C_Init+0x1dc>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d111      	bne.n	8002ec8 <HAL_I2C_Init+0x168>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1e58      	subs	r0, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6859      	ldr	r1, [r3, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	440b      	add	r3, r1
 8002eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e012      	b.n	8002eee <HAL_I2C_Init+0x18e>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	1e58      	subs	r0, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6859      	ldr	r1, [r3, #4]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	0099      	lsls	r1, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf0c      	ite	eq
 8002ee8:	2301      	moveq	r3, #1
 8002eea:	2300      	movne	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_I2C_Init+0x196>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e022      	b.n	8002f3c <HAL_I2C_Init+0x1dc>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10e      	bne.n	8002f1c <HAL_I2C_Init+0x1bc>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1e58      	subs	r0, r3, #1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6859      	ldr	r1, [r3, #4]
 8002f06:	460b      	mov	r3, r1
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	440b      	add	r3, r1
 8002f0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f1a:	e00f      	b.n	8002f3c <HAL_I2C_Init+0x1dc>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	0099      	lsls	r1, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	6809      	ldr	r1, [r1, #0]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6911      	ldr	r1, [r2, #16]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68d2      	ldr	r2, [r2, #12]
 8002f76:	4311      	orrs	r1, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0201 	orr.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2220      	movs	r2, #32
 8002fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	000186a0 	.word	0x000186a0
 8002fd8:	001e847f 	.word	0x001e847f
 8002fdc:	003d08ff 	.word	0x003d08ff
 8002fe0:	431bde83 	.word	0x431bde83
 8002fe4:	10624dd3 	.word	0x10624dd3

08002fe8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	817b      	strh	r3, [r7, #10]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7ff f8cc 	bl	8002198 <HAL_GetTick>
 8003000:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b20      	cmp	r3, #32
 800300c:	f040 80e0 	bne.w	80031d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2319      	movs	r3, #25
 8003016:	2201      	movs	r2, #1
 8003018:	4970      	ldr	r1, [pc, #448]	; (80031dc <HAL_I2C_Master_Transmit+0x1f4>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fc72 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003026:	2302      	movs	r3, #2
 8003028:	e0d3      	b.n	80031d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_I2C_Master_Transmit+0x50>
 8003034:	2302      	movs	r3, #2
 8003036:	e0cc      	b.n	80031d2 <HAL_I2C_Master_Transmit+0x1ea>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d007      	beq.n	800305e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800306c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2221      	movs	r2, #33	; 0x21
 8003072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2210      	movs	r2, #16
 800307a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	893a      	ldrh	r2, [r7, #8]
 800308e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4a50      	ldr	r2, [pc, #320]	; (80031e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800309e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030a0:	8979      	ldrh	r1, [r7, #10]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	6a3a      	ldr	r2, [r7, #32]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fadc 	bl	8003664 <I2C_MasterRequestWrite>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e08d      	b.n	80031d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030cc:	e066      	b.n	800319c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	6a39      	ldr	r1, [r7, #32]
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 fcec 	bl	8003ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00d      	beq.n	80030fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d107      	bne.n	80030f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e06b      	b.n	80031d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fe:	781a      	ldrb	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b04      	cmp	r3, #4
 8003136:	d11b      	bne.n	8003170 <HAL_I2C_Master_Transmit+0x188>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	d017      	beq.n	8003170 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	781a      	ldrb	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	1c5a      	adds	r2, r3, #1
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	3b01      	subs	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	6a39      	ldr	r1, [r7, #32]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 fcdc 	bl	8003b32 <I2C_WaitOnBTFFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	2b04      	cmp	r3, #4
 8003186:	d107      	bne.n	8003198 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003196:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e01a      	b.n	80031d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d194      	bne.n	80030ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	e000      	b.n	80031d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031d0:	2302      	movs	r3, #2
  }
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	00100002 	.word	0x00100002
 80031e0:	ffff0000 	.word	0xffff0000

080031e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08c      	sub	sp, #48	; 0x30
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	461a      	mov	r2, r3
 80031f0:	460b      	mov	r3, r1
 80031f2:	817b      	strh	r3, [r7, #10]
 80031f4:	4613      	mov	r3, r2
 80031f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031f8:	f7fe ffce 	bl	8002198 <HAL_GetTick>
 80031fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b20      	cmp	r3, #32
 8003208:	f040 820b 	bne.w	8003622 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2319      	movs	r3, #25
 8003212:	2201      	movs	r2, #1
 8003214:	497c      	ldr	r1, [pc, #496]	; (8003408 <HAL_I2C_Master_Receive+0x224>)
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 fb74 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003222:	2302      	movs	r3, #2
 8003224:	e1fe      	b.n	8003624 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_I2C_Master_Receive+0x50>
 8003230:	2302      	movs	r3, #2
 8003232:	e1f7      	b.n	8003624 <HAL_I2C_Master_Receive+0x440>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b01      	cmp	r3, #1
 8003248:	d007      	beq.n	800325a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003268:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2222      	movs	r2, #34	; 0x22
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2210      	movs	r2, #16
 8003276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	893a      	ldrh	r2, [r7, #8]
 800328a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4a5c      	ldr	r2, [pc, #368]	; (800340c <HAL_I2C_Master_Receive+0x228>)
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800329c:	8979      	ldrh	r1, [r7, #10]
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fa60 	bl	8003768 <I2C_MasterRequestRead>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e1b8      	b.n	8003624 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d113      	bne.n	80032e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ba:	2300      	movs	r3, #0
 80032bc:	623b      	str	r3, [r7, #32]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	623b      	str	r3, [r7, #32]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	623b      	str	r3, [r7, #32]
 80032ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e18c      	b.n	80035fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d11b      	bne.n	8003322 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fa:	2300      	movs	r3, #0
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e16c      	b.n	80035fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	2b02      	cmp	r3, #2
 8003328:	d11b      	bne.n	8003362 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003338:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003348:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	e14c      	b.n	80035fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003370:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	617b      	str	r3, [r7, #20]
 8003386:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003388:	e138      	b.n	80035fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338e:	2b03      	cmp	r3, #3
 8003390:	f200 80f1 	bhi.w	8003576 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	2b01      	cmp	r3, #1
 800339a:	d123      	bne.n	80033e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fc07 	bl	8003bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e139      	b.n	8003624 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	3b01      	subs	r3, #1
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033e2:	e10b      	b.n	80035fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d14e      	bne.n	800348a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	2200      	movs	r2, #0
 80033f4:	4906      	ldr	r1, [pc, #24]	; (8003410 <HAL_I2C_Master_Receive+0x22c>)
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 fa84 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e10e      	b.n	8003624 <HAL_I2C_Master_Receive+0x440>
 8003406:	bf00      	nop
 8003408:	00100002 	.word	0x00100002
 800340c:	ffff0000 	.word	0xffff0000
 8003410:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	1c5a      	adds	r2, r3, #1
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003472:	3b01      	subs	r3, #1
 8003474:	b29a      	uxth	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347e:	b29b      	uxth	r3, r3
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003488:	e0b8      	b.n	80035fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	2200      	movs	r2, #0
 8003492:	4966      	ldr	r1, [pc, #408]	; (800362c <HAL_I2C_Master_Receive+0x448>)
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 fa35 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e0bf      	b.n	8003624 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	b2d2      	uxtb	r2, r2
 80034c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	2200      	movs	r2, #0
 80034ee:	494f      	ldr	r1, [pc, #316]	; (800362c <HAL_I2C_Master_Receive+0x448>)
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fa07 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e091      	b.n	8003624 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	1c5a      	adds	r2, r3, #1
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003574:	e042      	b.n	80035fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 fb1a 	bl	8003bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e04c      	b.n	8003624 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d118      	bne.n	80035fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003600:	2b00      	cmp	r3, #0
 8003602:	f47f aec2 	bne.w	800338a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003622:	2302      	movs	r3, #2
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	3728      	adds	r7, #40	; 0x28
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	00010004 	.word	0x00010004

08003630 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363e:	b2db      	uxtb	r3, r3
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	460b      	mov	r3, r1
 8003672:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d006      	beq.n	800368e <I2C_MasterRequestWrite+0x2a>
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d003      	beq.n	800368e <I2C_MasterRequestWrite+0x2a>
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800368c:	d108      	bne.n	80036a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	e00b      	b.n	80036b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	2b12      	cmp	r3, #18
 80036a6:	d107      	bne.n	80036b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 f91d 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00d      	beq.n	80036ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036de:	d103      	bne.n	80036e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e035      	b.n	8003758 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036f4:	d108      	bne.n	8003708 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036f6:	897b      	ldrh	r3, [r7, #10]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003704:	611a      	str	r2, [r3, #16]
 8003706:	e01b      	b.n	8003740 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003708:	897b      	ldrh	r3, [r7, #10]
 800370a:	11db      	asrs	r3, r3, #7
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f003 0306 	and.w	r3, r3, #6
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f063 030f 	orn	r3, r3, #15
 8003718:	b2da      	uxtb	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	490e      	ldr	r1, [pc, #56]	; (8003760 <I2C_MasterRequestWrite+0xfc>)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f943 	bl	80039b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e010      	b.n	8003758 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003736:	897b      	ldrh	r3, [r7, #10]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4907      	ldr	r1, [pc, #28]	; (8003764 <I2C_MasterRequestWrite+0x100>)
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f933 	bl	80039b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e000      	b.n	8003758 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	00010008 	.word	0x00010008
 8003764:	00010002 	.word	0x00010002

08003768 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	460b      	mov	r3, r1
 8003776:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800378c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d006      	beq.n	80037a2 <I2C_MasterRequestRead+0x3a>
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d003      	beq.n	80037a2 <I2C_MasterRequestRead+0x3a>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037a0:	d108      	bne.n	80037b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e00b      	b.n	80037cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	2b11      	cmp	r3, #17
 80037ba:	d107      	bne.n	80037cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f893 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00d      	beq.n	8003800 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f2:	d103      	bne.n	80037fc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e079      	b.n	80038f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003808:	d108      	bne.n	800381c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800380a:	897b      	ldrh	r3, [r7, #10]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	b2da      	uxtb	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	611a      	str	r2, [r3, #16]
 800381a:	e05f      	b.n	80038dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800381c:	897b      	ldrh	r3, [r7, #10]
 800381e:	11db      	asrs	r3, r3, #7
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f003 0306 	and.w	r3, r3, #6
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f063 030f 	orn	r3, r3, #15
 800382c:	b2da      	uxtb	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	4930      	ldr	r1, [pc, #192]	; (80038fc <I2C_MasterRequestRead+0x194>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f8b9 	bl	80039b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e054      	b.n	80038f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800384a:	897b      	ldrh	r3, [r7, #10]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4929      	ldr	r1, [pc, #164]	; (8003900 <I2C_MasterRequestRead+0x198>)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f8a9 	bl	80039b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e044      	b.n	80038f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800386a:	2300      	movs	r3, #0
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695b      	ldr	r3, [r3, #20]
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f831 	bl	8003904 <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00d      	beq.n	80038c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b6:	d103      	bne.n	80038c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e017      	b.n	80038f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038c4:	897b      	ldrh	r3, [r7, #10]
 80038c6:	11db      	asrs	r3, r3, #7
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f003 0306 	and.w	r3, r3, #6
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	f063 030e 	orn	r3, r3, #14
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	4907      	ldr	r1, [pc, #28]	; (8003900 <I2C_MasterRequestRead+0x198>)
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 f865 	bl	80039b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	00010008 	.word	0x00010008
 8003900:	00010002 	.word	0x00010002

08003904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	4613      	mov	r3, r2
 8003912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003914:	e025      	b.n	8003962 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391c:	d021      	beq.n	8003962 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800391e:	f7fe fc3b 	bl	8002198 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d302      	bcc.n	8003934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d116      	bne.n	8003962 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e023      	b.n	80039aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	d10d      	bne.n	8003988 <I2C_WaitOnFlagUntilTimeout+0x84>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	43da      	mvns	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4013      	ands	r3, r2
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	bf0c      	ite	eq
 800397e:	2301      	moveq	r3, #1
 8003980:	2300      	movne	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	461a      	mov	r2, r3
 8003986:	e00c      	b.n	80039a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	43da      	mvns	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	bf0c      	ite	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	2300      	movne	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d0b6      	beq.n	8003916 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
 80039be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039c0:	e051      	b.n	8003a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d0:	d123      	bne.n	8003a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	f043 0204 	orr.w	r2, r3, #4
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e046      	b.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d021      	beq.n	8003a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a22:	f7fe fbb9 	bl	8002198 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d302      	bcc.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d116      	bne.n	8003a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f043 0220 	orr.w	r2, r3, #32
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e020      	b.n	8003aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10c      	bne.n	8003a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	43da      	mvns	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	bf14      	ite	ne
 8003a82:	2301      	movne	r3, #1
 8003a84:	2300      	moveq	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	e00b      	b.n	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	43da      	mvns	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4013      	ands	r3, r2
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d18d      	bne.n	80039c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003abc:	e02d      	b.n	8003b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f8ce 	bl	8003c60 <I2C_IsAcknowledgeFailed>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e02d      	b.n	8003b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d021      	beq.n	8003b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad6:	f7fe fb5f 	bl	8002198 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d116      	bne.n	8003b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f043 0220 	orr.w	r2, r3, #32
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e007      	b.n	8003b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	2b80      	cmp	r3, #128	; 0x80
 8003b26:	d1ca      	bne.n	8003abe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b3e:	e02d      	b.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f88d 	bl	8003c60 <I2C_IsAcknowledgeFailed>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e02d      	b.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d021      	beq.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b58:	f7fe fb1e 	bl	8002198 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d302      	bcc.n	8003b6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d116      	bne.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e007      	b.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d1ca      	bne.n	8003b40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bc0:	e042      	b.n	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f003 0310 	and.w	r3, r3, #16
 8003bcc:	2b10      	cmp	r3, #16
 8003bce:	d119      	bne.n	8003c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f06f 0210 	mvn.w	r2, #16
 8003bd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e029      	b.n	8003c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c04:	f7fe fac8 	bl	8002198 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d302      	bcc.n	8003c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d116      	bne.n	8003c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e007      	b.n	8003c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	695b      	ldr	r3, [r3, #20]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d1b5      	bne.n	8003bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c76:	d11b      	bne.n	8003cb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	f043 0204 	orr.w	r2, r3, #4
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e267      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d075      	beq.n	8003dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cde:	4b88      	ldr	r3, [pc, #544]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d00c      	beq.n	8003d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cea:	4b85      	ldr	r3, [pc, #532]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d112      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf6:	4b82      	ldr	r3, [pc, #520]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d02:	d10b      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d04:	4b7e      	ldr	r3, [pc, #504]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d05b      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x108>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d157      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e242      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d24:	d106      	bne.n	8003d34 <HAL_RCC_OscConfig+0x74>
 8003d26:	4b76      	ldr	r3, [pc, #472]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a75      	ldr	r2, [pc, #468]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e01d      	b.n	8003d70 <HAL_RCC_OscConfig+0xb0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x98>
 8003d3e:	4b70      	ldr	r3, [pc, #448]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a6f      	ldr	r2, [pc, #444]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b6d      	ldr	r3, [pc, #436]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a6c      	ldr	r2, [pc, #432]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e00b      	b.n	8003d70 <HAL_RCC_OscConfig+0xb0>
 8003d58:	4b69      	ldr	r3, [pc, #420]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a68      	ldr	r2, [pc, #416]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4b66      	ldr	r3, [pc, #408]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a65      	ldr	r2, [pc, #404]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d013      	beq.n	8003da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fe fa0e 	bl	8002198 <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d80:	f7fe fa0a 	bl	8002198 <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	; 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e207      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d92:	4b5b      	ldr	r3, [pc, #364]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0xc0>
 8003d9e:	e014      	b.n	8003dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fe f9fa 	bl	8002198 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fe f9f6 	bl	8002198 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	; 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e1f3      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dba:	4b51      	ldr	r3, [pc, #324]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0xe8>
 8003dc6:	e000      	b.n	8003dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d063      	beq.n	8003e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dd6:	4b4a      	ldr	r3, [pc, #296]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de2:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d11c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dee:	4b44      	ldr	r3, [pc, #272]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d116      	bne.n	8003e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfa:	4b41      	ldr	r3, [pc, #260]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_RCC_OscConfig+0x152>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d001      	beq.n	8003e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e1c7      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e12:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4937      	ldr	r1, [pc, #220]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e26:	e03a      	b.n	8003e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d020      	beq.n	8003e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e30:	4b34      	ldr	r3, [pc, #208]	; (8003f04 <HAL_RCC_OscConfig+0x244>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e36:	f7fe f9af 	bl	8002198 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e3e:	f7fe f9ab 	bl	8002198 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e1a8      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e50:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5c:	4b28      	ldr	r3, [pc, #160]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4925      	ldr	r1, [pc, #148]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	600b      	str	r3, [r1, #0]
 8003e70:	e015      	b.n	8003e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCC_OscConfig+0x244>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fe f98e 	bl	8002198 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e80:	f7fe f98a 	bl	8002198 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e187      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e92:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d036      	beq.n	8003f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb2:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <HAL_RCC_OscConfig+0x248>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb8:	f7fe f96e 	bl	8002198 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec0:	f7fe f96a 	bl	8002198 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e167      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x200>
 8003ede:	e01b      	b.n	8003f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <HAL_RCC_OscConfig+0x248>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee6:	f7fe f957 	bl	8002198 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eec:	e00e      	b.n	8003f0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eee:	f7fe f953 	bl	8002198 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d907      	bls.n	8003f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e150      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
 8003f00:	40023800 	.word	0x40023800
 8003f04:	42470000 	.word	0x42470000
 8003f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f0c:	4b88      	ldr	r3, [pc, #544]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ea      	bne.n	8003eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8097 	beq.w	8004054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f26:	2300      	movs	r3, #0
 8003f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f2a:	4b81      	ldr	r3, [pc, #516]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10f      	bne.n	8003f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	4b7d      	ldr	r3, [pc, #500]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	4a7c      	ldr	r2, [pc, #496]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f44:	6413      	str	r3, [r2, #64]	; 0x40
 8003f46:	4b7a      	ldr	r3, [pc, #488]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f52:	2301      	movs	r3, #1
 8003f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f56:	4b77      	ldr	r3, [pc, #476]	; (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d118      	bne.n	8003f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f62:	4b74      	ldr	r3, [pc, #464]	; (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a73      	ldr	r2, [pc, #460]	; (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f6e:	f7fe f913 	bl	8002198 <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f76:	f7fe f90f 	bl	8002198 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e10c      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f88:	4b6a      	ldr	r3, [pc, #424]	; (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d106      	bne.n	8003faa <HAL_RCC_OscConfig+0x2ea>
 8003f9c:	4b64      	ldr	r3, [pc, #400]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a63      	ldr	r2, [pc, #396]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa8:	e01c      	b.n	8003fe4 <HAL_RCC_OscConfig+0x324>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x30c>
 8003fb2:	4b5f      	ldr	r3, [pc, #380]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a5e      	ldr	r2, [pc, #376]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbe:	4b5c      	ldr	r3, [pc, #368]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc2:	4a5b      	ldr	r2, [pc, #364]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0x324>
 8003fcc:	4b58      	ldr	r3, [pc, #352]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a57      	ldr	r2, [pc, #348]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fd8:	4b55      	ldr	r3, [pc, #340]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fdc:	4a54      	ldr	r2, [pc, #336]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fde:	f023 0304 	bic.w	r3, r3, #4
 8003fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fe f8d4 	bl	8002198 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fe f8d0 	bl	8002198 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e0cb      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400a:	4b49      	ldr	r3, [pc, #292]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ee      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x334>
 8004016:	e014      	b.n	8004042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004018:	f7fe f8be 	bl	8002198 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401e:	e00a      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7fe f8ba 	bl	8002198 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	; 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e0b5      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004036:	4b3e      	ldr	r3, [pc, #248]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1ee      	bne.n	8004020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004048:	4b39      	ldr	r3, [pc, #228]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	4a38      	ldr	r2, [pc, #224]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 800404e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004052:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80a1 	beq.w	80041a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800405e:	4b34      	ldr	r3, [pc, #208]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b08      	cmp	r3, #8
 8004068:	d05c      	beq.n	8004124 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d141      	bne.n	80040f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004072:	4b31      	ldr	r3, [pc, #196]	; (8004138 <HAL_RCC_OscConfig+0x478>)
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004078:	f7fe f88e 	bl	8002198 <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004080:	f7fe f88a 	bl	8002198 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e087      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	4b27      	ldr	r3, [pc, #156]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	019b      	lsls	r3, r3, #6
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	3b01      	subs	r3, #1
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c0:	061b      	lsls	r3, r3, #24
 80040c2:	491b      	ldr	r1, [pc, #108]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c8:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <HAL_RCC_OscConfig+0x478>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ce:	f7fe f863 	bl	8002198 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fe f85f 	bl	8002198 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e05c      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x416>
 80040f4:	e054      	b.n	80041a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <HAL_RCC_OscConfig+0x478>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fe f84c 	bl	8002198 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004104:	f7fe f848 	bl	8002198 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e045      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_RCC_OscConfig+0x470>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x444>
 8004122:	e03d      	b.n	80041a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d107      	bne.n	800413c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e038      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
 8004130:	40023800 	.word	0x40023800
 8004134:	40007000 	.word	0x40007000
 8004138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800413c:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <HAL_RCC_OscConfig+0x4ec>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d028      	beq.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004154:	429a      	cmp	r2, r3
 8004156:	d121      	bne.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004162:	429a      	cmp	r2, r3
 8004164:	d11a      	bne.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004174:	4293      	cmp	r3, r2
 8004176:	d111      	bne.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	3b01      	subs	r3, #1
 8004186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d107      	bne.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800

080041b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0cc      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c4:	4b68      	ldr	r3, [pc, #416]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d90c      	bls.n	80041ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b65      	ldr	r3, [pc, #404]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	4b63      	ldr	r3, [pc, #396]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0b8      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004204:	4b59      	ldr	r3, [pc, #356]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a58      	ldr	r2, [pc, #352]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800420e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800421c:	4b53      	ldr	r3, [pc, #332]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4a52      	ldr	r2, [pc, #328]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004228:	4b50      	ldr	r3, [pc, #320]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	494d      	ldr	r1, [pc, #308]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d044      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d107      	bne.n	800425e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424e:	4b47      	ldr	r3, [pc, #284]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d119      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e07f      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d003      	beq.n	800426e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426a:	2b03      	cmp	r3, #3
 800426c:	d107      	bne.n	800427e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426e:	4b3f      	ldr	r3, [pc, #252]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e06f      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427e:	4b3b      	ldr	r3, [pc, #236]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e067      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800428e:	4b37      	ldr	r3, [pc, #220]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f023 0203 	bic.w	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	4934      	ldr	r1, [pc, #208]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a0:	f7fd ff7a 	bl	8002198 <HAL_GetTick>
 80042a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	e00a      	b.n	80042be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a8:	f7fd ff76 	bl	8002198 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e04f      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042be:	4b2b      	ldr	r3, [pc, #172]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 020c 	and.w	r2, r3, #12
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d1eb      	bne.n	80042a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d0:	4b25      	ldr	r3, [pc, #148]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d20c      	bcs.n	80042f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042de:	4b22      	ldr	r3, [pc, #136]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e6:	4b20      	ldr	r3, [pc, #128]	; (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d001      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e032      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004304:	4b19      	ldr	r3, [pc, #100]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4916      	ldr	r1, [pc, #88]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004322:	4b12      	ldr	r3, [pc, #72]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	490e      	ldr	r1, [pc, #56]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	4313      	orrs	r3, r2
 8004334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004336:	f000 f821 	bl	800437c <HAL_RCC_GetSysClockFreq>
 800433a:	4602      	mov	r2, r0
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	490a      	ldr	r1, [pc, #40]	; (8004370 <HAL_RCC_ClockConfig+0x1c0>)
 8004348:	5ccb      	ldrb	r3, [r1, r3]
 800434a:	fa22 f303 	lsr.w	r3, r2, r3
 800434e:	4a09      	ldr	r2, [pc, #36]	; (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_RCC_ClockConfig+0x1c8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7fd feda 	bl	8002110 <HAL_InitTick>

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40023c00 	.word	0x40023c00
 800436c:	40023800 	.word	0x40023800
 8004370:	08007844 	.word	0x08007844
 8004374:	20000004 	.word	0x20000004
 8004378:	20000008 	.word	0x20000008

0800437c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800437c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004380:	b090      	sub	sp, #64	; 0x40
 8004382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	637b      	str	r3, [r7, #52]	; 0x34
 8004388:	2300      	movs	r3, #0
 800438a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800438c:	2300      	movs	r3, #0
 800438e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004394:	4b59      	ldr	r3, [pc, #356]	; (80044fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b08      	cmp	r3, #8
 800439e:	d00d      	beq.n	80043bc <HAL_RCC_GetSysClockFreq+0x40>
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	f200 80a1 	bhi.w	80044e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0x34>
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d003      	beq.n	80043b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ae:	e09b      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043b0:	4b53      	ldr	r3, [pc, #332]	; (8004500 <HAL_RCC_GetSysClockFreq+0x184>)
 80043b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80043b4:	e09b      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043b6:	4b53      	ldr	r3, [pc, #332]	; (8004504 <HAL_RCC_GetSysClockFreq+0x188>)
 80043b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043ba:	e098      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043bc:	4b4f      	ldr	r3, [pc, #316]	; (80044fc <HAL_RCC_GetSysClockFreq+0x180>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043c6:	4b4d      	ldr	r3, [pc, #308]	; (80044fc <HAL_RCC_GetSysClockFreq+0x180>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d028      	beq.n	8004424 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d2:	4b4a      	ldr	r3, [pc, #296]	; (80044fc <HAL_RCC_GetSysClockFreq+0x180>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	2200      	movs	r2, #0
 80043da:	623b      	str	r3, [r7, #32]
 80043dc:	627a      	str	r2, [r7, #36]	; 0x24
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043e4:	2100      	movs	r1, #0
 80043e6:	4b47      	ldr	r3, [pc, #284]	; (8004504 <HAL_RCC_GetSysClockFreq+0x188>)
 80043e8:	fb03 f201 	mul.w	r2, r3, r1
 80043ec:	2300      	movs	r3, #0
 80043ee:	fb00 f303 	mul.w	r3, r0, r3
 80043f2:	4413      	add	r3, r2
 80043f4:	4a43      	ldr	r2, [pc, #268]	; (8004504 <HAL_RCC_GetSysClockFreq+0x188>)
 80043f6:	fba0 1202 	umull	r1, r2, r0, r2
 80043fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043fc:	460a      	mov	r2, r1
 80043fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8004400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004402:	4413      	add	r3, r2
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004408:	2200      	movs	r2, #0
 800440a:	61bb      	str	r3, [r7, #24]
 800440c:	61fa      	str	r2, [r7, #28]
 800440e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004412:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004416:	f7fc fb29 	bl	8000a6c <__aeabi_uldivmod>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4613      	mov	r3, r2
 8004420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004422:	e053      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004424:	4b35      	ldr	r3, [pc, #212]	; (80044fc <HAL_RCC_GetSysClockFreq+0x180>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	099b      	lsrs	r3, r3, #6
 800442a:	2200      	movs	r2, #0
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	617a      	str	r2, [r7, #20]
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004436:	f04f 0b00 	mov.w	fp, #0
 800443a:	4652      	mov	r2, sl
 800443c:	465b      	mov	r3, fp
 800443e:	f04f 0000 	mov.w	r0, #0
 8004442:	f04f 0100 	mov.w	r1, #0
 8004446:	0159      	lsls	r1, r3, #5
 8004448:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800444c:	0150      	lsls	r0, r2, #5
 800444e:	4602      	mov	r2, r0
 8004450:	460b      	mov	r3, r1
 8004452:	ebb2 080a 	subs.w	r8, r2, sl
 8004456:	eb63 090b 	sbc.w	r9, r3, fp
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004466:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800446a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800446e:	ebb2 0408 	subs.w	r4, r2, r8
 8004472:	eb63 0509 	sbc.w	r5, r3, r9
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	00eb      	lsls	r3, r5, #3
 8004480:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004484:	00e2      	lsls	r2, r4, #3
 8004486:	4614      	mov	r4, r2
 8004488:	461d      	mov	r5, r3
 800448a:	eb14 030a 	adds.w	r3, r4, sl
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	eb45 030b 	adc.w	r3, r5, fp
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044a2:	4629      	mov	r1, r5
 80044a4:	028b      	lsls	r3, r1, #10
 80044a6:	4621      	mov	r1, r4
 80044a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044ac:	4621      	mov	r1, r4
 80044ae:	028a      	lsls	r2, r1, #10
 80044b0:	4610      	mov	r0, r2
 80044b2:	4619      	mov	r1, r3
 80044b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b6:	2200      	movs	r2, #0
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	60fa      	str	r2, [r7, #12]
 80044bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044c0:	f7fc fad4 	bl	8000a6c <__aeabi_uldivmod>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4613      	mov	r3, r2
 80044ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_GetSysClockFreq+0x180>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	0c1b      	lsrs	r3, r3, #16
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	3301      	adds	r3, #1
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80044dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044e6:	e002      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCC_GetSysClockFreq+0x184>)
 80044ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3740      	adds	r7, #64	; 0x40
 80044f4:	46bd      	mov	sp, r7
 80044f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fa:	bf00      	nop
 80044fc:	40023800 	.word	0x40023800
 8004500:	00f42400 	.word	0x00f42400
 8004504:	017d7840 	.word	0x017d7840

08004508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800450c:	4b03      	ldr	r3, [pc, #12]	; (800451c <HAL_RCC_GetHCLKFreq+0x14>)
 800450e:	681b      	ldr	r3, [r3, #0]
}
 8004510:	4618      	mov	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000004 	.word	0x20000004

08004520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004524:	f7ff fff0 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	0a9b      	lsrs	r3, r3, #10
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4903      	ldr	r1, [pc, #12]	; (8004544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40023800 	.word	0x40023800
 8004544:	08007854 	.word	0x08007854

08004548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800454c:	f7ff ffdc 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b05      	ldr	r3, [pc, #20]	; (8004568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	0b5b      	lsrs	r3, r3, #13
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	4903      	ldr	r1, [pc, #12]	; (800456c <HAL_RCC_GetPCLK2Freq+0x24>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40023800 	.word	0x40023800
 800456c:	08007854 	.word	0x08007854

08004570 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e041      	b.n	8004606 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d106      	bne.n	800459c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd fbb8 	bl	8001d0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	4619      	mov	r1, r3
 80045ae:	4610      	mov	r0, r2
 80045b0:	f000 f9da 	bl	8004968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d101      	bne.n	8004620 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e041      	b.n	80046a4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d106      	bne.n	800463a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7fd fb03 	bl	8001c40 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	3304      	adds	r3, #4
 800464a:	4619      	mov	r1, r3
 800464c:	4610      	mov	r0, r2
 800464e:	f000 f98b 	bl	8004968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_TIM_IC_ConfigChannel+0x1e>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e088      	b.n	80047dc <HAL_TIM_IC_ConfigChannel+0x130>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d11b      	bne.n	8004710 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	6819      	ldr	r1, [r3, #0]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f000 fb4a 	bl	8004d80 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 020c 	bic.w	r2, r2, #12
 80046fa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6999      	ldr	r1, [r3, #24]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	619a      	str	r2, [r3, #24]
 800470e:	e060      	b.n	80047d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b04      	cmp	r3, #4
 8004714:	d11c      	bne.n	8004750 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	6819      	ldr	r1, [r3, #0]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f000 fb93 	bl	8004e50 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699a      	ldr	r2, [r3, #24]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004738:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6999      	ldr	r1, [r3, #24]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	021a      	lsls	r2, r3, #8
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	619a      	str	r2, [r3, #24]
 800474e:	e040      	b.n	80047d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b08      	cmp	r3, #8
 8004754:	d11b      	bne.n	800478e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	6819      	ldr	r1, [r3, #0]
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f000 fbb0 	bl	8004eca <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 020c 	bic.w	r2, r2, #12
 8004778:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69d9      	ldr	r1, [r3, #28]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	61da      	str	r2, [r3, #28]
 800478c:	e021      	b.n	80047d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b0c      	cmp	r3, #12
 8004792:	d11c      	bne.n	80047ce <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	6819      	ldr	r1, [r3, #0]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f000 fbcd 	bl	8004f42 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69da      	ldr	r2, [r3, #28]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80047b6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69d9      	ldr	r1, [r3, #28]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	021a      	lsls	r2, r3, #8
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	61da      	str	r2, [r3, #28]
 80047cc:	e001      	b.n	80047d2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80047fe:	2302      	movs	r3, #2
 8004800:	e0ae      	b.n	8004960 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	f200 809f 	bhi.w	8004950 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004812:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	0800484d 	.word	0x0800484d
 800481c:	08004951 	.word	0x08004951
 8004820:	08004951 	.word	0x08004951
 8004824:	08004951 	.word	0x08004951
 8004828:	0800488d 	.word	0x0800488d
 800482c:	08004951 	.word	0x08004951
 8004830:	08004951 	.word	0x08004951
 8004834:	08004951 	.word	0x08004951
 8004838:	080048cf 	.word	0x080048cf
 800483c:	08004951 	.word	0x08004951
 8004840:	08004951 	.word	0x08004951
 8004844:	08004951 	.word	0x08004951
 8004848:	0800490f 	.word	0x0800490f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f908 	bl	8004a68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0208 	orr.w	r2, r2, #8
 8004866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0204 	bic.w	r2, r2, #4
 8004876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6999      	ldr	r1, [r3, #24]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	430a      	orrs	r2, r1
 8004888:	619a      	str	r2, [r3, #24]
      break;
 800488a:	e064      	b.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68b9      	ldr	r1, [r7, #8]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 f94e 	bl	8004b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699a      	ldr	r2, [r3, #24]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	6999      	ldr	r1, [r3, #24]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	021a      	lsls	r2, r3, #8
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	619a      	str	r2, [r3, #24]
      break;
 80048cc:	e043      	b.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f000 f999 	bl	8004c0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69da      	ldr	r2, [r3, #28]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0208 	orr.w	r2, r2, #8
 80048e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	69da      	ldr	r2, [r3, #28]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0204 	bic.w	r2, r2, #4
 80048f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	69d9      	ldr	r1, [r3, #28]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	61da      	str	r2, [r3, #28]
      break;
 800490c:	e023      	b.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	4618      	mov	r0, r3
 8004916:	f000 f9e3 	bl	8004ce0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69da      	ldr	r2, [r3, #28]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69da      	ldr	r2, [r3, #28]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	69d9      	ldr	r1, [r3, #28]
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	021a      	lsls	r2, r3, #8
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	61da      	str	r2, [r3, #28]
      break;
 800494e:	e002      	b.n	8004956 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	75fb      	strb	r3, [r7, #23]
      break;
 8004954:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800495e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a34      	ldr	r2, [pc, #208]	; (8004a4c <TIM_Base_SetConfig+0xe4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00f      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004986:	d00b      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a31      	ldr	r2, [pc, #196]	; (8004a50 <TIM_Base_SetConfig+0xe8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d007      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a30      	ldr	r2, [pc, #192]	; (8004a54 <TIM_Base_SetConfig+0xec>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0x38>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a2f      	ldr	r2, [pc, #188]	; (8004a58 <TIM_Base_SetConfig+0xf0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d108      	bne.n	80049b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a25      	ldr	r2, [pc, #148]	; (8004a4c <TIM_Base_SetConfig+0xe4>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d01b      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c0:	d017      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a22      	ldr	r2, [pc, #136]	; (8004a50 <TIM_Base_SetConfig+0xe8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d013      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a21      	ldr	r2, [pc, #132]	; (8004a54 <TIM_Base_SetConfig+0xec>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00f      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a20      	ldr	r2, [pc, #128]	; (8004a58 <TIM_Base_SetConfig+0xf0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d00b      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <TIM_Base_SetConfig+0xf4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d007      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a1e      	ldr	r2, [pc, #120]	; (8004a60 <TIM_Base_SetConfig+0xf8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d003      	beq.n	80049f2 <TIM_Base_SetConfig+0x8a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <TIM_Base_SetConfig+0xfc>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d108      	bne.n	8004a04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a08      	ldr	r2, [pc, #32]	; (8004a4c <TIM_Base_SetConfig+0xe4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d103      	bne.n	8004a38 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	615a      	str	r2, [r3, #20]
}
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800
 8004a58:	40000c00 	.word	0x40000c00
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	40014400 	.word	0x40014400
 8004a64:	40014800 	.word	0x40014800

08004a68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f023 0201 	bic.w	r2, r3, #1
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0303 	bic.w	r3, r3, #3
 8004a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f023 0302 	bic.w	r3, r3, #2
 8004ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a1c      	ldr	r2, [pc, #112]	; (8004b30 <TIM_OC1_SetConfig+0xc8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d10c      	bne.n	8004ade <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0308 	bic.w	r3, r3, #8
 8004aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f023 0304 	bic.w	r3, r3, #4
 8004adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <TIM_OC1_SetConfig+0xc8>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d111      	bne.n	8004b0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	621a      	str	r2, [r3, #32]
}
 8004b24:	bf00      	nop
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	40010000 	.word	0x40010000

08004b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	f023 0210 	bic.w	r2, r3, #16
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f023 0320 	bic.w	r3, r3, #32
 8004b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a1e      	ldr	r2, [pc, #120]	; (8004c08 <TIM_OC2_SetConfig+0xd4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d10d      	bne.n	8004bb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <TIM_OC2_SetConfig+0xd4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d113      	bne.n	8004be0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	621a      	str	r2, [r3, #32]
}
 8004bfa:	bf00      	nop
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	40010000 	.word	0x40010000

08004c0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0303 	bic.w	r3, r3, #3
 8004c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	021b      	lsls	r3, r3, #8
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <TIM_OC3_SetConfig+0xd0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d10d      	bne.n	8004c86 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a14      	ldr	r2, [pc, #80]	; (8004cdc <TIM_OC3_SetConfig+0xd0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d113      	bne.n	8004cb6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	621a      	str	r2, [r3, #32]
}
 8004cd0:	bf00      	nop
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	40010000 	.word	0x40010000

08004ce0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	031b      	lsls	r3, r3, #12
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a10      	ldr	r2, [pc, #64]	; (8004d7c <TIM_OC4_SetConfig+0x9c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d109      	bne.n	8004d54 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	019b      	lsls	r3, r3, #6
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	371c      	adds	r7, #28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40010000 	.word	0x40010000

08004d80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f023 0201 	bic.w	r2, r3, #1
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4a24      	ldr	r2, [pc, #144]	; (8004e3c <TIM_TI1_SetConfig+0xbc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <TIM_TI1_SetConfig+0x56>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db4:	d00f      	beq.n	8004dd6 <TIM_TI1_SetConfig+0x56>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	4a21      	ldr	r2, [pc, #132]	; (8004e40 <TIM_TI1_SetConfig+0xc0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d00b      	beq.n	8004dd6 <TIM_TI1_SetConfig+0x56>
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4a20      	ldr	r2, [pc, #128]	; (8004e44 <TIM_TI1_SetConfig+0xc4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d007      	beq.n	8004dd6 <TIM_TI1_SetConfig+0x56>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4a1f      	ldr	r2, [pc, #124]	; (8004e48 <TIM_TI1_SetConfig+0xc8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d003      	beq.n	8004dd6 <TIM_TI1_SetConfig+0x56>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <TIM_TI1_SetConfig+0xcc>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d101      	bne.n	8004dda <TIM_TI1_SetConfig+0x5a>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <TIM_TI1_SetConfig+0x5c>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0303 	bic.w	r3, r3, #3
 8004de6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e003      	b.n	8004dfa <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f023 030a 	bic.w	r3, r3, #10
 8004e14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f003 030a 	and.w	r3, r3, #10
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	621a      	str	r2, [r3, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	40010000 	.word	0x40010000
 8004e40:	40000400 	.word	0x40000400
 8004e44:	40000800 	.word	0x40000800
 8004e48:	40000c00 	.word	0x40000c00
 8004e4c:	40014000 	.word	0x40014000

08004e50 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	f023 0210 	bic.w	r2, r3, #16
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e8e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	031b      	lsls	r3, r3, #12
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ea2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	011b      	lsls	r3, r3, #4
 8004ea8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	621a      	str	r2, [r3, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b087      	sub	sp, #28
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
 8004ed6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f06:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004f1a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	021b      	lsls	r3, r3, #8
 8004f20:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b087      	sub	sp, #28
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	60f8      	str	r0, [r7, #12]
 8004f4a:	60b9      	str	r1, [r7, #8]
 8004f4c:	607a      	str	r2, [r7, #4]
 8004f4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	031b      	lsls	r3, r3, #12
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	031b      	lsls	r3, r3, #12
 8004f9a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	621a      	str	r2, [r3, #32]
}
 8004fb0:	bf00      	nop
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e050      	b.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a1c      	ldr	r2, [pc, #112]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d018      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005020:	d013      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a18      	ldr	r2, [pc, #96]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00e      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a16      	ldr	r2, [pc, #88]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d009      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a15      	ldr	r2, [pc, #84]	; (8005090 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d004      	beq.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a13      	ldr	r2, [pc, #76]	; (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d10c      	bne.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	4313      	orrs	r3, r2
 800505a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40010000 	.word	0x40010000
 8005088:	40000400 	.word	0x40000400
 800508c:	40000800 	.word	0x40000800
 8005090:	40000c00 	.word	0x40000c00
 8005094:	40014000 	.word	0x40014000

08005098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e03f      	b.n	800512a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d106      	bne.n	80050c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7fc fea0 	bl	8001e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2224      	movs	r2, #36	; 0x24
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fde9 	bl	8005cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	691a      	ldr	r2, [r3, #16]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	695a      	ldr	r2, [r3, #20]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b08a      	sub	sp, #40	; 0x28
 8005136:	af02      	add	r7, sp, #8
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	4613      	mov	r3, r2
 8005140:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b20      	cmp	r3, #32
 8005150:	d17c      	bne.n	800524c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_UART_Transmit+0x2c>
 8005158:	88fb      	ldrh	r3, [r7, #6]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e075      	b.n	800524e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_UART_Transmit+0x3e>
 800516c:	2302      	movs	r3, #2
 800516e:	e06e      	b.n	800524e <HAL_UART_Transmit+0x11c>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2221      	movs	r2, #33	; 0x21
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005186:	f7fd f807 	bl	8002198 <HAL_GetTick>
 800518a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	88fa      	ldrh	r2, [r7, #6]
 8005196:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051a0:	d108      	bne.n	80051b4 <HAL_UART_Transmit+0x82>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d104      	bne.n	80051b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	e003      	b.n	80051bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051c4:	e02a      	b.n	800521c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2200      	movs	r2, #0
 80051ce:	2180      	movs	r1, #128	; 0x80
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fb29 	bl	8005828 <UART_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e036      	b.n	800524e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10b      	bne.n	80051fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	3302      	adds	r3, #2
 80051fa:	61bb      	str	r3, [r7, #24]
 80051fc:	e007      	b.n	800520e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	781a      	ldrb	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	3301      	adds	r3, #1
 800520c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1cf      	bne.n	80051c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2200      	movs	r2, #0
 800522e:	2140      	movs	r1, #64	; 0x40
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 faf9 	bl	8005828 <UART_WaitOnFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e006      	b.n	800524e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	4613      	mov	r3, r2
 8005262:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b20      	cmp	r3, #32
 800526e:	d11d      	bne.n	80052ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_UART_Receive_IT+0x26>
 8005276:	88fb      	ldrh	r3, [r7, #6]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e016      	b.n	80052ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_UART_Receive_IT+0x38>
 800528a:	2302      	movs	r3, #2
 800528c:	e00f      	b.n	80052ae <HAL_UART_Receive_IT+0x58>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	461a      	mov	r2, r3
 80052a0:	68b9      	ldr	r1, [r7, #8]
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fb2e 	bl	8005904 <UART_Start_Receive_IT>
 80052a8:	4603      	mov	r3, r0
 80052aa:	e000      	b.n	80052ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80052ac:	2302      	movs	r3, #2
  }
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b0ba      	sub	sp, #232	; 0xe8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80052de:	2300      	movs	r3, #0
 80052e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ee:	f003 030f 	and.w	r3, r3, #15
 80052f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10f      	bne.n	800531e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_UART_IRQHandler+0x66>
 800530a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fc11 	bl	8005b3e <UART_Receive_IT>
      return;
 800531c:	e256      	b.n	80057cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800531e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 80de 	beq.w	80054e4 <HAL_UART_IRQHandler+0x22c>
 8005328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005334:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005338:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80d1 	beq.w	80054e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <HAL_UART_IRQHandler+0xae>
 800534e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f043 0201 	orr.w	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536a:	f003 0304 	and.w	r3, r3, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <HAL_UART_IRQHandler+0xd2>
 8005372:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f043 0202 	orr.w	r2, r3, #2
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800538a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00b      	beq.n	80053ae <HAL_UART_IRQHandler+0xf6>
 8005396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800539a:	f003 0301 	and.w	r3, r3, #1
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	f043 0204 	orr.w	r2, r3, #4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d011      	beq.n	80053de <HAL_UART_IRQHandler+0x126>
 80053ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d105      	bne.n	80053d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f043 0208 	orr.w	r2, r3, #8
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 81ed 	beq.w	80057c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d008      	beq.n	8005406 <HAL_UART_IRQHandler+0x14e>
 80053f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fb9c 	bl	8005b3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005410:	2b40      	cmp	r3, #64	; 0x40
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <HAL_UART_IRQHandler+0x17a>
 800542a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800542e:	2b00      	cmp	r3, #0
 8005430:	d04f      	beq.n	80054d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 faa4 	bl	8005980 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005442:	2b40      	cmp	r3, #64	; 0x40
 8005444:	d141      	bne.n	80054ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3314      	adds	r3, #20
 800544c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005450:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005454:	e853 3f00 	ldrex	r3, [r3]
 8005458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800545c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005464:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3314      	adds	r3, #20
 800546e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005472:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005476:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800547e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800548a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1d9      	bne.n	8005446 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	2b00      	cmp	r3, #0
 8005498:	d013      	beq.n	80054c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	4a7d      	ldr	r2, [pc, #500]	; (8005694 <HAL_UART_IRQHandler+0x3dc>)
 80054a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fd fa99 	bl	80029de <HAL_DMA_Abort_IT>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d016      	beq.n	80054e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054bc:	4610      	mov	r0, r2
 80054be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	e00e      	b.n	80054e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f99a 	bl	80057fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c8:	e00a      	b.n	80054e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f996 	bl	80057fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d0:	e006      	b.n	80054e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f992 	bl	80057fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054de:	e170      	b.n	80057c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e0:	bf00      	nop
    return;
 80054e2:	e16e      	b.n	80057c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	f040 814a 	bne.w	8005782 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 8143 	beq.w	8005782 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	2b00      	cmp	r3, #0
 8005506:	f000 813c 	beq.w	8005782 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800550a:	2300      	movs	r3, #0
 800550c:	60bb      	str	r3, [r7, #8]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	f040 80b4 	bne.w	8005698 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800553c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8140 	beq.w	80057c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800554a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800554e:	429a      	cmp	r2, r3
 8005550:	f080 8139 	bcs.w	80057c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800555a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005566:	f000 8088 	beq.w	800567a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005574:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005580:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005588:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	330c      	adds	r3, #12
 8005592:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005596:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800559a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1d9      	bne.n	800556a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3314      	adds	r3, #20
 80055bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80055c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3314      	adds	r3, #20
 80055d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80055de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80055e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e1      	bne.n	80055b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3314      	adds	r3, #20
 80055f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3314      	adds	r3, #20
 8005612:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005616:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005618:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800561c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e3      	bne.n	80055f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	330c      	adds	r3, #12
 800563e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005642:	e853 3f00 	ldrex	r3, [r3]
 8005646:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800564a:	f023 0310 	bic.w	r3, r3, #16
 800564e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800565c:	65ba      	str	r2, [r7, #88]	; 0x58
 800565e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005660:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005662:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005664:	e841 2300 	strex	r3, r2, [r1]
 8005668:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800566a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1e3      	bne.n	8005638 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	4618      	mov	r0, r3
 8005676:	f7fd f942 	bl	80028fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005682:	b29b      	uxth	r3, r3
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	b29b      	uxth	r3, r3
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f8c0 	bl	8005810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005690:	e099      	b.n	80057c6 <HAL_UART_IRQHandler+0x50e>
 8005692:	bf00      	nop
 8005694:	08005a47 	.word	0x08005a47
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 808b 	beq.w	80057ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80056b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 8086 	beq.w	80057ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	330c      	adds	r3, #12
 80056c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	330c      	adds	r3, #12
 80056de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80056e2:	647a      	str	r2, [r7, #68]	; 0x44
 80056e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e3      	bne.n	80056be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3314      	adds	r3, #20
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	623b      	str	r3, [r7, #32]
   return(result);
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	f023 0301 	bic.w	r3, r3, #1
 800570c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3314      	adds	r3, #20
 8005716:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800571a:	633a      	str	r2, [r7, #48]	; 0x30
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e3      	bne.n	80056f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	60fb      	str	r3, [r7, #12]
   return(result);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f023 0310 	bic.w	r3, r3, #16
 8005752:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	330c      	adds	r3, #12
 800575c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005760:	61fa      	str	r2, [r7, #28]
 8005762:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	69b9      	ldr	r1, [r7, #24]
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	617b      	str	r3, [r7, #20]
   return(result);
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e3      	bne.n	800573c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f848 	bl	8005810 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005780:	e023      	b.n	80057ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <HAL_UART_IRQHandler+0x4ea>
 800578e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f967 	bl	8005a6e <UART_Transmit_IT>
    return;
 80057a0:	e014      	b.n	80057cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00e      	beq.n	80057cc <HAL_UART_IRQHandler+0x514>
 80057ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d008      	beq.n	80057cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f9a7 	bl	8005b0e <UART_EndTransmit_IT>
    return;
 80057c0:	e004      	b.n	80057cc <HAL_UART_IRQHandler+0x514>
    return;
 80057c2:	bf00      	nop
 80057c4:	e002      	b.n	80057cc <HAL_UART_IRQHandler+0x514>
      return;
 80057c6:	bf00      	nop
 80057c8:	e000      	b.n	80057cc <HAL_UART_IRQHandler+0x514>
      return;
 80057ca:	bf00      	nop
  }
}
 80057cc:	37e8      	adds	r7, #232	; 0xe8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop

080057d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005804:	bf00      	nop
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	460b      	mov	r3, r1
 800581a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b090      	sub	sp, #64	; 0x40
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	4613      	mov	r3, r2
 8005836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005838:	e050      	b.n	80058dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800583a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005840:	d04c      	beq.n	80058dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <UART_WaitOnFlagUntilTimeout+0x30>
 8005848:	f7fc fca6 	bl	8002198 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005854:	429a      	cmp	r2, r3
 8005856:	d241      	bcs.n	80058dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	330c      	adds	r3, #12
 800585e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005878:	637a      	str	r2, [r7, #52]	; 0x34
 800587a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800587e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e5      	bne.n	8005858 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3314      	adds	r3, #20
 8005892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	613b      	str	r3, [r7, #16]
   return(result);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f023 0301 	bic.w	r3, r3, #1
 80058a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3314      	adds	r3, #20
 80058aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058ac:	623a      	str	r2, [r7, #32]
 80058ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	69f9      	ldr	r1, [r7, #28]
 80058b2:	6a3a      	ldr	r2, [r7, #32]
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e5      	bne.n	800588c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e00f      	b.n	80058fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	4013      	ands	r3, r2
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	bf0c      	ite	eq
 80058ec:	2301      	moveq	r3, #1
 80058ee:	2300      	movne	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d09f      	beq.n	800583a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3740      	adds	r7, #64	; 0x40
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	4613      	mov	r3, r2
 8005910:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	88fa      	ldrh	r2, [r7, #6]
 800591c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	88fa      	ldrh	r2, [r7, #6]
 8005922:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2222      	movs	r2, #34	; 0x22
 800592e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68da      	ldr	r2, [r3, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005950:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695a      	ldr	r2, [r3, #20]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68da      	ldr	r2, [r3, #12]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0220 	orr.w	r2, r2, #32
 8005970:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b095      	sub	sp, #84	; 0x54
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	330c      	adds	r3, #12
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800599e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	330c      	adds	r3, #12
 80059a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059a8:	643a      	str	r2, [r7, #64]	; 0x40
 80059aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e5      	bne.n	8005988 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3314      	adds	r3, #20
 80059c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3314      	adds	r3, #20
 80059da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e5      	bne.n	80059bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d119      	bne.n	8005a2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	e853 3f00 	ldrex	r3, [r3]
 8005a06:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	f023 0310 	bic.w	r3, r3, #16
 8005a0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	330c      	adds	r3, #12
 8005a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a18:	61ba      	str	r2, [r7, #24]
 8005a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1c:	6979      	ldr	r1, [r7, #20]
 8005a1e:	69ba      	ldr	r2, [r7, #24]
 8005a20:	e841 2300 	strex	r3, r2, [r1]
 8005a24:	613b      	str	r3, [r7, #16]
   return(result);
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e5      	bne.n	80059f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a3a:	bf00      	nop
 8005a3c:	3754      	adds	r7, #84	; 0x54
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff fecb 	bl	80057fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b21      	cmp	r3, #33	; 0x21
 8005a80:	d13e      	bne.n	8005b00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a8a:	d114      	bne.n	8005ab6 <UART_Transmit_IT+0x48>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d110      	bne.n	8005ab6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005aa8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	1c9a      	adds	r2, r3, #2
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	621a      	str	r2, [r3, #32]
 8005ab4:	e008      	b.n	8005ac8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	1c59      	adds	r1, r3, #1
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6211      	str	r1, [r2, #32]
 8005ac0:	781a      	ldrb	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10f      	bne.n	8005afc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005afa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e000      	b.n	8005b02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b00:	2302      	movs	r3, #2
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr

08005b0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68da      	ldr	r2, [r3, #12]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff fe50 	bl	80057d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b08c      	sub	sp, #48	; 0x30
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b22      	cmp	r3, #34	; 0x22
 8005b50:	f040 80ab 	bne.w	8005caa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5c:	d117      	bne.n	8005b8e <UART_Receive_IT+0x50>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d113      	bne.n	8005b8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b7c:	b29a      	uxth	r2, r3
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	1c9a      	adds	r2, r3, #2
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	629a      	str	r2, [r3, #40]	; 0x28
 8005b8c:	e026      	b.n	8005bdc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b94:	2300      	movs	r3, #0
 8005b96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba0:	d007      	beq.n	8005bb2 <UART_Receive_IT+0x74>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <UART_Receive_IT+0x82>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d106      	bne.n	8005bc0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	e008      	b.n	8005bd2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	4619      	mov	r1, r3
 8005bea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d15a      	bne.n	8005ca6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0220 	bic.w	r2, r2, #32
 8005bfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0201 	bic.w	r2, r2, #1
 8005c1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d135      	bne.n	8005c9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	613b      	str	r3, [r7, #16]
   return(result);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f023 0310 	bic.w	r3, r3, #16
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	330c      	adds	r3, #12
 8005c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c56:	623a      	str	r2, [r7, #32]
 8005c58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	69f9      	ldr	r1, [r7, #28]
 8005c5c:	6a3a      	ldr	r2, [r7, #32]
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e5      	bne.n	8005c36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0310 	and.w	r3, r3, #16
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d10a      	bne.n	8005c8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff fdbb 	bl	8005810 <HAL_UARTEx_RxEventCallback>
 8005c9a:	e002      	b.n	8005ca2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff fda3 	bl	80057e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e002      	b.n	8005cac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e000      	b.n	8005cac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005caa:	2302      	movs	r3, #2
  }
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3730      	adds	r7, #48	; 0x30
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb8:	b0c0      	sub	sp, #256	; 0x100
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd0:	68d9      	ldr	r1, [r3, #12]
 8005cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	ea40 0301 	orr.w	r3, r0, r1
 8005cdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d0c:	f021 010c 	bic.w	r1, r1, #12
 8005d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2e:	6999      	ldr	r1, [r3, #24]
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	ea40 0301 	orr.w	r3, r0, r1
 8005d3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b8f      	ldr	r3, [pc, #572]	; (8005f80 <UART_SetConfig+0x2cc>)
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d005      	beq.n	8005d54 <UART_SetConfig+0xa0>
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	4b8d      	ldr	r3, [pc, #564]	; (8005f84 <UART_SetConfig+0x2d0>)
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d104      	bne.n	8005d5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d54:	f7fe fbf8 	bl	8004548 <HAL_RCC_GetPCLK2Freq>
 8005d58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d5c:	e003      	b.n	8005d66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d5e:	f7fe fbdf 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8005d62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d70:	f040 810c 	bne.w	8005f8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d86:	4622      	mov	r2, r4
 8005d88:	462b      	mov	r3, r5
 8005d8a:	1891      	adds	r1, r2, r2
 8005d8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d8e:	415b      	adcs	r3, r3
 8005d90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d96:	4621      	mov	r1, r4
 8005d98:	eb12 0801 	adds.w	r8, r2, r1
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	eb43 0901 	adc.w	r9, r3, r1
 8005da2:	f04f 0200 	mov.w	r2, #0
 8005da6:	f04f 0300 	mov.w	r3, #0
 8005daa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005db2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005db6:	4690      	mov	r8, r2
 8005db8:	4699      	mov	r9, r3
 8005dba:	4623      	mov	r3, r4
 8005dbc:	eb18 0303 	adds.w	r3, r8, r3
 8005dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005dc4:	462b      	mov	r3, r5
 8005dc6:	eb49 0303 	adc.w	r3, r9, r3
 8005dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005dde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005de2:	460b      	mov	r3, r1
 8005de4:	18db      	adds	r3, r3, r3
 8005de6:	653b      	str	r3, [r7, #80]	; 0x50
 8005de8:	4613      	mov	r3, r2
 8005dea:	eb42 0303 	adc.w	r3, r2, r3
 8005dee:	657b      	str	r3, [r7, #84]	; 0x54
 8005df0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005df4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005df8:	f7fa fe38 	bl	8000a6c <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4b61      	ldr	r3, [pc, #388]	; (8005f88 <UART_SetConfig+0x2d4>)
 8005e02:	fba3 2302 	umull	r2, r3, r3, r2
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	011c      	lsls	r4, r3, #4
 8005e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	464b      	mov	r3, r9
 8005e20:	1891      	adds	r1, r2, r2
 8005e22:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e24:	415b      	adcs	r3, r3
 8005e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e2c:	4641      	mov	r1, r8
 8005e2e:	eb12 0a01 	adds.w	sl, r2, r1
 8005e32:	4649      	mov	r1, r9
 8005e34:	eb43 0b01 	adc.w	fp, r3, r1
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e4c:	4692      	mov	sl, r2
 8005e4e:	469b      	mov	fp, r3
 8005e50:	4643      	mov	r3, r8
 8005e52:	eb1a 0303 	adds.w	r3, sl, r3
 8005e56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	eb4b 0303 	adc.w	r3, fp, r3
 8005e60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	18db      	adds	r3, r3, r3
 8005e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e7e:	4613      	mov	r3, r2
 8005e80:	eb42 0303 	adc.w	r3, r2, r3
 8005e84:	647b      	str	r3, [r7, #68]	; 0x44
 8005e86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e8e:	f7fa fded 	bl	8000a6c <__aeabi_uldivmod>
 8005e92:	4602      	mov	r2, r0
 8005e94:	460b      	mov	r3, r1
 8005e96:	4611      	mov	r1, r2
 8005e98:	4b3b      	ldr	r3, [pc, #236]	; (8005f88 <UART_SetConfig+0x2d4>)
 8005e9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	2264      	movs	r2, #100	; 0x64
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	1acb      	subs	r3, r1, r3
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005eae:	4b36      	ldr	r3, [pc, #216]	; (8005f88 <UART_SetConfig+0x2d4>)
 8005eb0:	fba3 2302 	umull	r2, r3, r3, r2
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ebc:	441c      	add	r4, r3
 8005ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ec8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ecc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ed0:	4642      	mov	r2, r8
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	1891      	adds	r1, r2, r2
 8005ed6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ed8:	415b      	adcs	r3, r3
 8005eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005edc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ee0:	4641      	mov	r1, r8
 8005ee2:	1851      	adds	r1, r2, r1
 8005ee4:	6339      	str	r1, [r7, #48]	; 0x30
 8005ee6:	4649      	mov	r1, r9
 8005ee8:	414b      	adcs	r3, r1
 8005eea:	637b      	str	r3, [r7, #52]	; 0x34
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ef8:	4659      	mov	r1, fp
 8005efa:	00cb      	lsls	r3, r1, #3
 8005efc:	4651      	mov	r1, sl
 8005efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f02:	4651      	mov	r1, sl
 8005f04:	00ca      	lsls	r2, r1, #3
 8005f06:	4610      	mov	r0, r2
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	4642      	mov	r2, r8
 8005f0e:	189b      	adds	r3, r3, r2
 8005f10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f14:	464b      	mov	r3, r9
 8005f16:	460a      	mov	r2, r1
 8005f18:	eb42 0303 	adc.w	r3, r2, r3
 8005f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f34:	460b      	mov	r3, r1
 8005f36:	18db      	adds	r3, r3, r3
 8005f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	eb42 0303 	adc.w	r3, r2, r3
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f4a:	f7fa fd8f 	bl	8000a6c <__aeabi_uldivmod>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	460b      	mov	r3, r1
 8005f52:	4b0d      	ldr	r3, [pc, #52]	; (8005f88 <UART_SetConfig+0x2d4>)
 8005f54:	fba3 1302 	umull	r1, r3, r3, r2
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	2164      	movs	r1, #100	; 0x64
 8005f5c:	fb01 f303 	mul.w	r3, r1, r3
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	3332      	adds	r3, #50	; 0x32
 8005f66:	4a08      	ldr	r2, [pc, #32]	; (8005f88 <UART_SetConfig+0x2d4>)
 8005f68:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	f003 0207 	and.w	r2, r3, #7
 8005f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4422      	add	r2, r4
 8005f7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f7c:	e105      	b.n	800618a <UART_SetConfig+0x4d6>
 8005f7e:	bf00      	nop
 8005f80:	40011000 	.word	0x40011000
 8005f84:	40011400 	.word	0x40011400
 8005f88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	464b      	mov	r3, r9
 8005fa2:	1891      	adds	r1, r2, r2
 8005fa4:	6239      	str	r1, [r7, #32]
 8005fa6:	415b      	adcs	r3, r3
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8005faa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fae:	4641      	mov	r1, r8
 8005fb0:	1854      	adds	r4, r2, r1
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	eb43 0501 	adc.w	r5, r3, r1
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	00eb      	lsls	r3, r5, #3
 8005fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fc6:	00e2      	lsls	r2, r4, #3
 8005fc8:	4614      	mov	r4, r2
 8005fca:	461d      	mov	r5, r3
 8005fcc:	4643      	mov	r3, r8
 8005fce:	18e3      	adds	r3, r4, r3
 8005fd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fd4:	464b      	mov	r3, r9
 8005fd6:	eb45 0303 	adc.w	r3, r5, r3
 8005fda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fee:	f04f 0200 	mov.w	r2, #0
 8005ff2:	f04f 0300 	mov.w	r3, #0
 8005ff6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	008b      	lsls	r3, r1, #2
 8005ffe:	4621      	mov	r1, r4
 8006000:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006004:	4621      	mov	r1, r4
 8006006:	008a      	lsls	r2, r1, #2
 8006008:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800600c:	f7fa fd2e 	bl	8000a6c <__aeabi_uldivmod>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4b60      	ldr	r3, [pc, #384]	; (8006198 <UART_SetConfig+0x4e4>)
 8006016:	fba3 2302 	umull	r2, r3, r3, r2
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	011c      	lsls	r4, r3, #4
 800601e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006022:	2200      	movs	r2, #0
 8006024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006028:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800602c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006030:	4642      	mov	r2, r8
 8006032:	464b      	mov	r3, r9
 8006034:	1891      	adds	r1, r2, r2
 8006036:	61b9      	str	r1, [r7, #24]
 8006038:	415b      	adcs	r3, r3
 800603a:	61fb      	str	r3, [r7, #28]
 800603c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006040:	4641      	mov	r1, r8
 8006042:	1851      	adds	r1, r2, r1
 8006044:	6139      	str	r1, [r7, #16]
 8006046:	4649      	mov	r1, r9
 8006048:	414b      	adcs	r3, r1
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	f04f 0200 	mov.w	r2, #0
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006058:	4659      	mov	r1, fp
 800605a:	00cb      	lsls	r3, r1, #3
 800605c:	4651      	mov	r1, sl
 800605e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006062:	4651      	mov	r1, sl
 8006064:	00ca      	lsls	r2, r1, #3
 8006066:	4610      	mov	r0, r2
 8006068:	4619      	mov	r1, r3
 800606a:	4603      	mov	r3, r0
 800606c:	4642      	mov	r2, r8
 800606e:	189b      	adds	r3, r3, r2
 8006070:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006074:	464b      	mov	r3, r9
 8006076:	460a      	mov	r2, r1
 8006078:	eb42 0303 	adc.w	r3, r2, r3
 800607c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	67bb      	str	r3, [r7, #120]	; 0x78
 800608a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006098:	4649      	mov	r1, r9
 800609a:	008b      	lsls	r3, r1, #2
 800609c:	4641      	mov	r1, r8
 800609e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060a2:	4641      	mov	r1, r8
 80060a4:	008a      	lsls	r2, r1, #2
 80060a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060aa:	f7fa fcdf 	bl	8000a6c <__aeabi_uldivmod>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4b39      	ldr	r3, [pc, #228]	; (8006198 <UART_SetConfig+0x4e4>)
 80060b4:	fba3 1302 	umull	r1, r3, r3, r2
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	2164      	movs	r1, #100	; 0x64
 80060bc:	fb01 f303 	mul.w	r3, r1, r3
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	3332      	adds	r3, #50	; 0x32
 80060c6:	4a34      	ldr	r2, [pc, #208]	; (8006198 <UART_SetConfig+0x4e4>)
 80060c8:	fba2 2303 	umull	r2, r3, r2, r3
 80060cc:	095b      	lsrs	r3, r3, #5
 80060ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060d2:	441c      	add	r4, r3
 80060d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060d8:	2200      	movs	r2, #0
 80060da:	673b      	str	r3, [r7, #112]	; 0x70
 80060dc:	677a      	str	r2, [r7, #116]	; 0x74
 80060de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060e2:	4642      	mov	r2, r8
 80060e4:	464b      	mov	r3, r9
 80060e6:	1891      	adds	r1, r2, r2
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	415b      	adcs	r3, r3
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060f2:	4641      	mov	r1, r8
 80060f4:	1851      	adds	r1, r2, r1
 80060f6:	6039      	str	r1, [r7, #0]
 80060f8:	4649      	mov	r1, r9
 80060fa:	414b      	adcs	r3, r1
 80060fc:	607b      	str	r3, [r7, #4]
 80060fe:	f04f 0200 	mov.w	r2, #0
 8006102:	f04f 0300 	mov.w	r3, #0
 8006106:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800610a:	4659      	mov	r1, fp
 800610c:	00cb      	lsls	r3, r1, #3
 800610e:	4651      	mov	r1, sl
 8006110:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006114:	4651      	mov	r1, sl
 8006116:	00ca      	lsls	r2, r1, #3
 8006118:	4610      	mov	r0, r2
 800611a:	4619      	mov	r1, r3
 800611c:	4603      	mov	r3, r0
 800611e:	4642      	mov	r2, r8
 8006120:	189b      	adds	r3, r3, r2
 8006122:	66bb      	str	r3, [r7, #104]	; 0x68
 8006124:	464b      	mov	r3, r9
 8006126:	460a      	mov	r2, r1
 8006128:	eb42 0303 	adc.w	r3, r2, r3
 800612c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800612e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	663b      	str	r3, [r7, #96]	; 0x60
 8006138:	667a      	str	r2, [r7, #100]	; 0x64
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	f04f 0300 	mov.w	r3, #0
 8006142:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006146:	4649      	mov	r1, r9
 8006148:	008b      	lsls	r3, r1, #2
 800614a:	4641      	mov	r1, r8
 800614c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006150:	4641      	mov	r1, r8
 8006152:	008a      	lsls	r2, r1, #2
 8006154:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006158:	f7fa fc88 	bl	8000a6c <__aeabi_uldivmod>
 800615c:	4602      	mov	r2, r0
 800615e:	460b      	mov	r3, r1
 8006160:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <UART_SetConfig+0x4e4>)
 8006162:	fba3 1302 	umull	r1, r3, r3, r2
 8006166:	095b      	lsrs	r3, r3, #5
 8006168:	2164      	movs	r1, #100	; 0x64
 800616a:	fb01 f303 	mul.w	r3, r1, r3
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	3332      	adds	r3, #50	; 0x32
 8006174:	4a08      	ldr	r2, [pc, #32]	; (8006198 <UART_SetConfig+0x4e4>)
 8006176:	fba2 2303 	umull	r2, r3, r2, r3
 800617a:	095b      	lsrs	r3, r3, #5
 800617c:	f003 020f 	and.w	r2, r3, #15
 8006180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4422      	add	r2, r4
 8006188:	609a      	str	r2, [r3, #8]
}
 800618a:	bf00      	nop
 800618c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006190:	46bd      	mov	sp, r7
 8006192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006196:	bf00      	nop
 8006198:	51eb851f 	.word	0x51eb851f

0800619c <__errno>:
 800619c:	4b01      	ldr	r3, [pc, #4]	; (80061a4 <__errno+0x8>)
 800619e:	6818      	ldr	r0, [r3, #0]
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	20000010 	.word	0x20000010

080061a8 <__libc_init_array>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	4d0d      	ldr	r5, [pc, #52]	; (80061e0 <__libc_init_array+0x38>)
 80061ac:	4c0d      	ldr	r4, [pc, #52]	; (80061e4 <__libc_init_array+0x3c>)
 80061ae:	1b64      	subs	r4, r4, r5
 80061b0:	10a4      	asrs	r4, r4, #2
 80061b2:	2600      	movs	r6, #0
 80061b4:	42a6      	cmp	r6, r4
 80061b6:	d109      	bne.n	80061cc <__libc_init_array+0x24>
 80061b8:	4d0b      	ldr	r5, [pc, #44]	; (80061e8 <__libc_init_array+0x40>)
 80061ba:	4c0c      	ldr	r4, [pc, #48]	; (80061ec <__libc_init_array+0x44>)
 80061bc:	f001 fa00 	bl	80075c0 <_init>
 80061c0:	1b64      	subs	r4, r4, r5
 80061c2:	10a4      	asrs	r4, r4, #2
 80061c4:	2600      	movs	r6, #0
 80061c6:	42a6      	cmp	r6, r4
 80061c8:	d105      	bne.n	80061d6 <__libc_init_array+0x2e>
 80061ca:	bd70      	pop	{r4, r5, r6, pc}
 80061cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061d0:	4798      	blx	r3
 80061d2:	3601      	adds	r6, #1
 80061d4:	e7ee      	b.n	80061b4 <__libc_init_array+0xc>
 80061d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061da:	4798      	blx	r3
 80061dc:	3601      	adds	r6, #1
 80061de:	e7f2      	b.n	80061c6 <__libc_init_array+0x1e>
 80061e0:	080078fc 	.word	0x080078fc
 80061e4:	080078fc 	.word	0x080078fc
 80061e8:	080078fc 	.word	0x080078fc
 80061ec:	08007904 	.word	0x08007904

080061f0 <memcpy>:
 80061f0:	440a      	add	r2, r1
 80061f2:	4291      	cmp	r1, r2
 80061f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80061f8:	d100      	bne.n	80061fc <memcpy+0xc>
 80061fa:	4770      	bx	lr
 80061fc:	b510      	push	{r4, lr}
 80061fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006206:	4291      	cmp	r1, r2
 8006208:	d1f9      	bne.n	80061fe <memcpy+0xe>
 800620a:	bd10      	pop	{r4, pc}

0800620c <memset>:
 800620c:	4402      	add	r2, r0
 800620e:	4603      	mov	r3, r0
 8006210:	4293      	cmp	r3, r2
 8006212:	d100      	bne.n	8006216 <memset+0xa>
 8006214:	4770      	bx	lr
 8006216:	f803 1b01 	strb.w	r1, [r3], #1
 800621a:	e7f9      	b.n	8006210 <memset+0x4>

0800621c <iprintf>:
 800621c:	b40f      	push	{r0, r1, r2, r3}
 800621e:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <iprintf+0x2c>)
 8006220:	b513      	push	{r0, r1, r4, lr}
 8006222:	681c      	ldr	r4, [r3, #0]
 8006224:	b124      	cbz	r4, 8006230 <iprintf+0x14>
 8006226:	69a3      	ldr	r3, [r4, #24]
 8006228:	b913      	cbnz	r3, 8006230 <iprintf+0x14>
 800622a:	4620      	mov	r0, r4
 800622c:	f000 fa7e 	bl	800672c <__sinit>
 8006230:	ab05      	add	r3, sp, #20
 8006232:	9a04      	ldr	r2, [sp, #16]
 8006234:	68a1      	ldr	r1, [r4, #8]
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	4620      	mov	r0, r4
 800623a:	f000 fde3 	bl	8006e04 <_vfiprintf_r>
 800623e:	b002      	add	sp, #8
 8006240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006244:	b004      	add	sp, #16
 8006246:	4770      	bx	lr
 8006248:	20000010 	.word	0x20000010

0800624c <_puts_r>:
 800624c:	b570      	push	{r4, r5, r6, lr}
 800624e:	460e      	mov	r6, r1
 8006250:	4605      	mov	r5, r0
 8006252:	b118      	cbz	r0, 800625c <_puts_r+0x10>
 8006254:	6983      	ldr	r3, [r0, #24]
 8006256:	b90b      	cbnz	r3, 800625c <_puts_r+0x10>
 8006258:	f000 fa68 	bl	800672c <__sinit>
 800625c:	69ab      	ldr	r3, [r5, #24]
 800625e:	68ac      	ldr	r4, [r5, #8]
 8006260:	b913      	cbnz	r3, 8006268 <_puts_r+0x1c>
 8006262:	4628      	mov	r0, r5
 8006264:	f000 fa62 	bl	800672c <__sinit>
 8006268:	4b2c      	ldr	r3, [pc, #176]	; (800631c <_puts_r+0xd0>)
 800626a:	429c      	cmp	r4, r3
 800626c:	d120      	bne.n	80062b0 <_puts_r+0x64>
 800626e:	686c      	ldr	r4, [r5, #4]
 8006270:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006272:	07db      	lsls	r3, r3, #31
 8006274:	d405      	bmi.n	8006282 <_puts_r+0x36>
 8006276:	89a3      	ldrh	r3, [r4, #12]
 8006278:	0598      	lsls	r0, r3, #22
 800627a:	d402      	bmi.n	8006282 <_puts_r+0x36>
 800627c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800627e:	f000 faf3 	bl	8006868 <__retarget_lock_acquire_recursive>
 8006282:	89a3      	ldrh	r3, [r4, #12]
 8006284:	0719      	lsls	r1, r3, #28
 8006286:	d51d      	bpl.n	80062c4 <_puts_r+0x78>
 8006288:	6923      	ldr	r3, [r4, #16]
 800628a:	b1db      	cbz	r3, 80062c4 <_puts_r+0x78>
 800628c:	3e01      	subs	r6, #1
 800628e:	68a3      	ldr	r3, [r4, #8]
 8006290:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006294:	3b01      	subs	r3, #1
 8006296:	60a3      	str	r3, [r4, #8]
 8006298:	bb39      	cbnz	r1, 80062ea <_puts_r+0x9e>
 800629a:	2b00      	cmp	r3, #0
 800629c:	da38      	bge.n	8006310 <_puts_r+0xc4>
 800629e:	4622      	mov	r2, r4
 80062a0:	210a      	movs	r1, #10
 80062a2:	4628      	mov	r0, r5
 80062a4:	f000 f868 	bl	8006378 <__swbuf_r>
 80062a8:	3001      	adds	r0, #1
 80062aa:	d011      	beq.n	80062d0 <_puts_r+0x84>
 80062ac:	250a      	movs	r5, #10
 80062ae:	e011      	b.n	80062d4 <_puts_r+0x88>
 80062b0:	4b1b      	ldr	r3, [pc, #108]	; (8006320 <_puts_r+0xd4>)
 80062b2:	429c      	cmp	r4, r3
 80062b4:	d101      	bne.n	80062ba <_puts_r+0x6e>
 80062b6:	68ac      	ldr	r4, [r5, #8]
 80062b8:	e7da      	b.n	8006270 <_puts_r+0x24>
 80062ba:	4b1a      	ldr	r3, [pc, #104]	; (8006324 <_puts_r+0xd8>)
 80062bc:	429c      	cmp	r4, r3
 80062be:	bf08      	it	eq
 80062c0:	68ec      	ldreq	r4, [r5, #12]
 80062c2:	e7d5      	b.n	8006270 <_puts_r+0x24>
 80062c4:	4621      	mov	r1, r4
 80062c6:	4628      	mov	r0, r5
 80062c8:	f000 f8a8 	bl	800641c <__swsetup_r>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d0dd      	beq.n	800628c <_puts_r+0x40>
 80062d0:	f04f 35ff 	mov.w	r5, #4294967295
 80062d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062d6:	07da      	lsls	r2, r3, #31
 80062d8:	d405      	bmi.n	80062e6 <_puts_r+0x9a>
 80062da:	89a3      	ldrh	r3, [r4, #12]
 80062dc:	059b      	lsls	r3, r3, #22
 80062de:	d402      	bmi.n	80062e6 <_puts_r+0x9a>
 80062e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062e2:	f000 fac2 	bl	800686a <__retarget_lock_release_recursive>
 80062e6:	4628      	mov	r0, r5
 80062e8:	bd70      	pop	{r4, r5, r6, pc}
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	da04      	bge.n	80062f8 <_puts_r+0xac>
 80062ee:	69a2      	ldr	r2, [r4, #24]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	dc06      	bgt.n	8006302 <_puts_r+0xb6>
 80062f4:	290a      	cmp	r1, #10
 80062f6:	d004      	beq.n	8006302 <_puts_r+0xb6>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	6022      	str	r2, [r4, #0]
 80062fe:	7019      	strb	r1, [r3, #0]
 8006300:	e7c5      	b.n	800628e <_puts_r+0x42>
 8006302:	4622      	mov	r2, r4
 8006304:	4628      	mov	r0, r5
 8006306:	f000 f837 	bl	8006378 <__swbuf_r>
 800630a:	3001      	adds	r0, #1
 800630c:	d1bf      	bne.n	800628e <_puts_r+0x42>
 800630e:	e7df      	b.n	80062d0 <_puts_r+0x84>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	250a      	movs	r5, #10
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	6022      	str	r2, [r4, #0]
 8006318:	701d      	strb	r5, [r3, #0]
 800631a:	e7db      	b.n	80062d4 <_puts_r+0x88>
 800631c:	08007880 	.word	0x08007880
 8006320:	080078a0 	.word	0x080078a0
 8006324:	08007860 	.word	0x08007860

08006328 <puts>:
 8006328:	4b02      	ldr	r3, [pc, #8]	; (8006334 <puts+0xc>)
 800632a:	4601      	mov	r1, r0
 800632c:	6818      	ldr	r0, [r3, #0]
 800632e:	f7ff bf8d 	b.w	800624c <_puts_r>
 8006332:	bf00      	nop
 8006334:	20000010 	.word	0x20000010

08006338 <siprintf>:
 8006338:	b40e      	push	{r1, r2, r3}
 800633a:	b500      	push	{lr}
 800633c:	b09c      	sub	sp, #112	; 0x70
 800633e:	ab1d      	add	r3, sp, #116	; 0x74
 8006340:	9002      	str	r0, [sp, #8]
 8006342:	9006      	str	r0, [sp, #24]
 8006344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006348:	4809      	ldr	r0, [pc, #36]	; (8006370 <siprintf+0x38>)
 800634a:	9107      	str	r1, [sp, #28]
 800634c:	9104      	str	r1, [sp, #16]
 800634e:	4909      	ldr	r1, [pc, #36]	; (8006374 <siprintf+0x3c>)
 8006350:	f853 2b04 	ldr.w	r2, [r3], #4
 8006354:	9105      	str	r1, [sp, #20]
 8006356:	6800      	ldr	r0, [r0, #0]
 8006358:	9301      	str	r3, [sp, #4]
 800635a:	a902      	add	r1, sp, #8
 800635c:	f000 fc28 	bl	8006bb0 <_svfiprintf_r>
 8006360:	9b02      	ldr	r3, [sp, #8]
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	b01c      	add	sp, #112	; 0x70
 8006368:	f85d eb04 	ldr.w	lr, [sp], #4
 800636c:	b003      	add	sp, #12
 800636e:	4770      	bx	lr
 8006370:	20000010 	.word	0x20000010
 8006374:	ffff0208 	.word	0xffff0208

08006378 <__swbuf_r>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	460e      	mov	r6, r1
 800637c:	4614      	mov	r4, r2
 800637e:	4605      	mov	r5, r0
 8006380:	b118      	cbz	r0, 800638a <__swbuf_r+0x12>
 8006382:	6983      	ldr	r3, [r0, #24]
 8006384:	b90b      	cbnz	r3, 800638a <__swbuf_r+0x12>
 8006386:	f000 f9d1 	bl	800672c <__sinit>
 800638a:	4b21      	ldr	r3, [pc, #132]	; (8006410 <__swbuf_r+0x98>)
 800638c:	429c      	cmp	r4, r3
 800638e:	d12b      	bne.n	80063e8 <__swbuf_r+0x70>
 8006390:	686c      	ldr	r4, [r5, #4]
 8006392:	69a3      	ldr	r3, [r4, #24]
 8006394:	60a3      	str	r3, [r4, #8]
 8006396:	89a3      	ldrh	r3, [r4, #12]
 8006398:	071a      	lsls	r2, r3, #28
 800639a:	d52f      	bpl.n	80063fc <__swbuf_r+0x84>
 800639c:	6923      	ldr	r3, [r4, #16]
 800639e:	b36b      	cbz	r3, 80063fc <__swbuf_r+0x84>
 80063a0:	6923      	ldr	r3, [r4, #16]
 80063a2:	6820      	ldr	r0, [r4, #0]
 80063a4:	1ac0      	subs	r0, r0, r3
 80063a6:	6963      	ldr	r3, [r4, #20]
 80063a8:	b2f6      	uxtb	r6, r6
 80063aa:	4283      	cmp	r3, r0
 80063ac:	4637      	mov	r7, r6
 80063ae:	dc04      	bgt.n	80063ba <__swbuf_r+0x42>
 80063b0:	4621      	mov	r1, r4
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 f926 	bl	8006604 <_fflush_r>
 80063b8:	bb30      	cbnz	r0, 8006408 <__swbuf_r+0x90>
 80063ba:	68a3      	ldr	r3, [r4, #8]
 80063bc:	3b01      	subs	r3, #1
 80063be:	60a3      	str	r3, [r4, #8]
 80063c0:	6823      	ldr	r3, [r4, #0]
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	6022      	str	r2, [r4, #0]
 80063c6:	701e      	strb	r6, [r3, #0]
 80063c8:	6963      	ldr	r3, [r4, #20]
 80063ca:	3001      	adds	r0, #1
 80063cc:	4283      	cmp	r3, r0
 80063ce:	d004      	beq.n	80063da <__swbuf_r+0x62>
 80063d0:	89a3      	ldrh	r3, [r4, #12]
 80063d2:	07db      	lsls	r3, r3, #31
 80063d4:	d506      	bpl.n	80063e4 <__swbuf_r+0x6c>
 80063d6:	2e0a      	cmp	r6, #10
 80063d8:	d104      	bne.n	80063e4 <__swbuf_r+0x6c>
 80063da:	4621      	mov	r1, r4
 80063dc:	4628      	mov	r0, r5
 80063de:	f000 f911 	bl	8006604 <_fflush_r>
 80063e2:	b988      	cbnz	r0, 8006408 <__swbuf_r+0x90>
 80063e4:	4638      	mov	r0, r7
 80063e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063e8:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <__swbuf_r+0x9c>)
 80063ea:	429c      	cmp	r4, r3
 80063ec:	d101      	bne.n	80063f2 <__swbuf_r+0x7a>
 80063ee:	68ac      	ldr	r4, [r5, #8]
 80063f0:	e7cf      	b.n	8006392 <__swbuf_r+0x1a>
 80063f2:	4b09      	ldr	r3, [pc, #36]	; (8006418 <__swbuf_r+0xa0>)
 80063f4:	429c      	cmp	r4, r3
 80063f6:	bf08      	it	eq
 80063f8:	68ec      	ldreq	r4, [r5, #12]
 80063fa:	e7ca      	b.n	8006392 <__swbuf_r+0x1a>
 80063fc:	4621      	mov	r1, r4
 80063fe:	4628      	mov	r0, r5
 8006400:	f000 f80c 	bl	800641c <__swsetup_r>
 8006404:	2800      	cmp	r0, #0
 8006406:	d0cb      	beq.n	80063a0 <__swbuf_r+0x28>
 8006408:	f04f 37ff 	mov.w	r7, #4294967295
 800640c:	e7ea      	b.n	80063e4 <__swbuf_r+0x6c>
 800640e:	bf00      	nop
 8006410:	08007880 	.word	0x08007880
 8006414:	080078a0 	.word	0x080078a0
 8006418:	08007860 	.word	0x08007860

0800641c <__swsetup_r>:
 800641c:	4b32      	ldr	r3, [pc, #200]	; (80064e8 <__swsetup_r+0xcc>)
 800641e:	b570      	push	{r4, r5, r6, lr}
 8006420:	681d      	ldr	r5, [r3, #0]
 8006422:	4606      	mov	r6, r0
 8006424:	460c      	mov	r4, r1
 8006426:	b125      	cbz	r5, 8006432 <__swsetup_r+0x16>
 8006428:	69ab      	ldr	r3, [r5, #24]
 800642a:	b913      	cbnz	r3, 8006432 <__swsetup_r+0x16>
 800642c:	4628      	mov	r0, r5
 800642e:	f000 f97d 	bl	800672c <__sinit>
 8006432:	4b2e      	ldr	r3, [pc, #184]	; (80064ec <__swsetup_r+0xd0>)
 8006434:	429c      	cmp	r4, r3
 8006436:	d10f      	bne.n	8006458 <__swsetup_r+0x3c>
 8006438:	686c      	ldr	r4, [r5, #4]
 800643a:	89a3      	ldrh	r3, [r4, #12]
 800643c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006440:	0719      	lsls	r1, r3, #28
 8006442:	d42c      	bmi.n	800649e <__swsetup_r+0x82>
 8006444:	06dd      	lsls	r5, r3, #27
 8006446:	d411      	bmi.n	800646c <__swsetup_r+0x50>
 8006448:	2309      	movs	r3, #9
 800644a:	6033      	str	r3, [r6, #0]
 800644c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	f04f 30ff 	mov.w	r0, #4294967295
 8006456:	e03e      	b.n	80064d6 <__swsetup_r+0xba>
 8006458:	4b25      	ldr	r3, [pc, #148]	; (80064f0 <__swsetup_r+0xd4>)
 800645a:	429c      	cmp	r4, r3
 800645c:	d101      	bne.n	8006462 <__swsetup_r+0x46>
 800645e:	68ac      	ldr	r4, [r5, #8]
 8006460:	e7eb      	b.n	800643a <__swsetup_r+0x1e>
 8006462:	4b24      	ldr	r3, [pc, #144]	; (80064f4 <__swsetup_r+0xd8>)
 8006464:	429c      	cmp	r4, r3
 8006466:	bf08      	it	eq
 8006468:	68ec      	ldreq	r4, [r5, #12]
 800646a:	e7e6      	b.n	800643a <__swsetup_r+0x1e>
 800646c:	0758      	lsls	r0, r3, #29
 800646e:	d512      	bpl.n	8006496 <__swsetup_r+0x7a>
 8006470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006472:	b141      	cbz	r1, 8006486 <__swsetup_r+0x6a>
 8006474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006478:	4299      	cmp	r1, r3
 800647a:	d002      	beq.n	8006482 <__swsetup_r+0x66>
 800647c:	4630      	mov	r0, r6
 800647e:	f000 fa5b 	bl	8006938 <_free_r>
 8006482:	2300      	movs	r3, #0
 8006484:	6363      	str	r3, [r4, #52]	; 0x34
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800648c:	81a3      	strh	r3, [r4, #12]
 800648e:	2300      	movs	r3, #0
 8006490:	6063      	str	r3, [r4, #4]
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	89a3      	ldrh	r3, [r4, #12]
 8006498:	f043 0308 	orr.w	r3, r3, #8
 800649c:	81a3      	strh	r3, [r4, #12]
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	b94b      	cbnz	r3, 80064b6 <__swsetup_r+0x9a>
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ac:	d003      	beq.n	80064b6 <__swsetup_r+0x9a>
 80064ae:	4621      	mov	r1, r4
 80064b0:	4630      	mov	r0, r6
 80064b2:	f000 fa01 	bl	80068b8 <__smakebuf_r>
 80064b6:	89a0      	ldrh	r0, [r4, #12]
 80064b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064bc:	f010 0301 	ands.w	r3, r0, #1
 80064c0:	d00a      	beq.n	80064d8 <__swsetup_r+0xbc>
 80064c2:	2300      	movs	r3, #0
 80064c4:	60a3      	str	r3, [r4, #8]
 80064c6:	6963      	ldr	r3, [r4, #20]
 80064c8:	425b      	negs	r3, r3
 80064ca:	61a3      	str	r3, [r4, #24]
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	b943      	cbnz	r3, 80064e2 <__swsetup_r+0xc6>
 80064d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064d4:	d1ba      	bne.n	800644c <__swsetup_r+0x30>
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	0781      	lsls	r1, r0, #30
 80064da:	bf58      	it	pl
 80064dc:	6963      	ldrpl	r3, [r4, #20]
 80064de:	60a3      	str	r3, [r4, #8]
 80064e0:	e7f4      	b.n	80064cc <__swsetup_r+0xb0>
 80064e2:	2000      	movs	r0, #0
 80064e4:	e7f7      	b.n	80064d6 <__swsetup_r+0xba>
 80064e6:	bf00      	nop
 80064e8:	20000010 	.word	0x20000010
 80064ec:	08007880 	.word	0x08007880
 80064f0:	080078a0 	.word	0x080078a0
 80064f4:	08007860 	.word	0x08007860

080064f8 <__sflush_r>:
 80064f8:	898a      	ldrh	r2, [r1, #12]
 80064fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064fe:	4605      	mov	r5, r0
 8006500:	0710      	lsls	r0, r2, #28
 8006502:	460c      	mov	r4, r1
 8006504:	d458      	bmi.n	80065b8 <__sflush_r+0xc0>
 8006506:	684b      	ldr	r3, [r1, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	dc05      	bgt.n	8006518 <__sflush_r+0x20>
 800650c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	dc02      	bgt.n	8006518 <__sflush_r+0x20>
 8006512:	2000      	movs	r0, #0
 8006514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800651a:	2e00      	cmp	r6, #0
 800651c:	d0f9      	beq.n	8006512 <__sflush_r+0x1a>
 800651e:	2300      	movs	r3, #0
 8006520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006524:	682f      	ldr	r7, [r5, #0]
 8006526:	602b      	str	r3, [r5, #0]
 8006528:	d032      	beq.n	8006590 <__sflush_r+0x98>
 800652a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	075a      	lsls	r2, r3, #29
 8006530:	d505      	bpl.n	800653e <__sflush_r+0x46>
 8006532:	6863      	ldr	r3, [r4, #4]
 8006534:	1ac0      	subs	r0, r0, r3
 8006536:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006538:	b10b      	cbz	r3, 800653e <__sflush_r+0x46>
 800653a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800653c:	1ac0      	subs	r0, r0, r3
 800653e:	2300      	movs	r3, #0
 8006540:	4602      	mov	r2, r0
 8006542:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006544:	6a21      	ldr	r1, [r4, #32]
 8006546:	4628      	mov	r0, r5
 8006548:	47b0      	blx	r6
 800654a:	1c43      	adds	r3, r0, #1
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	d106      	bne.n	800655e <__sflush_r+0x66>
 8006550:	6829      	ldr	r1, [r5, #0]
 8006552:	291d      	cmp	r1, #29
 8006554:	d82c      	bhi.n	80065b0 <__sflush_r+0xb8>
 8006556:	4a2a      	ldr	r2, [pc, #168]	; (8006600 <__sflush_r+0x108>)
 8006558:	40ca      	lsrs	r2, r1
 800655a:	07d6      	lsls	r6, r2, #31
 800655c:	d528      	bpl.n	80065b0 <__sflush_r+0xb8>
 800655e:	2200      	movs	r2, #0
 8006560:	6062      	str	r2, [r4, #4]
 8006562:	04d9      	lsls	r1, r3, #19
 8006564:	6922      	ldr	r2, [r4, #16]
 8006566:	6022      	str	r2, [r4, #0]
 8006568:	d504      	bpl.n	8006574 <__sflush_r+0x7c>
 800656a:	1c42      	adds	r2, r0, #1
 800656c:	d101      	bne.n	8006572 <__sflush_r+0x7a>
 800656e:	682b      	ldr	r3, [r5, #0]
 8006570:	b903      	cbnz	r3, 8006574 <__sflush_r+0x7c>
 8006572:	6560      	str	r0, [r4, #84]	; 0x54
 8006574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006576:	602f      	str	r7, [r5, #0]
 8006578:	2900      	cmp	r1, #0
 800657a:	d0ca      	beq.n	8006512 <__sflush_r+0x1a>
 800657c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006580:	4299      	cmp	r1, r3
 8006582:	d002      	beq.n	800658a <__sflush_r+0x92>
 8006584:	4628      	mov	r0, r5
 8006586:	f000 f9d7 	bl	8006938 <_free_r>
 800658a:	2000      	movs	r0, #0
 800658c:	6360      	str	r0, [r4, #52]	; 0x34
 800658e:	e7c1      	b.n	8006514 <__sflush_r+0x1c>
 8006590:	6a21      	ldr	r1, [r4, #32]
 8006592:	2301      	movs	r3, #1
 8006594:	4628      	mov	r0, r5
 8006596:	47b0      	blx	r6
 8006598:	1c41      	adds	r1, r0, #1
 800659a:	d1c7      	bne.n	800652c <__sflush_r+0x34>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0c4      	beq.n	800652c <__sflush_r+0x34>
 80065a2:	2b1d      	cmp	r3, #29
 80065a4:	d001      	beq.n	80065aa <__sflush_r+0xb2>
 80065a6:	2b16      	cmp	r3, #22
 80065a8:	d101      	bne.n	80065ae <__sflush_r+0xb6>
 80065aa:	602f      	str	r7, [r5, #0]
 80065ac:	e7b1      	b.n	8006512 <__sflush_r+0x1a>
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b4:	81a3      	strh	r3, [r4, #12]
 80065b6:	e7ad      	b.n	8006514 <__sflush_r+0x1c>
 80065b8:	690f      	ldr	r7, [r1, #16]
 80065ba:	2f00      	cmp	r7, #0
 80065bc:	d0a9      	beq.n	8006512 <__sflush_r+0x1a>
 80065be:	0793      	lsls	r3, r2, #30
 80065c0:	680e      	ldr	r6, [r1, #0]
 80065c2:	bf08      	it	eq
 80065c4:	694b      	ldreq	r3, [r1, #20]
 80065c6:	600f      	str	r7, [r1, #0]
 80065c8:	bf18      	it	ne
 80065ca:	2300      	movne	r3, #0
 80065cc:	eba6 0807 	sub.w	r8, r6, r7
 80065d0:	608b      	str	r3, [r1, #8]
 80065d2:	f1b8 0f00 	cmp.w	r8, #0
 80065d6:	dd9c      	ble.n	8006512 <__sflush_r+0x1a>
 80065d8:	6a21      	ldr	r1, [r4, #32]
 80065da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065dc:	4643      	mov	r3, r8
 80065de:	463a      	mov	r2, r7
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b0      	blx	r6
 80065e4:	2800      	cmp	r0, #0
 80065e6:	dc06      	bgt.n	80065f6 <__sflush_r+0xfe>
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065ee:	81a3      	strh	r3, [r4, #12]
 80065f0:	f04f 30ff 	mov.w	r0, #4294967295
 80065f4:	e78e      	b.n	8006514 <__sflush_r+0x1c>
 80065f6:	4407      	add	r7, r0
 80065f8:	eba8 0800 	sub.w	r8, r8, r0
 80065fc:	e7e9      	b.n	80065d2 <__sflush_r+0xda>
 80065fe:	bf00      	nop
 8006600:	20400001 	.word	0x20400001

08006604 <_fflush_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	690b      	ldr	r3, [r1, #16]
 8006608:	4605      	mov	r5, r0
 800660a:	460c      	mov	r4, r1
 800660c:	b913      	cbnz	r3, 8006614 <_fflush_r+0x10>
 800660e:	2500      	movs	r5, #0
 8006610:	4628      	mov	r0, r5
 8006612:	bd38      	pop	{r3, r4, r5, pc}
 8006614:	b118      	cbz	r0, 800661e <_fflush_r+0x1a>
 8006616:	6983      	ldr	r3, [r0, #24]
 8006618:	b90b      	cbnz	r3, 800661e <_fflush_r+0x1a>
 800661a:	f000 f887 	bl	800672c <__sinit>
 800661e:	4b14      	ldr	r3, [pc, #80]	; (8006670 <_fflush_r+0x6c>)
 8006620:	429c      	cmp	r4, r3
 8006622:	d11b      	bne.n	800665c <_fflush_r+0x58>
 8006624:	686c      	ldr	r4, [r5, #4]
 8006626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0ef      	beq.n	800660e <_fflush_r+0xa>
 800662e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006630:	07d0      	lsls	r0, r2, #31
 8006632:	d404      	bmi.n	800663e <_fflush_r+0x3a>
 8006634:	0599      	lsls	r1, r3, #22
 8006636:	d402      	bmi.n	800663e <_fflush_r+0x3a>
 8006638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800663a:	f000 f915 	bl	8006868 <__retarget_lock_acquire_recursive>
 800663e:	4628      	mov	r0, r5
 8006640:	4621      	mov	r1, r4
 8006642:	f7ff ff59 	bl	80064f8 <__sflush_r>
 8006646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006648:	07da      	lsls	r2, r3, #31
 800664a:	4605      	mov	r5, r0
 800664c:	d4e0      	bmi.n	8006610 <_fflush_r+0xc>
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	059b      	lsls	r3, r3, #22
 8006652:	d4dd      	bmi.n	8006610 <_fflush_r+0xc>
 8006654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006656:	f000 f908 	bl	800686a <__retarget_lock_release_recursive>
 800665a:	e7d9      	b.n	8006610 <_fflush_r+0xc>
 800665c:	4b05      	ldr	r3, [pc, #20]	; (8006674 <_fflush_r+0x70>)
 800665e:	429c      	cmp	r4, r3
 8006660:	d101      	bne.n	8006666 <_fflush_r+0x62>
 8006662:	68ac      	ldr	r4, [r5, #8]
 8006664:	e7df      	b.n	8006626 <_fflush_r+0x22>
 8006666:	4b04      	ldr	r3, [pc, #16]	; (8006678 <_fflush_r+0x74>)
 8006668:	429c      	cmp	r4, r3
 800666a:	bf08      	it	eq
 800666c:	68ec      	ldreq	r4, [r5, #12]
 800666e:	e7da      	b.n	8006626 <_fflush_r+0x22>
 8006670:	08007880 	.word	0x08007880
 8006674:	080078a0 	.word	0x080078a0
 8006678:	08007860 	.word	0x08007860

0800667c <std>:
 800667c:	2300      	movs	r3, #0
 800667e:	b510      	push	{r4, lr}
 8006680:	4604      	mov	r4, r0
 8006682:	e9c0 3300 	strd	r3, r3, [r0]
 8006686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800668a:	6083      	str	r3, [r0, #8]
 800668c:	8181      	strh	r1, [r0, #12]
 800668e:	6643      	str	r3, [r0, #100]	; 0x64
 8006690:	81c2      	strh	r2, [r0, #14]
 8006692:	6183      	str	r3, [r0, #24]
 8006694:	4619      	mov	r1, r3
 8006696:	2208      	movs	r2, #8
 8006698:	305c      	adds	r0, #92	; 0x5c
 800669a:	f7ff fdb7 	bl	800620c <memset>
 800669e:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <std+0x38>)
 80066a0:	6263      	str	r3, [r4, #36]	; 0x24
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <std+0x3c>)
 80066a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80066a6:	4b05      	ldr	r3, [pc, #20]	; (80066bc <std+0x40>)
 80066a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066aa:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <std+0x44>)
 80066ac:	6224      	str	r4, [r4, #32]
 80066ae:	6323      	str	r3, [r4, #48]	; 0x30
 80066b0:	bd10      	pop	{r4, pc}
 80066b2:	bf00      	nop
 80066b4:	080073ad 	.word	0x080073ad
 80066b8:	080073cf 	.word	0x080073cf
 80066bc:	08007407 	.word	0x08007407
 80066c0:	0800742b 	.word	0x0800742b

080066c4 <_cleanup_r>:
 80066c4:	4901      	ldr	r1, [pc, #4]	; (80066cc <_cleanup_r+0x8>)
 80066c6:	f000 b8af 	b.w	8006828 <_fwalk_reent>
 80066ca:	bf00      	nop
 80066cc:	08006605 	.word	0x08006605

080066d0 <__sfmoreglue>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	2268      	movs	r2, #104	; 0x68
 80066d4:	1e4d      	subs	r5, r1, #1
 80066d6:	4355      	muls	r5, r2
 80066d8:	460e      	mov	r6, r1
 80066da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066de:	f000 f997 	bl	8006a10 <_malloc_r>
 80066e2:	4604      	mov	r4, r0
 80066e4:	b140      	cbz	r0, 80066f8 <__sfmoreglue+0x28>
 80066e6:	2100      	movs	r1, #0
 80066e8:	e9c0 1600 	strd	r1, r6, [r0]
 80066ec:	300c      	adds	r0, #12
 80066ee:	60a0      	str	r0, [r4, #8]
 80066f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066f4:	f7ff fd8a 	bl	800620c <memset>
 80066f8:	4620      	mov	r0, r4
 80066fa:	bd70      	pop	{r4, r5, r6, pc}

080066fc <__sfp_lock_acquire>:
 80066fc:	4801      	ldr	r0, [pc, #4]	; (8006704 <__sfp_lock_acquire+0x8>)
 80066fe:	f000 b8b3 	b.w	8006868 <__retarget_lock_acquire_recursive>
 8006702:	bf00      	nop
 8006704:	200002e1 	.word	0x200002e1

08006708 <__sfp_lock_release>:
 8006708:	4801      	ldr	r0, [pc, #4]	; (8006710 <__sfp_lock_release+0x8>)
 800670a:	f000 b8ae 	b.w	800686a <__retarget_lock_release_recursive>
 800670e:	bf00      	nop
 8006710:	200002e1 	.word	0x200002e1

08006714 <__sinit_lock_acquire>:
 8006714:	4801      	ldr	r0, [pc, #4]	; (800671c <__sinit_lock_acquire+0x8>)
 8006716:	f000 b8a7 	b.w	8006868 <__retarget_lock_acquire_recursive>
 800671a:	bf00      	nop
 800671c:	200002e2 	.word	0x200002e2

08006720 <__sinit_lock_release>:
 8006720:	4801      	ldr	r0, [pc, #4]	; (8006728 <__sinit_lock_release+0x8>)
 8006722:	f000 b8a2 	b.w	800686a <__retarget_lock_release_recursive>
 8006726:	bf00      	nop
 8006728:	200002e2 	.word	0x200002e2

0800672c <__sinit>:
 800672c:	b510      	push	{r4, lr}
 800672e:	4604      	mov	r4, r0
 8006730:	f7ff fff0 	bl	8006714 <__sinit_lock_acquire>
 8006734:	69a3      	ldr	r3, [r4, #24]
 8006736:	b11b      	cbz	r3, 8006740 <__sinit+0x14>
 8006738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800673c:	f7ff bff0 	b.w	8006720 <__sinit_lock_release>
 8006740:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006744:	6523      	str	r3, [r4, #80]	; 0x50
 8006746:	4b13      	ldr	r3, [pc, #76]	; (8006794 <__sinit+0x68>)
 8006748:	4a13      	ldr	r2, [pc, #76]	; (8006798 <__sinit+0x6c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	62a2      	str	r2, [r4, #40]	; 0x28
 800674e:	42a3      	cmp	r3, r4
 8006750:	bf04      	itt	eq
 8006752:	2301      	moveq	r3, #1
 8006754:	61a3      	streq	r3, [r4, #24]
 8006756:	4620      	mov	r0, r4
 8006758:	f000 f820 	bl	800679c <__sfp>
 800675c:	6060      	str	r0, [r4, #4]
 800675e:	4620      	mov	r0, r4
 8006760:	f000 f81c 	bl	800679c <__sfp>
 8006764:	60a0      	str	r0, [r4, #8]
 8006766:	4620      	mov	r0, r4
 8006768:	f000 f818 	bl	800679c <__sfp>
 800676c:	2200      	movs	r2, #0
 800676e:	60e0      	str	r0, [r4, #12]
 8006770:	2104      	movs	r1, #4
 8006772:	6860      	ldr	r0, [r4, #4]
 8006774:	f7ff ff82 	bl	800667c <std>
 8006778:	68a0      	ldr	r0, [r4, #8]
 800677a:	2201      	movs	r2, #1
 800677c:	2109      	movs	r1, #9
 800677e:	f7ff ff7d 	bl	800667c <std>
 8006782:	68e0      	ldr	r0, [r4, #12]
 8006784:	2202      	movs	r2, #2
 8006786:	2112      	movs	r1, #18
 8006788:	f7ff ff78 	bl	800667c <std>
 800678c:	2301      	movs	r3, #1
 800678e:	61a3      	str	r3, [r4, #24]
 8006790:	e7d2      	b.n	8006738 <__sinit+0xc>
 8006792:	bf00      	nop
 8006794:	0800785c 	.word	0x0800785c
 8006798:	080066c5 	.word	0x080066c5

0800679c <__sfp>:
 800679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679e:	4607      	mov	r7, r0
 80067a0:	f7ff ffac 	bl	80066fc <__sfp_lock_acquire>
 80067a4:	4b1e      	ldr	r3, [pc, #120]	; (8006820 <__sfp+0x84>)
 80067a6:	681e      	ldr	r6, [r3, #0]
 80067a8:	69b3      	ldr	r3, [r6, #24]
 80067aa:	b913      	cbnz	r3, 80067b2 <__sfp+0x16>
 80067ac:	4630      	mov	r0, r6
 80067ae:	f7ff ffbd 	bl	800672c <__sinit>
 80067b2:	3648      	adds	r6, #72	; 0x48
 80067b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067b8:	3b01      	subs	r3, #1
 80067ba:	d503      	bpl.n	80067c4 <__sfp+0x28>
 80067bc:	6833      	ldr	r3, [r6, #0]
 80067be:	b30b      	cbz	r3, 8006804 <__sfp+0x68>
 80067c0:	6836      	ldr	r6, [r6, #0]
 80067c2:	e7f7      	b.n	80067b4 <__sfp+0x18>
 80067c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067c8:	b9d5      	cbnz	r5, 8006800 <__sfp+0x64>
 80067ca:	4b16      	ldr	r3, [pc, #88]	; (8006824 <__sfp+0x88>)
 80067cc:	60e3      	str	r3, [r4, #12]
 80067ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067d2:	6665      	str	r5, [r4, #100]	; 0x64
 80067d4:	f000 f847 	bl	8006866 <__retarget_lock_init_recursive>
 80067d8:	f7ff ff96 	bl	8006708 <__sfp_lock_release>
 80067dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067e4:	6025      	str	r5, [r4, #0]
 80067e6:	61a5      	str	r5, [r4, #24]
 80067e8:	2208      	movs	r2, #8
 80067ea:	4629      	mov	r1, r5
 80067ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067f0:	f7ff fd0c 	bl	800620c <memset>
 80067f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067fc:	4620      	mov	r0, r4
 80067fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006800:	3468      	adds	r4, #104	; 0x68
 8006802:	e7d9      	b.n	80067b8 <__sfp+0x1c>
 8006804:	2104      	movs	r1, #4
 8006806:	4638      	mov	r0, r7
 8006808:	f7ff ff62 	bl	80066d0 <__sfmoreglue>
 800680c:	4604      	mov	r4, r0
 800680e:	6030      	str	r0, [r6, #0]
 8006810:	2800      	cmp	r0, #0
 8006812:	d1d5      	bne.n	80067c0 <__sfp+0x24>
 8006814:	f7ff ff78 	bl	8006708 <__sfp_lock_release>
 8006818:	230c      	movs	r3, #12
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	e7ee      	b.n	80067fc <__sfp+0x60>
 800681e:	bf00      	nop
 8006820:	0800785c 	.word	0x0800785c
 8006824:	ffff0001 	.word	0xffff0001

08006828 <_fwalk_reent>:
 8006828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800682c:	4606      	mov	r6, r0
 800682e:	4688      	mov	r8, r1
 8006830:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006834:	2700      	movs	r7, #0
 8006836:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800683a:	f1b9 0901 	subs.w	r9, r9, #1
 800683e:	d505      	bpl.n	800684c <_fwalk_reent+0x24>
 8006840:	6824      	ldr	r4, [r4, #0]
 8006842:	2c00      	cmp	r4, #0
 8006844:	d1f7      	bne.n	8006836 <_fwalk_reent+0xe>
 8006846:	4638      	mov	r0, r7
 8006848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800684c:	89ab      	ldrh	r3, [r5, #12]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d907      	bls.n	8006862 <_fwalk_reent+0x3a>
 8006852:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006856:	3301      	adds	r3, #1
 8006858:	d003      	beq.n	8006862 <_fwalk_reent+0x3a>
 800685a:	4629      	mov	r1, r5
 800685c:	4630      	mov	r0, r6
 800685e:	47c0      	blx	r8
 8006860:	4307      	orrs	r7, r0
 8006862:	3568      	adds	r5, #104	; 0x68
 8006864:	e7e9      	b.n	800683a <_fwalk_reent+0x12>

08006866 <__retarget_lock_init_recursive>:
 8006866:	4770      	bx	lr

08006868 <__retarget_lock_acquire_recursive>:
 8006868:	4770      	bx	lr

0800686a <__retarget_lock_release_recursive>:
 800686a:	4770      	bx	lr

0800686c <__swhatbuf_r>:
 800686c:	b570      	push	{r4, r5, r6, lr}
 800686e:	460e      	mov	r6, r1
 8006870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006874:	2900      	cmp	r1, #0
 8006876:	b096      	sub	sp, #88	; 0x58
 8006878:	4614      	mov	r4, r2
 800687a:	461d      	mov	r5, r3
 800687c:	da08      	bge.n	8006890 <__swhatbuf_r+0x24>
 800687e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	602a      	str	r2, [r5, #0]
 8006886:	061a      	lsls	r2, r3, #24
 8006888:	d410      	bmi.n	80068ac <__swhatbuf_r+0x40>
 800688a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800688e:	e00e      	b.n	80068ae <__swhatbuf_r+0x42>
 8006890:	466a      	mov	r2, sp
 8006892:	f000 fdf1 	bl	8007478 <_fstat_r>
 8006896:	2800      	cmp	r0, #0
 8006898:	dbf1      	blt.n	800687e <__swhatbuf_r+0x12>
 800689a:	9a01      	ldr	r2, [sp, #4]
 800689c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068a4:	425a      	negs	r2, r3
 80068a6:	415a      	adcs	r2, r3
 80068a8:	602a      	str	r2, [r5, #0]
 80068aa:	e7ee      	b.n	800688a <__swhatbuf_r+0x1e>
 80068ac:	2340      	movs	r3, #64	; 0x40
 80068ae:	2000      	movs	r0, #0
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	b016      	add	sp, #88	; 0x58
 80068b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080068b8 <__smakebuf_r>:
 80068b8:	898b      	ldrh	r3, [r1, #12]
 80068ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068bc:	079d      	lsls	r5, r3, #30
 80068be:	4606      	mov	r6, r0
 80068c0:	460c      	mov	r4, r1
 80068c2:	d507      	bpl.n	80068d4 <__smakebuf_r+0x1c>
 80068c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	6123      	str	r3, [r4, #16]
 80068cc:	2301      	movs	r3, #1
 80068ce:	6163      	str	r3, [r4, #20]
 80068d0:	b002      	add	sp, #8
 80068d2:	bd70      	pop	{r4, r5, r6, pc}
 80068d4:	ab01      	add	r3, sp, #4
 80068d6:	466a      	mov	r2, sp
 80068d8:	f7ff ffc8 	bl	800686c <__swhatbuf_r>
 80068dc:	9900      	ldr	r1, [sp, #0]
 80068de:	4605      	mov	r5, r0
 80068e0:	4630      	mov	r0, r6
 80068e2:	f000 f895 	bl	8006a10 <_malloc_r>
 80068e6:	b948      	cbnz	r0, 80068fc <__smakebuf_r+0x44>
 80068e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ec:	059a      	lsls	r2, r3, #22
 80068ee:	d4ef      	bmi.n	80068d0 <__smakebuf_r+0x18>
 80068f0:	f023 0303 	bic.w	r3, r3, #3
 80068f4:	f043 0302 	orr.w	r3, r3, #2
 80068f8:	81a3      	strh	r3, [r4, #12]
 80068fa:	e7e3      	b.n	80068c4 <__smakebuf_r+0xc>
 80068fc:	4b0d      	ldr	r3, [pc, #52]	; (8006934 <__smakebuf_r+0x7c>)
 80068fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	6020      	str	r0, [r4, #0]
 8006904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006908:	81a3      	strh	r3, [r4, #12]
 800690a:	9b00      	ldr	r3, [sp, #0]
 800690c:	6163      	str	r3, [r4, #20]
 800690e:	9b01      	ldr	r3, [sp, #4]
 8006910:	6120      	str	r0, [r4, #16]
 8006912:	b15b      	cbz	r3, 800692c <__smakebuf_r+0x74>
 8006914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006918:	4630      	mov	r0, r6
 800691a:	f000 fdbf 	bl	800749c <_isatty_r>
 800691e:	b128      	cbz	r0, 800692c <__smakebuf_r+0x74>
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	f023 0303 	bic.w	r3, r3, #3
 8006926:	f043 0301 	orr.w	r3, r3, #1
 800692a:	81a3      	strh	r3, [r4, #12]
 800692c:	89a0      	ldrh	r0, [r4, #12]
 800692e:	4305      	orrs	r5, r0
 8006930:	81a5      	strh	r5, [r4, #12]
 8006932:	e7cd      	b.n	80068d0 <__smakebuf_r+0x18>
 8006934:	080066c5 	.word	0x080066c5

08006938 <_free_r>:
 8006938:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800693a:	2900      	cmp	r1, #0
 800693c:	d044      	beq.n	80069c8 <_free_r+0x90>
 800693e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006942:	9001      	str	r0, [sp, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f1a1 0404 	sub.w	r4, r1, #4
 800694a:	bfb8      	it	lt
 800694c:	18e4      	addlt	r4, r4, r3
 800694e:	f000 fde1 	bl	8007514 <__malloc_lock>
 8006952:	4a1e      	ldr	r2, [pc, #120]	; (80069cc <_free_r+0x94>)
 8006954:	9801      	ldr	r0, [sp, #4]
 8006956:	6813      	ldr	r3, [r2, #0]
 8006958:	b933      	cbnz	r3, 8006968 <_free_r+0x30>
 800695a:	6063      	str	r3, [r4, #4]
 800695c:	6014      	str	r4, [r2, #0]
 800695e:	b003      	add	sp, #12
 8006960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006964:	f000 bddc 	b.w	8007520 <__malloc_unlock>
 8006968:	42a3      	cmp	r3, r4
 800696a:	d908      	bls.n	800697e <_free_r+0x46>
 800696c:	6825      	ldr	r5, [r4, #0]
 800696e:	1961      	adds	r1, r4, r5
 8006970:	428b      	cmp	r3, r1
 8006972:	bf01      	itttt	eq
 8006974:	6819      	ldreq	r1, [r3, #0]
 8006976:	685b      	ldreq	r3, [r3, #4]
 8006978:	1949      	addeq	r1, r1, r5
 800697a:	6021      	streq	r1, [r4, #0]
 800697c:	e7ed      	b.n	800695a <_free_r+0x22>
 800697e:	461a      	mov	r2, r3
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	b10b      	cbz	r3, 8006988 <_free_r+0x50>
 8006984:	42a3      	cmp	r3, r4
 8006986:	d9fa      	bls.n	800697e <_free_r+0x46>
 8006988:	6811      	ldr	r1, [r2, #0]
 800698a:	1855      	adds	r5, r2, r1
 800698c:	42a5      	cmp	r5, r4
 800698e:	d10b      	bne.n	80069a8 <_free_r+0x70>
 8006990:	6824      	ldr	r4, [r4, #0]
 8006992:	4421      	add	r1, r4
 8006994:	1854      	adds	r4, r2, r1
 8006996:	42a3      	cmp	r3, r4
 8006998:	6011      	str	r1, [r2, #0]
 800699a:	d1e0      	bne.n	800695e <_free_r+0x26>
 800699c:	681c      	ldr	r4, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	6053      	str	r3, [r2, #4]
 80069a2:	4421      	add	r1, r4
 80069a4:	6011      	str	r1, [r2, #0]
 80069a6:	e7da      	b.n	800695e <_free_r+0x26>
 80069a8:	d902      	bls.n	80069b0 <_free_r+0x78>
 80069aa:	230c      	movs	r3, #12
 80069ac:	6003      	str	r3, [r0, #0]
 80069ae:	e7d6      	b.n	800695e <_free_r+0x26>
 80069b0:	6825      	ldr	r5, [r4, #0]
 80069b2:	1961      	adds	r1, r4, r5
 80069b4:	428b      	cmp	r3, r1
 80069b6:	bf04      	itt	eq
 80069b8:	6819      	ldreq	r1, [r3, #0]
 80069ba:	685b      	ldreq	r3, [r3, #4]
 80069bc:	6063      	str	r3, [r4, #4]
 80069be:	bf04      	itt	eq
 80069c0:	1949      	addeq	r1, r1, r5
 80069c2:	6021      	streq	r1, [r4, #0]
 80069c4:	6054      	str	r4, [r2, #4]
 80069c6:	e7ca      	b.n	800695e <_free_r+0x26>
 80069c8:	b003      	add	sp, #12
 80069ca:	bd30      	pop	{r4, r5, pc}
 80069cc:	200002e4 	.word	0x200002e4

080069d0 <sbrk_aligned>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	4e0e      	ldr	r6, [pc, #56]	; (8006a0c <sbrk_aligned+0x3c>)
 80069d4:	460c      	mov	r4, r1
 80069d6:	6831      	ldr	r1, [r6, #0]
 80069d8:	4605      	mov	r5, r0
 80069da:	b911      	cbnz	r1, 80069e2 <sbrk_aligned+0x12>
 80069dc:	f000 fcd6 	bl	800738c <_sbrk_r>
 80069e0:	6030      	str	r0, [r6, #0]
 80069e2:	4621      	mov	r1, r4
 80069e4:	4628      	mov	r0, r5
 80069e6:	f000 fcd1 	bl	800738c <_sbrk_r>
 80069ea:	1c43      	adds	r3, r0, #1
 80069ec:	d00a      	beq.n	8006a04 <sbrk_aligned+0x34>
 80069ee:	1cc4      	adds	r4, r0, #3
 80069f0:	f024 0403 	bic.w	r4, r4, #3
 80069f4:	42a0      	cmp	r0, r4
 80069f6:	d007      	beq.n	8006a08 <sbrk_aligned+0x38>
 80069f8:	1a21      	subs	r1, r4, r0
 80069fa:	4628      	mov	r0, r5
 80069fc:	f000 fcc6 	bl	800738c <_sbrk_r>
 8006a00:	3001      	adds	r0, #1
 8006a02:	d101      	bne.n	8006a08 <sbrk_aligned+0x38>
 8006a04:	f04f 34ff 	mov.w	r4, #4294967295
 8006a08:	4620      	mov	r0, r4
 8006a0a:	bd70      	pop	{r4, r5, r6, pc}
 8006a0c:	200002e8 	.word	0x200002e8

08006a10 <_malloc_r>:
 8006a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a14:	1ccd      	adds	r5, r1, #3
 8006a16:	f025 0503 	bic.w	r5, r5, #3
 8006a1a:	3508      	adds	r5, #8
 8006a1c:	2d0c      	cmp	r5, #12
 8006a1e:	bf38      	it	cc
 8006a20:	250c      	movcc	r5, #12
 8006a22:	2d00      	cmp	r5, #0
 8006a24:	4607      	mov	r7, r0
 8006a26:	db01      	blt.n	8006a2c <_malloc_r+0x1c>
 8006a28:	42a9      	cmp	r1, r5
 8006a2a:	d905      	bls.n	8006a38 <_malloc_r+0x28>
 8006a2c:	230c      	movs	r3, #12
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	2600      	movs	r6, #0
 8006a32:	4630      	mov	r0, r6
 8006a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a38:	4e2e      	ldr	r6, [pc, #184]	; (8006af4 <_malloc_r+0xe4>)
 8006a3a:	f000 fd6b 	bl	8007514 <__malloc_lock>
 8006a3e:	6833      	ldr	r3, [r6, #0]
 8006a40:	461c      	mov	r4, r3
 8006a42:	bb34      	cbnz	r4, 8006a92 <_malloc_r+0x82>
 8006a44:	4629      	mov	r1, r5
 8006a46:	4638      	mov	r0, r7
 8006a48:	f7ff ffc2 	bl	80069d0 <sbrk_aligned>
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	4604      	mov	r4, r0
 8006a50:	d14d      	bne.n	8006aee <_malloc_r+0xde>
 8006a52:	6834      	ldr	r4, [r6, #0]
 8006a54:	4626      	mov	r6, r4
 8006a56:	2e00      	cmp	r6, #0
 8006a58:	d140      	bne.n	8006adc <_malloc_r+0xcc>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4638      	mov	r0, r7
 8006a60:	eb04 0803 	add.w	r8, r4, r3
 8006a64:	f000 fc92 	bl	800738c <_sbrk_r>
 8006a68:	4580      	cmp	r8, r0
 8006a6a:	d13a      	bne.n	8006ae2 <_malloc_r+0xd2>
 8006a6c:	6821      	ldr	r1, [r4, #0]
 8006a6e:	3503      	adds	r5, #3
 8006a70:	1a6d      	subs	r5, r5, r1
 8006a72:	f025 0503 	bic.w	r5, r5, #3
 8006a76:	3508      	adds	r5, #8
 8006a78:	2d0c      	cmp	r5, #12
 8006a7a:	bf38      	it	cc
 8006a7c:	250c      	movcc	r5, #12
 8006a7e:	4629      	mov	r1, r5
 8006a80:	4638      	mov	r0, r7
 8006a82:	f7ff ffa5 	bl	80069d0 <sbrk_aligned>
 8006a86:	3001      	adds	r0, #1
 8006a88:	d02b      	beq.n	8006ae2 <_malloc_r+0xd2>
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	442b      	add	r3, r5
 8006a8e:	6023      	str	r3, [r4, #0]
 8006a90:	e00e      	b.n	8006ab0 <_malloc_r+0xa0>
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	1b52      	subs	r2, r2, r5
 8006a96:	d41e      	bmi.n	8006ad6 <_malloc_r+0xc6>
 8006a98:	2a0b      	cmp	r2, #11
 8006a9a:	d916      	bls.n	8006aca <_malloc_r+0xba>
 8006a9c:	1961      	adds	r1, r4, r5
 8006a9e:	42a3      	cmp	r3, r4
 8006aa0:	6025      	str	r5, [r4, #0]
 8006aa2:	bf18      	it	ne
 8006aa4:	6059      	strne	r1, [r3, #4]
 8006aa6:	6863      	ldr	r3, [r4, #4]
 8006aa8:	bf08      	it	eq
 8006aaa:	6031      	streq	r1, [r6, #0]
 8006aac:	5162      	str	r2, [r4, r5]
 8006aae:	604b      	str	r3, [r1, #4]
 8006ab0:	4638      	mov	r0, r7
 8006ab2:	f104 060b 	add.w	r6, r4, #11
 8006ab6:	f000 fd33 	bl	8007520 <__malloc_unlock>
 8006aba:	f026 0607 	bic.w	r6, r6, #7
 8006abe:	1d23      	adds	r3, r4, #4
 8006ac0:	1af2      	subs	r2, r6, r3
 8006ac2:	d0b6      	beq.n	8006a32 <_malloc_r+0x22>
 8006ac4:	1b9b      	subs	r3, r3, r6
 8006ac6:	50a3      	str	r3, [r4, r2]
 8006ac8:	e7b3      	b.n	8006a32 <_malloc_r+0x22>
 8006aca:	6862      	ldr	r2, [r4, #4]
 8006acc:	42a3      	cmp	r3, r4
 8006ace:	bf0c      	ite	eq
 8006ad0:	6032      	streq	r2, [r6, #0]
 8006ad2:	605a      	strne	r2, [r3, #4]
 8006ad4:	e7ec      	b.n	8006ab0 <_malloc_r+0xa0>
 8006ad6:	4623      	mov	r3, r4
 8006ad8:	6864      	ldr	r4, [r4, #4]
 8006ada:	e7b2      	b.n	8006a42 <_malloc_r+0x32>
 8006adc:	4634      	mov	r4, r6
 8006ade:	6876      	ldr	r6, [r6, #4]
 8006ae0:	e7b9      	b.n	8006a56 <_malloc_r+0x46>
 8006ae2:	230c      	movs	r3, #12
 8006ae4:	603b      	str	r3, [r7, #0]
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	f000 fd1a 	bl	8007520 <__malloc_unlock>
 8006aec:	e7a1      	b.n	8006a32 <_malloc_r+0x22>
 8006aee:	6025      	str	r5, [r4, #0]
 8006af0:	e7de      	b.n	8006ab0 <_malloc_r+0xa0>
 8006af2:	bf00      	nop
 8006af4:	200002e4 	.word	0x200002e4

08006af8 <__ssputs_r>:
 8006af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006afc:	688e      	ldr	r6, [r1, #8]
 8006afe:	429e      	cmp	r6, r3
 8006b00:	4682      	mov	sl, r0
 8006b02:	460c      	mov	r4, r1
 8006b04:	4690      	mov	r8, r2
 8006b06:	461f      	mov	r7, r3
 8006b08:	d838      	bhi.n	8006b7c <__ssputs_r+0x84>
 8006b0a:	898a      	ldrh	r2, [r1, #12]
 8006b0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b10:	d032      	beq.n	8006b78 <__ssputs_r+0x80>
 8006b12:	6825      	ldr	r5, [r4, #0]
 8006b14:	6909      	ldr	r1, [r1, #16]
 8006b16:	eba5 0901 	sub.w	r9, r5, r1
 8006b1a:	6965      	ldr	r5, [r4, #20]
 8006b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b24:	3301      	adds	r3, #1
 8006b26:	444b      	add	r3, r9
 8006b28:	106d      	asrs	r5, r5, #1
 8006b2a:	429d      	cmp	r5, r3
 8006b2c:	bf38      	it	cc
 8006b2e:	461d      	movcc	r5, r3
 8006b30:	0553      	lsls	r3, r2, #21
 8006b32:	d531      	bpl.n	8006b98 <__ssputs_r+0xa0>
 8006b34:	4629      	mov	r1, r5
 8006b36:	f7ff ff6b 	bl	8006a10 <_malloc_r>
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	b950      	cbnz	r0, 8006b54 <__ssputs_r+0x5c>
 8006b3e:	230c      	movs	r3, #12
 8006b40:	f8ca 3000 	str.w	r3, [sl]
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b4a:	81a3      	strh	r3, [r4, #12]
 8006b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b54:	6921      	ldr	r1, [r4, #16]
 8006b56:	464a      	mov	r2, r9
 8006b58:	f7ff fb4a 	bl	80061f0 <memcpy>
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b66:	81a3      	strh	r3, [r4, #12]
 8006b68:	6126      	str	r6, [r4, #16]
 8006b6a:	6165      	str	r5, [r4, #20]
 8006b6c:	444e      	add	r6, r9
 8006b6e:	eba5 0509 	sub.w	r5, r5, r9
 8006b72:	6026      	str	r6, [r4, #0]
 8006b74:	60a5      	str	r5, [r4, #8]
 8006b76:	463e      	mov	r6, r7
 8006b78:	42be      	cmp	r6, r7
 8006b7a:	d900      	bls.n	8006b7e <__ssputs_r+0x86>
 8006b7c:	463e      	mov	r6, r7
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	4632      	mov	r2, r6
 8006b82:	4641      	mov	r1, r8
 8006b84:	f000 fcac 	bl	80074e0 <memmove>
 8006b88:	68a3      	ldr	r3, [r4, #8]
 8006b8a:	1b9b      	subs	r3, r3, r6
 8006b8c:	60a3      	str	r3, [r4, #8]
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	4433      	add	r3, r6
 8006b92:	6023      	str	r3, [r4, #0]
 8006b94:	2000      	movs	r0, #0
 8006b96:	e7db      	b.n	8006b50 <__ssputs_r+0x58>
 8006b98:	462a      	mov	r2, r5
 8006b9a:	f000 fcc7 	bl	800752c <_realloc_r>
 8006b9e:	4606      	mov	r6, r0
 8006ba0:	2800      	cmp	r0, #0
 8006ba2:	d1e1      	bne.n	8006b68 <__ssputs_r+0x70>
 8006ba4:	6921      	ldr	r1, [r4, #16]
 8006ba6:	4650      	mov	r0, sl
 8006ba8:	f7ff fec6 	bl	8006938 <_free_r>
 8006bac:	e7c7      	b.n	8006b3e <__ssputs_r+0x46>
	...

08006bb0 <_svfiprintf_r>:
 8006bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	4698      	mov	r8, r3
 8006bb6:	898b      	ldrh	r3, [r1, #12]
 8006bb8:	061b      	lsls	r3, r3, #24
 8006bba:	b09d      	sub	sp, #116	; 0x74
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	460d      	mov	r5, r1
 8006bc0:	4614      	mov	r4, r2
 8006bc2:	d50e      	bpl.n	8006be2 <_svfiprintf_r+0x32>
 8006bc4:	690b      	ldr	r3, [r1, #16]
 8006bc6:	b963      	cbnz	r3, 8006be2 <_svfiprintf_r+0x32>
 8006bc8:	2140      	movs	r1, #64	; 0x40
 8006bca:	f7ff ff21 	bl	8006a10 <_malloc_r>
 8006bce:	6028      	str	r0, [r5, #0]
 8006bd0:	6128      	str	r0, [r5, #16]
 8006bd2:	b920      	cbnz	r0, 8006bde <_svfiprintf_r+0x2e>
 8006bd4:	230c      	movs	r3, #12
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bdc:	e0d1      	b.n	8006d82 <_svfiprintf_r+0x1d2>
 8006bde:	2340      	movs	r3, #64	; 0x40
 8006be0:	616b      	str	r3, [r5, #20]
 8006be2:	2300      	movs	r3, #0
 8006be4:	9309      	str	r3, [sp, #36]	; 0x24
 8006be6:	2320      	movs	r3, #32
 8006be8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bf0:	2330      	movs	r3, #48	; 0x30
 8006bf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d9c <_svfiprintf_r+0x1ec>
 8006bf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bfa:	f04f 0901 	mov.w	r9, #1
 8006bfe:	4623      	mov	r3, r4
 8006c00:	469a      	mov	sl, r3
 8006c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c06:	b10a      	cbz	r2, 8006c0c <_svfiprintf_r+0x5c>
 8006c08:	2a25      	cmp	r2, #37	; 0x25
 8006c0a:	d1f9      	bne.n	8006c00 <_svfiprintf_r+0x50>
 8006c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c10:	d00b      	beq.n	8006c2a <_svfiprintf_r+0x7a>
 8006c12:	465b      	mov	r3, fp
 8006c14:	4622      	mov	r2, r4
 8006c16:	4629      	mov	r1, r5
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7ff ff6d 	bl	8006af8 <__ssputs_r>
 8006c1e:	3001      	adds	r0, #1
 8006c20:	f000 80aa 	beq.w	8006d78 <_svfiprintf_r+0x1c8>
 8006c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c26:	445a      	add	r2, fp
 8006c28:	9209      	str	r2, [sp, #36]	; 0x24
 8006c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 80a2 	beq.w	8006d78 <_svfiprintf_r+0x1c8>
 8006c34:	2300      	movs	r3, #0
 8006c36:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c3e:	f10a 0a01 	add.w	sl, sl, #1
 8006c42:	9304      	str	r3, [sp, #16]
 8006c44:	9307      	str	r3, [sp, #28]
 8006c46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c4a:	931a      	str	r3, [sp, #104]	; 0x68
 8006c4c:	4654      	mov	r4, sl
 8006c4e:	2205      	movs	r2, #5
 8006c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c54:	4851      	ldr	r0, [pc, #324]	; (8006d9c <_svfiprintf_r+0x1ec>)
 8006c56:	f7f9 fac3 	bl	80001e0 <memchr>
 8006c5a:	9a04      	ldr	r2, [sp, #16]
 8006c5c:	b9d8      	cbnz	r0, 8006c96 <_svfiprintf_r+0xe6>
 8006c5e:	06d0      	lsls	r0, r2, #27
 8006c60:	bf44      	itt	mi
 8006c62:	2320      	movmi	r3, #32
 8006c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c68:	0711      	lsls	r1, r2, #28
 8006c6a:	bf44      	itt	mi
 8006c6c:	232b      	movmi	r3, #43	; 0x2b
 8006c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c72:	f89a 3000 	ldrb.w	r3, [sl]
 8006c76:	2b2a      	cmp	r3, #42	; 0x2a
 8006c78:	d015      	beq.n	8006ca6 <_svfiprintf_r+0xf6>
 8006c7a:	9a07      	ldr	r2, [sp, #28]
 8006c7c:	4654      	mov	r4, sl
 8006c7e:	2000      	movs	r0, #0
 8006c80:	f04f 0c0a 	mov.w	ip, #10
 8006c84:	4621      	mov	r1, r4
 8006c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c8a:	3b30      	subs	r3, #48	; 0x30
 8006c8c:	2b09      	cmp	r3, #9
 8006c8e:	d94e      	bls.n	8006d2e <_svfiprintf_r+0x17e>
 8006c90:	b1b0      	cbz	r0, 8006cc0 <_svfiprintf_r+0x110>
 8006c92:	9207      	str	r2, [sp, #28]
 8006c94:	e014      	b.n	8006cc0 <_svfiprintf_r+0x110>
 8006c96:	eba0 0308 	sub.w	r3, r0, r8
 8006c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	46a2      	mov	sl, r4
 8006ca4:	e7d2      	b.n	8006c4c <_svfiprintf_r+0x9c>
 8006ca6:	9b03      	ldr	r3, [sp, #12]
 8006ca8:	1d19      	adds	r1, r3, #4
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	9103      	str	r1, [sp, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bfbb      	ittet	lt
 8006cb2:	425b      	neglt	r3, r3
 8006cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8006cb8:	9307      	strge	r3, [sp, #28]
 8006cba:	9307      	strlt	r3, [sp, #28]
 8006cbc:	bfb8      	it	lt
 8006cbe:	9204      	strlt	r2, [sp, #16]
 8006cc0:	7823      	ldrb	r3, [r4, #0]
 8006cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8006cc4:	d10c      	bne.n	8006ce0 <_svfiprintf_r+0x130>
 8006cc6:	7863      	ldrb	r3, [r4, #1]
 8006cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cca:	d135      	bne.n	8006d38 <_svfiprintf_r+0x188>
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	1d1a      	adds	r2, r3, #4
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	9203      	str	r2, [sp, #12]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	bfb8      	it	lt
 8006cd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cdc:	3402      	adds	r4, #2
 8006cde:	9305      	str	r3, [sp, #20]
 8006ce0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006dac <_svfiprintf_r+0x1fc>
 8006ce4:	7821      	ldrb	r1, [r4, #0]
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	4650      	mov	r0, sl
 8006cea:	f7f9 fa79 	bl	80001e0 <memchr>
 8006cee:	b140      	cbz	r0, 8006d02 <_svfiprintf_r+0x152>
 8006cf0:	2340      	movs	r3, #64	; 0x40
 8006cf2:	eba0 000a 	sub.w	r0, r0, sl
 8006cf6:	fa03 f000 	lsl.w	r0, r3, r0
 8006cfa:	9b04      	ldr	r3, [sp, #16]
 8006cfc:	4303      	orrs	r3, r0
 8006cfe:	3401      	adds	r4, #1
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d06:	4826      	ldr	r0, [pc, #152]	; (8006da0 <_svfiprintf_r+0x1f0>)
 8006d08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d0c:	2206      	movs	r2, #6
 8006d0e:	f7f9 fa67 	bl	80001e0 <memchr>
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d038      	beq.n	8006d88 <_svfiprintf_r+0x1d8>
 8006d16:	4b23      	ldr	r3, [pc, #140]	; (8006da4 <_svfiprintf_r+0x1f4>)
 8006d18:	bb1b      	cbnz	r3, 8006d62 <_svfiprintf_r+0x1b2>
 8006d1a:	9b03      	ldr	r3, [sp, #12]
 8006d1c:	3307      	adds	r3, #7
 8006d1e:	f023 0307 	bic.w	r3, r3, #7
 8006d22:	3308      	adds	r3, #8
 8006d24:	9303      	str	r3, [sp, #12]
 8006d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d28:	4433      	add	r3, r6
 8006d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d2c:	e767      	b.n	8006bfe <_svfiprintf_r+0x4e>
 8006d2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d32:	460c      	mov	r4, r1
 8006d34:	2001      	movs	r0, #1
 8006d36:	e7a5      	b.n	8006c84 <_svfiprintf_r+0xd4>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	3401      	adds	r4, #1
 8006d3c:	9305      	str	r3, [sp, #20]
 8006d3e:	4619      	mov	r1, r3
 8006d40:	f04f 0c0a 	mov.w	ip, #10
 8006d44:	4620      	mov	r0, r4
 8006d46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d4a:	3a30      	subs	r2, #48	; 0x30
 8006d4c:	2a09      	cmp	r2, #9
 8006d4e:	d903      	bls.n	8006d58 <_svfiprintf_r+0x1a8>
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0c5      	beq.n	8006ce0 <_svfiprintf_r+0x130>
 8006d54:	9105      	str	r1, [sp, #20]
 8006d56:	e7c3      	b.n	8006ce0 <_svfiprintf_r+0x130>
 8006d58:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e7f0      	b.n	8006d44 <_svfiprintf_r+0x194>
 8006d62:	ab03      	add	r3, sp, #12
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	462a      	mov	r2, r5
 8006d68:	4b0f      	ldr	r3, [pc, #60]	; (8006da8 <_svfiprintf_r+0x1f8>)
 8006d6a:	a904      	add	r1, sp, #16
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	f3af 8000 	nop.w
 8006d72:	1c42      	adds	r2, r0, #1
 8006d74:	4606      	mov	r6, r0
 8006d76:	d1d6      	bne.n	8006d26 <_svfiprintf_r+0x176>
 8006d78:	89ab      	ldrh	r3, [r5, #12]
 8006d7a:	065b      	lsls	r3, r3, #25
 8006d7c:	f53f af2c 	bmi.w	8006bd8 <_svfiprintf_r+0x28>
 8006d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d82:	b01d      	add	sp, #116	; 0x74
 8006d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d88:	ab03      	add	r3, sp, #12
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	462a      	mov	r2, r5
 8006d8e:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <_svfiprintf_r+0x1f8>)
 8006d90:	a904      	add	r1, sp, #16
 8006d92:	4638      	mov	r0, r7
 8006d94:	f000 f9d4 	bl	8007140 <_printf_i>
 8006d98:	e7eb      	b.n	8006d72 <_svfiprintf_r+0x1c2>
 8006d9a:	bf00      	nop
 8006d9c:	080078c0 	.word	0x080078c0
 8006da0:	080078ca 	.word	0x080078ca
 8006da4:	00000000 	.word	0x00000000
 8006da8:	08006af9 	.word	0x08006af9
 8006dac:	080078c6 	.word	0x080078c6

08006db0 <__sfputc_r>:
 8006db0:	6893      	ldr	r3, [r2, #8]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	b410      	push	{r4}
 8006db8:	6093      	str	r3, [r2, #8]
 8006dba:	da08      	bge.n	8006dce <__sfputc_r+0x1e>
 8006dbc:	6994      	ldr	r4, [r2, #24]
 8006dbe:	42a3      	cmp	r3, r4
 8006dc0:	db01      	blt.n	8006dc6 <__sfputc_r+0x16>
 8006dc2:	290a      	cmp	r1, #10
 8006dc4:	d103      	bne.n	8006dce <__sfputc_r+0x1e>
 8006dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dca:	f7ff bad5 	b.w	8006378 <__swbuf_r>
 8006dce:	6813      	ldr	r3, [r2, #0]
 8006dd0:	1c58      	adds	r0, r3, #1
 8006dd2:	6010      	str	r0, [r2, #0]
 8006dd4:	7019      	strb	r1, [r3, #0]
 8006dd6:	4608      	mov	r0, r1
 8006dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <__sfputs_r>:
 8006dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de0:	4606      	mov	r6, r0
 8006de2:	460f      	mov	r7, r1
 8006de4:	4614      	mov	r4, r2
 8006de6:	18d5      	adds	r5, r2, r3
 8006de8:	42ac      	cmp	r4, r5
 8006dea:	d101      	bne.n	8006df0 <__sfputs_r+0x12>
 8006dec:	2000      	movs	r0, #0
 8006dee:	e007      	b.n	8006e00 <__sfputs_r+0x22>
 8006df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df4:	463a      	mov	r2, r7
 8006df6:	4630      	mov	r0, r6
 8006df8:	f7ff ffda 	bl	8006db0 <__sfputc_r>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d1f3      	bne.n	8006de8 <__sfputs_r+0xa>
 8006e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e04 <_vfiprintf_r>:
 8006e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e08:	460d      	mov	r5, r1
 8006e0a:	b09d      	sub	sp, #116	; 0x74
 8006e0c:	4614      	mov	r4, r2
 8006e0e:	4698      	mov	r8, r3
 8006e10:	4606      	mov	r6, r0
 8006e12:	b118      	cbz	r0, 8006e1c <_vfiprintf_r+0x18>
 8006e14:	6983      	ldr	r3, [r0, #24]
 8006e16:	b90b      	cbnz	r3, 8006e1c <_vfiprintf_r+0x18>
 8006e18:	f7ff fc88 	bl	800672c <__sinit>
 8006e1c:	4b89      	ldr	r3, [pc, #548]	; (8007044 <_vfiprintf_r+0x240>)
 8006e1e:	429d      	cmp	r5, r3
 8006e20:	d11b      	bne.n	8006e5a <_vfiprintf_r+0x56>
 8006e22:	6875      	ldr	r5, [r6, #4]
 8006e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e26:	07d9      	lsls	r1, r3, #31
 8006e28:	d405      	bmi.n	8006e36 <_vfiprintf_r+0x32>
 8006e2a:	89ab      	ldrh	r3, [r5, #12]
 8006e2c:	059a      	lsls	r2, r3, #22
 8006e2e:	d402      	bmi.n	8006e36 <_vfiprintf_r+0x32>
 8006e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e32:	f7ff fd19 	bl	8006868 <__retarget_lock_acquire_recursive>
 8006e36:	89ab      	ldrh	r3, [r5, #12]
 8006e38:	071b      	lsls	r3, r3, #28
 8006e3a:	d501      	bpl.n	8006e40 <_vfiprintf_r+0x3c>
 8006e3c:	692b      	ldr	r3, [r5, #16]
 8006e3e:	b9eb      	cbnz	r3, 8006e7c <_vfiprintf_r+0x78>
 8006e40:	4629      	mov	r1, r5
 8006e42:	4630      	mov	r0, r6
 8006e44:	f7ff faea 	bl	800641c <__swsetup_r>
 8006e48:	b1c0      	cbz	r0, 8006e7c <_vfiprintf_r+0x78>
 8006e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e4c:	07dc      	lsls	r4, r3, #31
 8006e4e:	d50e      	bpl.n	8006e6e <_vfiprintf_r+0x6a>
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	b01d      	add	sp, #116	; 0x74
 8006e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5a:	4b7b      	ldr	r3, [pc, #492]	; (8007048 <_vfiprintf_r+0x244>)
 8006e5c:	429d      	cmp	r5, r3
 8006e5e:	d101      	bne.n	8006e64 <_vfiprintf_r+0x60>
 8006e60:	68b5      	ldr	r5, [r6, #8]
 8006e62:	e7df      	b.n	8006e24 <_vfiprintf_r+0x20>
 8006e64:	4b79      	ldr	r3, [pc, #484]	; (800704c <_vfiprintf_r+0x248>)
 8006e66:	429d      	cmp	r5, r3
 8006e68:	bf08      	it	eq
 8006e6a:	68f5      	ldreq	r5, [r6, #12]
 8006e6c:	e7da      	b.n	8006e24 <_vfiprintf_r+0x20>
 8006e6e:	89ab      	ldrh	r3, [r5, #12]
 8006e70:	0598      	lsls	r0, r3, #22
 8006e72:	d4ed      	bmi.n	8006e50 <_vfiprintf_r+0x4c>
 8006e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e76:	f7ff fcf8 	bl	800686a <__retarget_lock_release_recursive>
 8006e7a:	e7e9      	b.n	8006e50 <_vfiprintf_r+0x4c>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e80:	2320      	movs	r3, #32
 8006e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e86:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e8a:	2330      	movs	r3, #48	; 0x30
 8006e8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007050 <_vfiprintf_r+0x24c>
 8006e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e94:	f04f 0901 	mov.w	r9, #1
 8006e98:	4623      	mov	r3, r4
 8006e9a:	469a      	mov	sl, r3
 8006e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ea0:	b10a      	cbz	r2, 8006ea6 <_vfiprintf_r+0xa2>
 8006ea2:	2a25      	cmp	r2, #37	; 0x25
 8006ea4:	d1f9      	bne.n	8006e9a <_vfiprintf_r+0x96>
 8006ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8006eaa:	d00b      	beq.n	8006ec4 <_vfiprintf_r+0xc0>
 8006eac:	465b      	mov	r3, fp
 8006eae:	4622      	mov	r2, r4
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7ff ff93 	bl	8006dde <__sfputs_r>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	f000 80aa 	beq.w	8007012 <_vfiprintf_r+0x20e>
 8006ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ec0:	445a      	add	r2, fp
 8006ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 80a2 	beq.w	8007012 <_vfiprintf_r+0x20e>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ed8:	f10a 0a01 	add.w	sl, sl, #1
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	9307      	str	r3, [sp, #28]
 8006ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ee6:	4654      	mov	r4, sl
 8006ee8:	2205      	movs	r2, #5
 8006eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eee:	4858      	ldr	r0, [pc, #352]	; (8007050 <_vfiprintf_r+0x24c>)
 8006ef0:	f7f9 f976 	bl	80001e0 <memchr>
 8006ef4:	9a04      	ldr	r2, [sp, #16]
 8006ef6:	b9d8      	cbnz	r0, 8006f30 <_vfiprintf_r+0x12c>
 8006ef8:	06d1      	lsls	r1, r2, #27
 8006efa:	bf44      	itt	mi
 8006efc:	2320      	movmi	r3, #32
 8006efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f02:	0713      	lsls	r3, r2, #28
 8006f04:	bf44      	itt	mi
 8006f06:	232b      	movmi	r3, #43	; 0x2b
 8006f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f10:	2b2a      	cmp	r3, #42	; 0x2a
 8006f12:	d015      	beq.n	8006f40 <_vfiprintf_r+0x13c>
 8006f14:	9a07      	ldr	r2, [sp, #28]
 8006f16:	4654      	mov	r4, sl
 8006f18:	2000      	movs	r0, #0
 8006f1a:	f04f 0c0a 	mov.w	ip, #10
 8006f1e:	4621      	mov	r1, r4
 8006f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f24:	3b30      	subs	r3, #48	; 0x30
 8006f26:	2b09      	cmp	r3, #9
 8006f28:	d94e      	bls.n	8006fc8 <_vfiprintf_r+0x1c4>
 8006f2a:	b1b0      	cbz	r0, 8006f5a <_vfiprintf_r+0x156>
 8006f2c:	9207      	str	r2, [sp, #28]
 8006f2e:	e014      	b.n	8006f5a <_vfiprintf_r+0x156>
 8006f30:	eba0 0308 	sub.w	r3, r0, r8
 8006f34:	fa09 f303 	lsl.w	r3, r9, r3
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	9304      	str	r3, [sp, #16]
 8006f3c:	46a2      	mov	sl, r4
 8006f3e:	e7d2      	b.n	8006ee6 <_vfiprintf_r+0xe2>
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	1d19      	adds	r1, r3, #4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	9103      	str	r1, [sp, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bfbb      	ittet	lt
 8006f4c:	425b      	neglt	r3, r3
 8006f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8006f52:	9307      	strge	r3, [sp, #28]
 8006f54:	9307      	strlt	r3, [sp, #28]
 8006f56:	bfb8      	it	lt
 8006f58:	9204      	strlt	r2, [sp, #16]
 8006f5a:	7823      	ldrb	r3, [r4, #0]
 8006f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f5e:	d10c      	bne.n	8006f7a <_vfiprintf_r+0x176>
 8006f60:	7863      	ldrb	r3, [r4, #1]
 8006f62:	2b2a      	cmp	r3, #42	; 0x2a
 8006f64:	d135      	bne.n	8006fd2 <_vfiprintf_r+0x1ce>
 8006f66:	9b03      	ldr	r3, [sp, #12]
 8006f68:	1d1a      	adds	r2, r3, #4
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	9203      	str	r2, [sp, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	bfb8      	it	lt
 8006f72:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f76:	3402      	adds	r4, #2
 8006f78:	9305      	str	r3, [sp, #20]
 8006f7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007060 <_vfiprintf_r+0x25c>
 8006f7e:	7821      	ldrb	r1, [r4, #0]
 8006f80:	2203      	movs	r2, #3
 8006f82:	4650      	mov	r0, sl
 8006f84:	f7f9 f92c 	bl	80001e0 <memchr>
 8006f88:	b140      	cbz	r0, 8006f9c <_vfiprintf_r+0x198>
 8006f8a:	2340      	movs	r3, #64	; 0x40
 8006f8c:	eba0 000a 	sub.w	r0, r0, sl
 8006f90:	fa03 f000 	lsl.w	r0, r3, r0
 8006f94:	9b04      	ldr	r3, [sp, #16]
 8006f96:	4303      	orrs	r3, r0
 8006f98:	3401      	adds	r4, #1
 8006f9a:	9304      	str	r3, [sp, #16]
 8006f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa0:	482c      	ldr	r0, [pc, #176]	; (8007054 <_vfiprintf_r+0x250>)
 8006fa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fa6:	2206      	movs	r2, #6
 8006fa8:	f7f9 f91a 	bl	80001e0 <memchr>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d03f      	beq.n	8007030 <_vfiprintf_r+0x22c>
 8006fb0:	4b29      	ldr	r3, [pc, #164]	; (8007058 <_vfiprintf_r+0x254>)
 8006fb2:	bb1b      	cbnz	r3, 8006ffc <_vfiprintf_r+0x1f8>
 8006fb4:	9b03      	ldr	r3, [sp, #12]
 8006fb6:	3307      	adds	r3, #7
 8006fb8:	f023 0307 	bic.w	r3, r3, #7
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	9303      	str	r3, [sp, #12]
 8006fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc2:	443b      	add	r3, r7
 8006fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc6:	e767      	b.n	8006e98 <_vfiprintf_r+0x94>
 8006fc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fcc:	460c      	mov	r4, r1
 8006fce:	2001      	movs	r0, #1
 8006fd0:	e7a5      	b.n	8006f1e <_vfiprintf_r+0x11a>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	3401      	adds	r4, #1
 8006fd6:	9305      	str	r3, [sp, #20]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f04f 0c0a 	mov.w	ip, #10
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fe4:	3a30      	subs	r2, #48	; 0x30
 8006fe6:	2a09      	cmp	r2, #9
 8006fe8:	d903      	bls.n	8006ff2 <_vfiprintf_r+0x1ee>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0c5      	beq.n	8006f7a <_vfiprintf_r+0x176>
 8006fee:	9105      	str	r1, [sp, #20]
 8006ff0:	e7c3      	b.n	8006f7a <_vfiprintf_r+0x176>
 8006ff2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e7f0      	b.n	8006fde <_vfiprintf_r+0x1da>
 8006ffc:	ab03      	add	r3, sp, #12
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	462a      	mov	r2, r5
 8007002:	4b16      	ldr	r3, [pc, #88]	; (800705c <_vfiprintf_r+0x258>)
 8007004:	a904      	add	r1, sp, #16
 8007006:	4630      	mov	r0, r6
 8007008:	f3af 8000 	nop.w
 800700c:	4607      	mov	r7, r0
 800700e:	1c78      	adds	r0, r7, #1
 8007010:	d1d6      	bne.n	8006fc0 <_vfiprintf_r+0x1bc>
 8007012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007014:	07d9      	lsls	r1, r3, #31
 8007016:	d405      	bmi.n	8007024 <_vfiprintf_r+0x220>
 8007018:	89ab      	ldrh	r3, [r5, #12]
 800701a:	059a      	lsls	r2, r3, #22
 800701c:	d402      	bmi.n	8007024 <_vfiprintf_r+0x220>
 800701e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007020:	f7ff fc23 	bl	800686a <__retarget_lock_release_recursive>
 8007024:	89ab      	ldrh	r3, [r5, #12]
 8007026:	065b      	lsls	r3, r3, #25
 8007028:	f53f af12 	bmi.w	8006e50 <_vfiprintf_r+0x4c>
 800702c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800702e:	e711      	b.n	8006e54 <_vfiprintf_r+0x50>
 8007030:	ab03      	add	r3, sp, #12
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	462a      	mov	r2, r5
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <_vfiprintf_r+0x258>)
 8007038:	a904      	add	r1, sp, #16
 800703a:	4630      	mov	r0, r6
 800703c:	f000 f880 	bl	8007140 <_printf_i>
 8007040:	e7e4      	b.n	800700c <_vfiprintf_r+0x208>
 8007042:	bf00      	nop
 8007044:	08007880 	.word	0x08007880
 8007048:	080078a0 	.word	0x080078a0
 800704c:	08007860 	.word	0x08007860
 8007050:	080078c0 	.word	0x080078c0
 8007054:	080078ca 	.word	0x080078ca
 8007058:	00000000 	.word	0x00000000
 800705c:	08006ddf 	.word	0x08006ddf
 8007060:	080078c6 	.word	0x080078c6

08007064 <_printf_common>:
 8007064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	4616      	mov	r6, r2
 800706a:	4699      	mov	r9, r3
 800706c:	688a      	ldr	r2, [r1, #8]
 800706e:	690b      	ldr	r3, [r1, #16]
 8007070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007074:	4293      	cmp	r3, r2
 8007076:	bfb8      	it	lt
 8007078:	4613      	movlt	r3, r2
 800707a:	6033      	str	r3, [r6, #0]
 800707c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007080:	4607      	mov	r7, r0
 8007082:	460c      	mov	r4, r1
 8007084:	b10a      	cbz	r2, 800708a <_printf_common+0x26>
 8007086:	3301      	adds	r3, #1
 8007088:	6033      	str	r3, [r6, #0]
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	0699      	lsls	r1, r3, #26
 800708e:	bf42      	ittt	mi
 8007090:	6833      	ldrmi	r3, [r6, #0]
 8007092:	3302      	addmi	r3, #2
 8007094:	6033      	strmi	r3, [r6, #0]
 8007096:	6825      	ldr	r5, [r4, #0]
 8007098:	f015 0506 	ands.w	r5, r5, #6
 800709c:	d106      	bne.n	80070ac <_printf_common+0x48>
 800709e:	f104 0a19 	add.w	sl, r4, #25
 80070a2:	68e3      	ldr	r3, [r4, #12]
 80070a4:	6832      	ldr	r2, [r6, #0]
 80070a6:	1a9b      	subs	r3, r3, r2
 80070a8:	42ab      	cmp	r3, r5
 80070aa:	dc26      	bgt.n	80070fa <_printf_common+0x96>
 80070ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070b0:	1e13      	subs	r3, r2, #0
 80070b2:	6822      	ldr	r2, [r4, #0]
 80070b4:	bf18      	it	ne
 80070b6:	2301      	movne	r3, #1
 80070b8:	0692      	lsls	r2, r2, #26
 80070ba:	d42b      	bmi.n	8007114 <_printf_common+0xb0>
 80070bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070c0:	4649      	mov	r1, r9
 80070c2:	4638      	mov	r0, r7
 80070c4:	47c0      	blx	r8
 80070c6:	3001      	adds	r0, #1
 80070c8:	d01e      	beq.n	8007108 <_printf_common+0xa4>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	68e5      	ldr	r5, [r4, #12]
 80070ce:	6832      	ldr	r2, [r6, #0]
 80070d0:	f003 0306 	and.w	r3, r3, #6
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	bf08      	it	eq
 80070d8:	1aad      	subeq	r5, r5, r2
 80070da:	68a3      	ldr	r3, [r4, #8]
 80070dc:	6922      	ldr	r2, [r4, #16]
 80070de:	bf0c      	ite	eq
 80070e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e4:	2500      	movne	r5, #0
 80070e6:	4293      	cmp	r3, r2
 80070e8:	bfc4      	itt	gt
 80070ea:	1a9b      	subgt	r3, r3, r2
 80070ec:	18ed      	addgt	r5, r5, r3
 80070ee:	2600      	movs	r6, #0
 80070f0:	341a      	adds	r4, #26
 80070f2:	42b5      	cmp	r5, r6
 80070f4:	d11a      	bne.n	800712c <_printf_common+0xc8>
 80070f6:	2000      	movs	r0, #0
 80070f8:	e008      	b.n	800710c <_printf_common+0xa8>
 80070fa:	2301      	movs	r3, #1
 80070fc:	4652      	mov	r2, sl
 80070fe:	4649      	mov	r1, r9
 8007100:	4638      	mov	r0, r7
 8007102:	47c0      	blx	r8
 8007104:	3001      	adds	r0, #1
 8007106:	d103      	bne.n	8007110 <_printf_common+0xac>
 8007108:	f04f 30ff 	mov.w	r0, #4294967295
 800710c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007110:	3501      	adds	r5, #1
 8007112:	e7c6      	b.n	80070a2 <_printf_common+0x3e>
 8007114:	18e1      	adds	r1, r4, r3
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	2030      	movs	r0, #48	; 0x30
 800711a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800711e:	4422      	add	r2, r4
 8007120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007128:	3302      	adds	r3, #2
 800712a:	e7c7      	b.n	80070bc <_printf_common+0x58>
 800712c:	2301      	movs	r3, #1
 800712e:	4622      	mov	r2, r4
 8007130:	4649      	mov	r1, r9
 8007132:	4638      	mov	r0, r7
 8007134:	47c0      	blx	r8
 8007136:	3001      	adds	r0, #1
 8007138:	d0e6      	beq.n	8007108 <_printf_common+0xa4>
 800713a:	3601      	adds	r6, #1
 800713c:	e7d9      	b.n	80070f2 <_printf_common+0x8e>
	...

08007140 <_printf_i>:
 8007140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007144:	7e0f      	ldrb	r7, [r1, #24]
 8007146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007148:	2f78      	cmp	r7, #120	; 0x78
 800714a:	4691      	mov	r9, r2
 800714c:	4680      	mov	r8, r0
 800714e:	460c      	mov	r4, r1
 8007150:	469a      	mov	sl, r3
 8007152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007156:	d807      	bhi.n	8007168 <_printf_i+0x28>
 8007158:	2f62      	cmp	r7, #98	; 0x62
 800715a:	d80a      	bhi.n	8007172 <_printf_i+0x32>
 800715c:	2f00      	cmp	r7, #0
 800715e:	f000 80d8 	beq.w	8007312 <_printf_i+0x1d2>
 8007162:	2f58      	cmp	r7, #88	; 0x58
 8007164:	f000 80a3 	beq.w	80072ae <_printf_i+0x16e>
 8007168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800716c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007170:	e03a      	b.n	80071e8 <_printf_i+0xa8>
 8007172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007176:	2b15      	cmp	r3, #21
 8007178:	d8f6      	bhi.n	8007168 <_printf_i+0x28>
 800717a:	a101      	add	r1, pc, #4	; (adr r1, 8007180 <_printf_i+0x40>)
 800717c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007180:	080071d9 	.word	0x080071d9
 8007184:	080071ed 	.word	0x080071ed
 8007188:	08007169 	.word	0x08007169
 800718c:	08007169 	.word	0x08007169
 8007190:	08007169 	.word	0x08007169
 8007194:	08007169 	.word	0x08007169
 8007198:	080071ed 	.word	0x080071ed
 800719c:	08007169 	.word	0x08007169
 80071a0:	08007169 	.word	0x08007169
 80071a4:	08007169 	.word	0x08007169
 80071a8:	08007169 	.word	0x08007169
 80071ac:	080072f9 	.word	0x080072f9
 80071b0:	0800721d 	.word	0x0800721d
 80071b4:	080072db 	.word	0x080072db
 80071b8:	08007169 	.word	0x08007169
 80071bc:	08007169 	.word	0x08007169
 80071c0:	0800731b 	.word	0x0800731b
 80071c4:	08007169 	.word	0x08007169
 80071c8:	0800721d 	.word	0x0800721d
 80071cc:	08007169 	.word	0x08007169
 80071d0:	08007169 	.word	0x08007169
 80071d4:	080072e3 	.word	0x080072e3
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	1d1a      	adds	r2, r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	602a      	str	r2, [r5, #0]
 80071e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0a3      	b.n	8007334 <_printf_i+0x1f4>
 80071ec:	6820      	ldr	r0, [r4, #0]
 80071ee:	6829      	ldr	r1, [r5, #0]
 80071f0:	0606      	lsls	r6, r0, #24
 80071f2:	f101 0304 	add.w	r3, r1, #4
 80071f6:	d50a      	bpl.n	800720e <_printf_i+0xce>
 80071f8:	680e      	ldr	r6, [r1, #0]
 80071fa:	602b      	str	r3, [r5, #0]
 80071fc:	2e00      	cmp	r6, #0
 80071fe:	da03      	bge.n	8007208 <_printf_i+0xc8>
 8007200:	232d      	movs	r3, #45	; 0x2d
 8007202:	4276      	negs	r6, r6
 8007204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007208:	485e      	ldr	r0, [pc, #376]	; (8007384 <_printf_i+0x244>)
 800720a:	230a      	movs	r3, #10
 800720c:	e019      	b.n	8007242 <_printf_i+0x102>
 800720e:	680e      	ldr	r6, [r1, #0]
 8007210:	602b      	str	r3, [r5, #0]
 8007212:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007216:	bf18      	it	ne
 8007218:	b236      	sxthne	r6, r6
 800721a:	e7ef      	b.n	80071fc <_printf_i+0xbc>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	6820      	ldr	r0, [r4, #0]
 8007220:	1d19      	adds	r1, r3, #4
 8007222:	6029      	str	r1, [r5, #0]
 8007224:	0601      	lsls	r1, r0, #24
 8007226:	d501      	bpl.n	800722c <_printf_i+0xec>
 8007228:	681e      	ldr	r6, [r3, #0]
 800722a:	e002      	b.n	8007232 <_printf_i+0xf2>
 800722c:	0646      	lsls	r6, r0, #25
 800722e:	d5fb      	bpl.n	8007228 <_printf_i+0xe8>
 8007230:	881e      	ldrh	r6, [r3, #0]
 8007232:	4854      	ldr	r0, [pc, #336]	; (8007384 <_printf_i+0x244>)
 8007234:	2f6f      	cmp	r7, #111	; 0x6f
 8007236:	bf0c      	ite	eq
 8007238:	2308      	moveq	r3, #8
 800723a:	230a      	movne	r3, #10
 800723c:	2100      	movs	r1, #0
 800723e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007242:	6865      	ldr	r5, [r4, #4]
 8007244:	60a5      	str	r5, [r4, #8]
 8007246:	2d00      	cmp	r5, #0
 8007248:	bfa2      	ittt	ge
 800724a:	6821      	ldrge	r1, [r4, #0]
 800724c:	f021 0104 	bicge.w	r1, r1, #4
 8007250:	6021      	strge	r1, [r4, #0]
 8007252:	b90e      	cbnz	r6, 8007258 <_printf_i+0x118>
 8007254:	2d00      	cmp	r5, #0
 8007256:	d04d      	beq.n	80072f4 <_printf_i+0x1b4>
 8007258:	4615      	mov	r5, r2
 800725a:	fbb6 f1f3 	udiv	r1, r6, r3
 800725e:	fb03 6711 	mls	r7, r3, r1, r6
 8007262:	5dc7      	ldrb	r7, [r0, r7]
 8007264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007268:	4637      	mov	r7, r6
 800726a:	42bb      	cmp	r3, r7
 800726c:	460e      	mov	r6, r1
 800726e:	d9f4      	bls.n	800725a <_printf_i+0x11a>
 8007270:	2b08      	cmp	r3, #8
 8007272:	d10b      	bne.n	800728c <_printf_i+0x14c>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	07de      	lsls	r6, r3, #31
 8007278:	d508      	bpl.n	800728c <_printf_i+0x14c>
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	6861      	ldr	r1, [r4, #4]
 800727e:	4299      	cmp	r1, r3
 8007280:	bfde      	ittt	le
 8007282:	2330      	movle	r3, #48	; 0x30
 8007284:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007288:	f105 35ff 	addle.w	r5, r5, #4294967295
 800728c:	1b52      	subs	r2, r2, r5
 800728e:	6122      	str	r2, [r4, #16]
 8007290:	f8cd a000 	str.w	sl, [sp]
 8007294:	464b      	mov	r3, r9
 8007296:	aa03      	add	r2, sp, #12
 8007298:	4621      	mov	r1, r4
 800729a:	4640      	mov	r0, r8
 800729c:	f7ff fee2 	bl	8007064 <_printf_common>
 80072a0:	3001      	adds	r0, #1
 80072a2:	d14c      	bne.n	800733e <_printf_i+0x1fe>
 80072a4:	f04f 30ff 	mov.w	r0, #4294967295
 80072a8:	b004      	add	sp, #16
 80072aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ae:	4835      	ldr	r0, [pc, #212]	; (8007384 <_printf_i+0x244>)
 80072b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072b4:	6829      	ldr	r1, [r5, #0]
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80072bc:	6029      	str	r1, [r5, #0]
 80072be:	061d      	lsls	r5, r3, #24
 80072c0:	d514      	bpl.n	80072ec <_printf_i+0x1ac>
 80072c2:	07df      	lsls	r7, r3, #31
 80072c4:	bf44      	itt	mi
 80072c6:	f043 0320 	orrmi.w	r3, r3, #32
 80072ca:	6023      	strmi	r3, [r4, #0]
 80072cc:	b91e      	cbnz	r6, 80072d6 <_printf_i+0x196>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	f023 0320 	bic.w	r3, r3, #32
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	2310      	movs	r3, #16
 80072d8:	e7b0      	b.n	800723c <_printf_i+0xfc>
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	f043 0320 	orr.w	r3, r3, #32
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	2378      	movs	r3, #120	; 0x78
 80072e4:	4828      	ldr	r0, [pc, #160]	; (8007388 <_printf_i+0x248>)
 80072e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072ea:	e7e3      	b.n	80072b4 <_printf_i+0x174>
 80072ec:	0659      	lsls	r1, r3, #25
 80072ee:	bf48      	it	mi
 80072f0:	b2b6      	uxthmi	r6, r6
 80072f2:	e7e6      	b.n	80072c2 <_printf_i+0x182>
 80072f4:	4615      	mov	r5, r2
 80072f6:	e7bb      	b.n	8007270 <_printf_i+0x130>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	6826      	ldr	r6, [r4, #0]
 80072fc:	6961      	ldr	r1, [r4, #20]
 80072fe:	1d18      	adds	r0, r3, #4
 8007300:	6028      	str	r0, [r5, #0]
 8007302:	0635      	lsls	r5, r6, #24
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	d501      	bpl.n	800730c <_printf_i+0x1cc>
 8007308:	6019      	str	r1, [r3, #0]
 800730a:	e002      	b.n	8007312 <_printf_i+0x1d2>
 800730c:	0670      	lsls	r0, r6, #25
 800730e:	d5fb      	bpl.n	8007308 <_printf_i+0x1c8>
 8007310:	8019      	strh	r1, [r3, #0]
 8007312:	2300      	movs	r3, #0
 8007314:	6123      	str	r3, [r4, #16]
 8007316:	4615      	mov	r5, r2
 8007318:	e7ba      	b.n	8007290 <_printf_i+0x150>
 800731a:	682b      	ldr	r3, [r5, #0]
 800731c:	1d1a      	adds	r2, r3, #4
 800731e:	602a      	str	r2, [r5, #0]
 8007320:	681d      	ldr	r5, [r3, #0]
 8007322:	6862      	ldr	r2, [r4, #4]
 8007324:	2100      	movs	r1, #0
 8007326:	4628      	mov	r0, r5
 8007328:	f7f8 ff5a 	bl	80001e0 <memchr>
 800732c:	b108      	cbz	r0, 8007332 <_printf_i+0x1f2>
 800732e:	1b40      	subs	r0, r0, r5
 8007330:	6060      	str	r0, [r4, #4]
 8007332:	6863      	ldr	r3, [r4, #4]
 8007334:	6123      	str	r3, [r4, #16]
 8007336:	2300      	movs	r3, #0
 8007338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800733c:	e7a8      	b.n	8007290 <_printf_i+0x150>
 800733e:	6923      	ldr	r3, [r4, #16]
 8007340:	462a      	mov	r2, r5
 8007342:	4649      	mov	r1, r9
 8007344:	4640      	mov	r0, r8
 8007346:	47d0      	blx	sl
 8007348:	3001      	adds	r0, #1
 800734a:	d0ab      	beq.n	80072a4 <_printf_i+0x164>
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	079b      	lsls	r3, r3, #30
 8007350:	d413      	bmi.n	800737a <_printf_i+0x23a>
 8007352:	68e0      	ldr	r0, [r4, #12]
 8007354:	9b03      	ldr	r3, [sp, #12]
 8007356:	4298      	cmp	r0, r3
 8007358:	bfb8      	it	lt
 800735a:	4618      	movlt	r0, r3
 800735c:	e7a4      	b.n	80072a8 <_printf_i+0x168>
 800735e:	2301      	movs	r3, #1
 8007360:	4632      	mov	r2, r6
 8007362:	4649      	mov	r1, r9
 8007364:	4640      	mov	r0, r8
 8007366:	47d0      	blx	sl
 8007368:	3001      	adds	r0, #1
 800736a:	d09b      	beq.n	80072a4 <_printf_i+0x164>
 800736c:	3501      	adds	r5, #1
 800736e:	68e3      	ldr	r3, [r4, #12]
 8007370:	9903      	ldr	r1, [sp, #12]
 8007372:	1a5b      	subs	r3, r3, r1
 8007374:	42ab      	cmp	r3, r5
 8007376:	dcf2      	bgt.n	800735e <_printf_i+0x21e>
 8007378:	e7eb      	b.n	8007352 <_printf_i+0x212>
 800737a:	2500      	movs	r5, #0
 800737c:	f104 0619 	add.w	r6, r4, #25
 8007380:	e7f5      	b.n	800736e <_printf_i+0x22e>
 8007382:	bf00      	nop
 8007384:	080078d1 	.word	0x080078d1
 8007388:	080078e2 	.word	0x080078e2

0800738c <_sbrk_r>:
 800738c:	b538      	push	{r3, r4, r5, lr}
 800738e:	4d06      	ldr	r5, [pc, #24]	; (80073a8 <_sbrk_r+0x1c>)
 8007390:	2300      	movs	r3, #0
 8007392:	4604      	mov	r4, r0
 8007394:	4608      	mov	r0, r1
 8007396:	602b      	str	r3, [r5, #0]
 8007398:	f7fa fe26 	bl	8001fe8 <_sbrk>
 800739c:	1c43      	adds	r3, r0, #1
 800739e:	d102      	bne.n	80073a6 <_sbrk_r+0x1a>
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	b103      	cbz	r3, 80073a6 <_sbrk_r+0x1a>
 80073a4:	6023      	str	r3, [r4, #0]
 80073a6:	bd38      	pop	{r3, r4, r5, pc}
 80073a8:	200002ec 	.word	0x200002ec

080073ac <__sread>:
 80073ac:	b510      	push	{r4, lr}
 80073ae:	460c      	mov	r4, r1
 80073b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b4:	f000 f8ea 	bl	800758c <_read_r>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	bfab      	itete	ge
 80073bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073be:	89a3      	ldrhlt	r3, [r4, #12]
 80073c0:	181b      	addge	r3, r3, r0
 80073c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073c6:	bfac      	ite	ge
 80073c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ca:	81a3      	strhlt	r3, [r4, #12]
 80073cc:	bd10      	pop	{r4, pc}

080073ce <__swrite>:
 80073ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d2:	461f      	mov	r7, r3
 80073d4:	898b      	ldrh	r3, [r1, #12]
 80073d6:	05db      	lsls	r3, r3, #23
 80073d8:	4605      	mov	r5, r0
 80073da:	460c      	mov	r4, r1
 80073dc:	4616      	mov	r6, r2
 80073de:	d505      	bpl.n	80073ec <__swrite+0x1e>
 80073e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e4:	2302      	movs	r3, #2
 80073e6:	2200      	movs	r2, #0
 80073e8:	f000 f868 	bl	80074bc <_lseek_r>
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073f6:	81a3      	strh	r3, [r4, #12]
 80073f8:	4632      	mov	r2, r6
 80073fa:	463b      	mov	r3, r7
 80073fc:	4628      	mov	r0, r5
 80073fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007402:	f000 b817 	b.w	8007434 <_write_r>

08007406 <__sseek>:
 8007406:	b510      	push	{r4, lr}
 8007408:	460c      	mov	r4, r1
 800740a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740e:	f000 f855 	bl	80074bc <_lseek_r>
 8007412:	1c43      	adds	r3, r0, #1
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	bf15      	itete	ne
 8007418:	6560      	strne	r0, [r4, #84]	; 0x54
 800741a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800741e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007422:	81a3      	strheq	r3, [r4, #12]
 8007424:	bf18      	it	ne
 8007426:	81a3      	strhne	r3, [r4, #12]
 8007428:	bd10      	pop	{r4, pc}

0800742a <__sclose>:
 800742a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742e:	f000 b813 	b.w	8007458 <_close_r>
	...

08007434 <_write_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	4d07      	ldr	r5, [pc, #28]	; (8007454 <_write_r+0x20>)
 8007438:	4604      	mov	r4, r0
 800743a:	4608      	mov	r0, r1
 800743c:	4611      	mov	r1, r2
 800743e:	2200      	movs	r2, #0
 8007440:	602a      	str	r2, [r5, #0]
 8007442:	461a      	mov	r2, r3
 8007444:	f7fa fd7f 	bl	8001f46 <_write>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d102      	bne.n	8007452 <_write_r+0x1e>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	b103      	cbz	r3, 8007452 <_write_r+0x1e>
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	200002ec 	.word	0x200002ec

08007458 <_close_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4d06      	ldr	r5, [pc, #24]	; (8007474 <_close_r+0x1c>)
 800745c:	2300      	movs	r3, #0
 800745e:	4604      	mov	r4, r0
 8007460:	4608      	mov	r0, r1
 8007462:	602b      	str	r3, [r5, #0]
 8007464:	f7fa fd8b 	bl	8001f7e <_close>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_close_r+0x1a>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_close_r+0x1a>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	200002ec 	.word	0x200002ec

08007478 <_fstat_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	4d07      	ldr	r5, [pc, #28]	; (8007498 <_fstat_r+0x20>)
 800747c:	2300      	movs	r3, #0
 800747e:	4604      	mov	r4, r0
 8007480:	4608      	mov	r0, r1
 8007482:	4611      	mov	r1, r2
 8007484:	602b      	str	r3, [r5, #0]
 8007486:	f7fa fd86 	bl	8001f96 <_fstat>
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	d102      	bne.n	8007494 <_fstat_r+0x1c>
 800748e:	682b      	ldr	r3, [r5, #0]
 8007490:	b103      	cbz	r3, 8007494 <_fstat_r+0x1c>
 8007492:	6023      	str	r3, [r4, #0]
 8007494:	bd38      	pop	{r3, r4, r5, pc}
 8007496:	bf00      	nop
 8007498:	200002ec 	.word	0x200002ec

0800749c <_isatty_r>:
 800749c:	b538      	push	{r3, r4, r5, lr}
 800749e:	4d06      	ldr	r5, [pc, #24]	; (80074b8 <_isatty_r+0x1c>)
 80074a0:	2300      	movs	r3, #0
 80074a2:	4604      	mov	r4, r0
 80074a4:	4608      	mov	r0, r1
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	f7fa fd85 	bl	8001fb6 <_isatty>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_isatty_r+0x1a>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_isatty_r+0x1a>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	200002ec 	.word	0x200002ec

080074bc <_lseek_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4d07      	ldr	r5, [pc, #28]	; (80074dc <_lseek_r+0x20>)
 80074c0:	4604      	mov	r4, r0
 80074c2:	4608      	mov	r0, r1
 80074c4:	4611      	mov	r1, r2
 80074c6:	2200      	movs	r2, #0
 80074c8:	602a      	str	r2, [r5, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	f7fa fd7e 	bl	8001fcc <_lseek>
 80074d0:	1c43      	adds	r3, r0, #1
 80074d2:	d102      	bne.n	80074da <_lseek_r+0x1e>
 80074d4:	682b      	ldr	r3, [r5, #0]
 80074d6:	b103      	cbz	r3, 80074da <_lseek_r+0x1e>
 80074d8:	6023      	str	r3, [r4, #0]
 80074da:	bd38      	pop	{r3, r4, r5, pc}
 80074dc:	200002ec 	.word	0x200002ec

080074e0 <memmove>:
 80074e0:	4288      	cmp	r0, r1
 80074e2:	b510      	push	{r4, lr}
 80074e4:	eb01 0402 	add.w	r4, r1, r2
 80074e8:	d902      	bls.n	80074f0 <memmove+0x10>
 80074ea:	4284      	cmp	r4, r0
 80074ec:	4623      	mov	r3, r4
 80074ee:	d807      	bhi.n	8007500 <memmove+0x20>
 80074f0:	1e43      	subs	r3, r0, #1
 80074f2:	42a1      	cmp	r1, r4
 80074f4:	d008      	beq.n	8007508 <memmove+0x28>
 80074f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074fe:	e7f8      	b.n	80074f2 <memmove+0x12>
 8007500:	4402      	add	r2, r0
 8007502:	4601      	mov	r1, r0
 8007504:	428a      	cmp	r2, r1
 8007506:	d100      	bne.n	800750a <memmove+0x2a>
 8007508:	bd10      	pop	{r4, pc}
 800750a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800750e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007512:	e7f7      	b.n	8007504 <memmove+0x24>

08007514 <__malloc_lock>:
 8007514:	4801      	ldr	r0, [pc, #4]	; (800751c <__malloc_lock+0x8>)
 8007516:	f7ff b9a7 	b.w	8006868 <__retarget_lock_acquire_recursive>
 800751a:	bf00      	nop
 800751c:	200002e0 	.word	0x200002e0

08007520 <__malloc_unlock>:
 8007520:	4801      	ldr	r0, [pc, #4]	; (8007528 <__malloc_unlock+0x8>)
 8007522:	f7ff b9a2 	b.w	800686a <__retarget_lock_release_recursive>
 8007526:	bf00      	nop
 8007528:	200002e0 	.word	0x200002e0

0800752c <_realloc_r>:
 800752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007530:	4680      	mov	r8, r0
 8007532:	4614      	mov	r4, r2
 8007534:	460e      	mov	r6, r1
 8007536:	b921      	cbnz	r1, 8007542 <_realloc_r+0x16>
 8007538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800753c:	4611      	mov	r1, r2
 800753e:	f7ff ba67 	b.w	8006a10 <_malloc_r>
 8007542:	b92a      	cbnz	r2, 8007550 <_realloc_r+0x24>
 8007544:	f7ff f9f8 	bl	8006938 <_free_r>
 8007548:	4625      	mov	r5, r4
 800754a:	4628      	mov	r0, r5
 800754c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007550:	f000 f82e 	bl	80075b0 <_malloc_usable_size_r>
 8007554:	4284      	cmp	r4, r0
 8007556:	4607      	mov	r7, r0
 8007558:	d802      	bhi.n	8007560 <_realloc_r+0x34>
 800755a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800755e:	d812      	bhi.n	8007586 <_realloc_r+0x5a>
 8007560:	4621      	mov	r1, r4
 8007562:	4640      	mov	r0, r8
 8007564:	f7ff fa54 	bl	8006a10 <_malloc_r>
 8007568:	4605      	mov	r5, r0
 800756a:	2800      	cmp	r0, #0
 800756c:	d0ed      	beq.n	800754a <_realloc_r+0x1e>
 800756e:	42bc      	cmp	r4, r7
 8007570:	4622      	mov	r2, r4
 8007572:	4631      	mov	r1, r6
 8007574:	bf28      	it	cs
 8007576:	463a      	movcs	r2, r7
 8007578:	f7fe fe3a 	bl	80061f0 <memcpy>
 800757c:	4631      	mov	r1, r6
 800757e:	4640      	mov	r0, r8
 8007580:	f7ff f9da 	bl	8006938 <_free_r>
 8007584:	e7e1      	b.n	800754a <_realloc_r+0x1e>
 8007586:	4635      	mov	r5, r6
 8007588:	e7df      	b.n	800754a <_realloc_r+0x1e>
	...

0800758c <_read_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4d07      	ldr	r5, [pc, #28]	; (80075ac <_read_r+0x20>)
 8007590:	4604      	mov	r4, r0
 8007592:	4608      	mov	r0, r1
 8007594:	4611      	mov	r1, r2
 8007596:	2200      	movs	r2, #0
 8007598:	602a      	str	r2, [r5, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	f7fa fcb6 	bl	8001f0c <_read>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d102      	bne.n	80075aa <_read_r+0x1e>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	b103      	cbz	r3, 80075aa <_read_r+0x1e>
 80075a8:	6023      	str	r3, [r4, #0]
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
 80075ac:	200002ec 	.word	0x200002ec

080075b0 <_malloc_usable_size_r>:
 80075b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075b4:	1f18      	subs	r0, r3, #4
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	bfbc      	itt	lt
 80075ba:	580b      	ldrlt	r3, [r1, r0]
 80075bc:	18c0      	addlt	r0, r0, r3
 80075be:	4770      	bx	lr

080075c0 <_init>:
 80075c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c2:	bf00      	nop
 80075c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c6:	bc08      	pop	{r3}
 80075c8:	469e      	mov	lr, r3
 80075ca:	4770      	bx	lr

080075cc <_fini>:
 80075cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ce:	bf00      	nop
 80075d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d2:	bc08      	pop	{r3}
 80075d4:	469e      	mov	lr, r3
 80075d6:	4770      	bx	lr
